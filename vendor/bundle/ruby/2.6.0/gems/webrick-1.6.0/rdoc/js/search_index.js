var search_data = {"index":{"searchIndex":["errno","econnaborted","econnreset","eproto","object","webrick","accesslog","accesslogerror","basiclog","cgi","socket","config","cookie","daemon","fakeproxyuri","genericserver","htmlutils","httpauth","authenticator","basicauth","digestauth","htdigest","htgroup","htpasswd","proxyauthenticator","proxybasicauth","proxydigestauth","userdb","httpproxyserver","httprequest","httpresponse","chunkedwrapper","invalidheader","httpserver","mounttable","httpservererror","httpservlet","abstractservlet","cgihandler","defaultfilehandler","erbhandler","filehandler","httpservleterror","prochandler","httpstatus","clienterror","eoferror","error","info","redirect","servererror","status","success","httputils","formdata","httpversion","log","nullreader","snirequest","servererror","simpleserver","utils","timeouthandler","<<()","<<()","<=>()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","access_log()","add()","add_handler()","append_data()","authenticate()","authenticate()","basic_auth()","body()","body_reader()","cancel()","challenge()","challenge()","check_header()","chunked=()","chunked?()","client_error?()","client_error?()","close()","code()","content_length()","content_length()","content_length=()","content_type()","content_type()","content_type=()","convert()","create_listeners()","create_listeners()","create_request()","create_response()","create_self_signed_cert()","create_self_signed_cert()","debug()","debug?()","delete_passwd()","delete_passwd()","dequote()","dequote()","do_get()","do_get()","do_head()","do_options()","do_options()","do_post()","each()","each()","each()","each()","each_data()","error()","error?()","error?()","error?()","escape()","escape()","escape()","escape()","escape8bit()","escape_form()","escape_path()","evaluate()","expires()","expires=()","fatal()","fatal?()","flush()","flush()","flush()","format()","format()","get_instance()","get_passwd()","get_passwd()","get_passwd()","getservername()","getservername()","host()","info()","info?()","info?()","info?()","keep_alive?()","keep_alive?()","list()","listen()","load_mime_types()","load_mime_types()","log()","log()","lookup_server()","make_passwd()","make_passwd()","make_passwd()","members()","meta_vars()","mime_type()","mime_type()","mount()","mount_proc()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_path()","normalize_path()","parse()","parse()","parse_form_data()","parse_form_data()","parse_header()","parse_header()","parse_query()","parse_query()","parse_qvalues()","parse_qvalues()","parse_range_header()","parse_range_header()","parse_set_cookie()","parse_set_cookies()","port()","proxy_basic_auth()","query()","quote()","quote()","random_string()","random_string()","readpartial()","reason_phrase()","reason_phrase()","reason_phrase()","redirect?()","redirect?()","redirect_to_directory_uri()","register()","reload()","reload()","reload()","remote_ip()","remove_handler()","run()","run()","search_servlet()","server_error?()","server_error?()","server_name()","service()","service()","service()","set_close_on_exec()","set_close_on_exec()","set_error()","set_non_blocking()","set_non_blocking()","set_passwd()","set_passwd()","set_passwd()","set_redirect()","setup_params()","shutdown()","split_header_value()","split_header_value()","ssl?()","ssl_servername_callback()","ssl_servername_callback()","start()","start()","start()","start()","status=()","status_line()","stop()","su()","su()","success?()","success?()","sysread()","terminate()","timeout()","timeout()","to_ary()","to_i()","to_s()","to_s()","to_s()","umount()","unescape()","unescape_form()","unmount()","virtual_host()","warn()","warn?()"],"longSearchIndex":["errno","errno::econnaborted","errno::econnreset","errno::eproto","object","webrick","webrick::accesslog","webrick::accesslog::accesslogerror","webrick::basiclog","webrick::cgi","webrick::cgi::socket","webrick::config","webrick::cookie","webrick::daemon","webrick::fakeproxyuri","webrick::genericserver","webrick::htmlutils","webrick::httpauth","webrick::httpauth::authenticator","webrick::httpauth::basicauth","webrick::httpauth::digestauth","webrick::httpauth::htdigest","webrick::httpauth::htgroup","webrick::httpauth::htpasswd","webrick::httpauth::proxyauthenticator","webrick::httpauth::proxybasicauth","webrick::httpauth::proxydigestauth","webrick::httpauth::userdb","webrick::httpproxyserver","webrick::httprequest","webrick::httpresponse","webrick::httpresponse::chunkedwrapper","webrick::httpresponse::invalidheader","webrick::httpserver","webrick::httpserver::mounttable","webrick::httpservererror","webrick::httpservlet","webrick::httpservlet::abstractservlet","webrick::httpservlet::cgihandler","webrick::httpservlet::defaultfilehandler","webrick::httpservlet::erbhandler","webrick::httpservlet::filehandler","webrick::httpservlet::httpservleterror","webrick::httpservlet::prochandler","webrick::httpstatus","webrick::httpstatus::clienterror","webrick::httpstatus::eoferror","webrick::httpstatus::error","webrick::httpstatus::info","webrick::httpstatus::redirect","webrick::httpstatus::servererror","webrick::httpstatus::status","webrick::httpstatus::success","webrick::httputils","webrick::httputils::formdata","webrick::httpversion","webrick::log","webrick::nullreader","webrick::snirequest","webrick::servererror","webrick::simpleserver","webrick::utils","webrick::utils::timeouthandler","webrick::basiclog#<<()","webrick::httputils::formdata#<<()","webrick::httpversion#<=>()","webrick::cgi#[]()","webrick::genericserver#[]()","webrick::httprequest#[]()","webrick::httpresponse#[]()","webrick::httpstatus::[]()","webrick::httputils::formdata#[]()","webrick::httpresponse#[]=()","webrick::httpserver#access_log()","webrick::httpauth::htgroup#add()","webrick::httpservlet::filehandler::add_handler()","webrick::httputils::formdata#append_data()","webrick::httpauth::basicauth#authenticate()","webrick::httpauth::digestauth#authenticate()","webrick::httpauth#basic_auth()","webrick::httprequest#body()","webrick::httprequest#body_reader()","webrick::utils::timeouthandler::cancel()","webrick::httpauth::basicauth#challenge()","webrick::httpauth::digestauth#challenge()","webrick::httpresponse#check_header()","webrick::httpresponse#chunked=()","webrick::httpresponse#chunked?()","webrick::httpstatus::client_error?()","webrick::httpstatus#client_error?()","webrick::basiclog#close()","webrick::httpstatus::status#code()","webrick::httprequest#content_length()","webrick::httpresponse#content_length()","webrick::httpresponse#content_length=()","webrick::httprequest#content_type()","webrick::httpresponse#content_type()","webrick::httpresponse#content_type=()","webrick::httpversion::convert()","webrick::utils#create_listeners()","webrick::utils::create_listeners()","webrick::httpserver#create_request()","webrick::httpserver#create_response()","webrick::utils#create_self_signed_cert()","webrick::utils::create_self_signed_cert()","webrick::basiclog#debug()","webrick::basiclog#debug?()","webrick::httpauth::htdigest#delete_passwd()","webrick::httpauth::htpasswd#delete_passwd()","webrick::httputils::dequote()","webrick::httputils#dequote()","webrick::httpservlet::abstractservlet#do_get()","webrick::httpservlet::erbhandler#do_get()","webrick::httpservlet::abstractservlet#do_head()","webrick::httpserver#do_options()","webrick::httpservlet::abstractservlet#do_options()","webrick::httpservlet::erbhandler#do_post()","webrick::httpauth::htdigest#each()","webrick::httpauth::htpasswd#each()","webrick::httprequest#each()","webrick::httpresponse#each()","webrick::httputils::formdata#each_data()","webrick::basiclog#error()","webrick::basiclog#error?()","webrick::httpstatus::error?()","webrick::httpstatus#error?()","webrick::accesslog#escape()","webrick::htmlutils::escape()","webrick::htmlutils#escape()","webrick::httputils#escape()","webrick::httputils#escape8bit()","webrick::httputils#escape_form()","webrick::httputils#escape_path()","webrick::httpservlet::erbhandler#evaluate()","webrick::cookie#expires()","webrick::cookie#expires=()","webrick::basiclog#fatal()","webrick::basiclog#fatal?()","webrick::httpauth::htdigest#flush()","webrick::httpauth::htgroup#flush()","webrick::httpauth::htpasswd#flush()","webrick::accesslog#format()","webrick::basiclog#format()","webrick::httpservlet::abstractservlet::get_instance()","webrick::httpauth::htdigest#get_passwd()","webrick::httpauth::htpasswd#get_passwd()","webrick::httpauth::userdb#get_passwd()","webrick::utils#getservername()","webrick::utils::getservername()","webrick::httprequest#host()","webrick::basiclog#info()","webrick::basiclog#info?()","webrick::httpstatus::info?()","webrick::httpstatus#info?()","webrick::httprequest#keep_alive?()","webrick::httpresponse#keep_alive?()","webrick::httputils::formdata#list()","webrick::genericserver#listen()","webrick::httputils#load_mime_types()","webrick::httputils::load_mime_types()","webrick::basiclog#log()","webrick::log#log()","webrick::httpserver#lookup_server()","webrick::httpauth::basicauth::make_passwd()","webrick::httpauth::digestauth::make_passwd()","webrick::httpauth::userdb#make_passwd()","webrick::httpauth::htgroup#members()","webrick::httprequest#meta_vars()","webrick::httputils#mime_type()","webrick::httputils::mime_type()","webrick::httpserver#mount()","webrick::httpserver#mount_proc()","webrick::basiclog::new()","webrick::cgi::new()","webrick::cookie::new()","webrick::genericserver::new()","webrick::httpauth::basicauth::new()","webrick::httpauth::digestauth::new()","webrick::httpauth::htdigest::new()","webrick::httpauth::htgroup::new()","webrick::httpauth::htpasswd::new()","webrick::httpproxyserver::new()","webrick::httprequest::new()","webrick::httpresponse::new()","webrick::httpserver::new()","webrick::httpservlet::abstractservlet::new()","webrick::httpservlet::cgihandler::new()","webrick::httpservlet::defaultfilehandler::new()","webrick::httpservlet::erbhandler::new()","webrick::httpservlet::filehandler::new()","webrick::httputils::formdata::new()","webrick::httpversion::new()","webrick::log::new()","webrick::snirequest::new()","webrick::utils::timeouthandler::new()","webrick::httputils::normalize_path()","webrick::httputils#normalize_path()","webrick::cookie::parse()","webrick::httprequest#parse()","webrick::httputils::parse_form_data()","webrick::httputils#parse_form_data()","webrick::httputils#parse_header()","webrick::httputils::parse_header()","webrick::httputils#parse_query()","webrick::httputils::parse_query()","webrick::httputils#parse_qvalues()","webrick::httputils::parse_qvalues()","webrick::httputils::parse_range_header()","webrick::httputils#parse_range_header()","webrick::cookie::parse_set_cookie()","webrick::cookie::parse_set_cookies()","webrick::httprequest#port()","webrick::httpauth#proxy_basic_auth()","webrick::httprequest#query()","webrick::httputils#quote()","webrick::httputils::quote()","webrick::utils::random_string()","webrick::utils#random_string()","webrick::httprequest#readpartial()","webrick::httpstatus::reason_phrase()","webrick::httpstatus#reason_phrase()","webrick::httpstatus::status#reason_phrase()","webrick::httpstatus::redirect?()","webrick::httpstatus#redirect?()","webrick::httpservlet::abstractservlet#redirect_to_directory_uri()","webrick::utils::timeouthandler::register()","webrick::httpauth::htdigest#reload()","webrick::httpauth::htgroup#reload()","webrick::httpauth::htpasswd#reload()","webrick::httprequest#remote_ip()","webrick::httpservlet::filehandler::remove_handler()","webrick::genericserver#run()","webrick::httpserver#run()","webrick::httpserver#search_servlet()","webrick::httpstatus::server_error?()","webrick::httpstatus#server_error?()","webrick::httprequest#server_name()","webrick::cgi#service()","webrick::httpserver#service()","webrick::httpservlet::abstractservlet#service()","webrick::utils#set_close_on_exec()","webrick::utils::set_close_on_exec()","webrick::httpresponse#set_error()","webrick::utils#set_non_blocking()","webrick::utils::set_non_blocking()","webrick::httpauth::htdigest#set_passwd()","webrick::httpauth::htpasswd#set_passwd()","webrick::httpauth::userdb#set_passwd()","webrick::httpresponse#set_redirect()","webrick::accesslog#setup_params()","webrick::genericserver#shutdown()","webrick::httputils#split_header_value()","webrick::httputils::split_header_value()","webrick::httprequest#ssl?()","webrick::genericserver#ssl_servername_callback()","webrick::httpserver#ssl_servername_callback()","webrick::cgi#start()","webrick::daemon::start()","webrick::genericserver#start()","webrick::simpleserver::start()","webrick::httpresponse#status=()","webrick::httpresponse#status_line()","webrick::genericserver#stop()","webrick::utils#su()","webrick::utils::su()","webrick::httpstatus::success?()","webrick::httpstatus#success?()","object#sysread()","webrick::utils::timeouthandler::terminate()","webrick::utils#timeout()","webrick::utils::timeout()","webrick::httputils::formdata#to_ary()","webrick::httpstatus::status#to_i()","webrick::cookie#to_s()","webrick::httputils::formdata#to_s()","webrick::httpversion#to_s()","webrick::httpserver#umount()","webrick::httputils#unescape()","webrick::httputils#unescape_form()","webrick::httpserver#unmount()","webrick::httpserver#virtual_host()","webrick::basiclog#warn()","webrick::basiclog#warn?()"],"info":[["Errno","","Errno.html","","<p>System call error module used by webrick for cross platform compatibility.\n<p>EPROTO &mdash; protocol error\n<p>ECONNRESET … &mdash; "],["Errno::ECONNABORTED","","Errno/ECONNABORTED.html","","<p>Client sent TCP reset (RST) before server has accepted the connection requested by client.\n"],["Errno::ECONNRESET","","Errno/ECONNRESET.html","","<p>Remote host reset the connection request.\n"],["Errno::EPROTO","","Errno/EPROTO.html","","<p>Protocol error.\n"],["Object","","Object.html","",""],["WEBrick","","WEBrick.html","","<p>WEB server toolkit.\n<p>WEBrick is an HTTP server toolkit that can be configured as an HTTPS server, a proxy …\n"],["WEBrick::AccessLog","","WEBrick/AccessLog.html","","<p>AccessLog provides logging to various files in various formats.\n<p>Multiple logs may be written to at the …\n"],["WEBrick::AccessLog::AccessLogError","","WEBrick/AccessLog/AccessLogError.html","","<p>Raised if a parameter such as %e, %i, %o or %n is used without fetching a specific field.\n"],["WEBrick::BasicLog","","WEBrick/BasicLog.html","","<p>A generic logging class\n"],["WEBrick::CGI","","WEBrick/CGI.html","","<p>A CGI library using WEBrick requests and responses.\n<p>Example:\n\n<pre>class MyCGI &lt; WEBrick::CGI\n  def do_GET req, ...</pre>\n"],["WEBrick::CGI::Socket","","WEBrick/CGI/Socket.html","",""],["WEBrick::Config","","WEBrick/Config.html","",""],["WEBrick::Cookie","","WEBrick/Cookie.html","","<p>Processes HTTP cookies\n"],["WEBrick::Daemon","","WEBrick/Daemon.html","","<p>A generic module for daemonizing a process\n"],["WEBrick::FakeProxyURI","","WEBrick/FakeProxyURI.html","",""],["WEBrick::GenericServer","","WEBrick/GenericServer.html","","<p>Base TCP server class.  You must subclass GenericServer and provide a #run method.\n"],["WEBrick::HTMLUtils","","WEBrick/HTMLUtils.html","",""],["WEBrick::HTTPAuth","","WEBrick/HTTPAuth.html","","<p>HTTPAuth provides both basic and digest authentication.\n<p>To enable authentication for requests in WEBrick …\n"],["WEBrick::HTTPAuth::Authenticator","","WEBrick/HTTPAuth/Authenticator.html","","<p>Module providing generic support for both Digest and Basic authentication schemes.\n"],["WEBrick::HTTPAuth::BasicAuth","","WEBrick/HTTPAuth/BasicAuth.html","","<p>Basic Authentication for WEBrick\n<p>Use this class to add basic authentication to a WEBrick servlet.\n<p>Here …\n"],["WEBrick::HTTPAuth::DigestAuth","","WEBrick/HTTPAuth/DigestAuth.html","","<p>RFC 2617 Digest Access Authentication for WEBrick\n<p>Use this class to add digest authentication to a WEBrick …\n"],["WEBrick::HTTPAuth::Htdigest","","WEBrick/HTTPAuth/Htdigest.html","","<p>Htdigest accesses apache-compatible digest password files.  Passwords are matched to a realm where they …\n"],["WEBrick::HTTPAuth::Htgroup","","WEBrick/HTTPAuth/Htgroup.html","","<p>Htgroup accesses apache-compatible group files.  Htgroup can be used to provide group-based authentication …\n"],["WEBrick::HTTPAuth::Htpasswd","","WEBrick/HTTPAuth/Htpasswd.html","","<p>Htpasswd accesses apache-compatible password files.  Passwords are matched to a realm where they are …\n"],["WEBrick::HTTPAuth::ProxyAuthenticator","","WEBrick/HTTPAuth/ProxyAuthenticator.html","","<p>Module providing generic support for both Digest and Basic authentication schemes for proxies.\n"],["WEBrick::HTTPAuth::ProxyBasicAuth","","WEBrick/HTTPAuth/ProxyBasicAuth.html","","<p>Basic authentication for proxy servers.  See BasicAuth for details.\n"],["WEBrick::HTTPAuth::ProxyDigestAuth","","WEBrick/HTTPAuth/ProxyDigestAuth.html","","<p>Digest authentication for proxy servers.  See DigestAuth for details.\n"],["WEBrick::HTTPAuth::UserDB","","WEBrick/HTTPAuth/UserDB.html","","<p>User database mixin for HTTPAuth.  This mixin dispatches user record access to the underlying auth_type …\n"],["WEBrick::HTTPProxyServer","","WEBrick/HTTPProxyServer.html","","<p>An HTTP Proxy server which proxies GET, HEAD and POST requests.\n<p>To create a simple proxy server:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["WEBrick::HTTPRequest","","WEBrick/HTTPRequest.html","","<p>An HTTP request.  This is consumed by service and do_* methods in WEBrick servlets\n"],["WEBrick::HTTPResponse","","WEBrick/HTTPResponse.html","","<p>An HTTP response.  This is filled in by the service or do_* methods of a WEBrick HTTP Servlet.\n"],["WEBrick::HTTPResponse::ChunkedWrapper","","WEBrick/HTTPResponse/ChunkedWrapper.html","",""],["WEBrick::HTTPResponse::InvalidHeader","","WEBrick/HTTPResponse/InvalidHeader.html","",""],["WEBrick::HTTPServer","","WEBrick/HTTPServer.html","","<p>An HTTP Server\n"],["WEBrick::HTTPServer::MountTable","","WEBrick/HTTPServer/MountTable.html","",""],["WEBrick::HTTPServerError","","WEBrick/HTTPServerError.html","",""],["WEBrick::HTTPServlet","","WEBrick/HTTPServlet.html","",""],["WEBrick::HTTPServlet::AbstractServlet","","WEBrick/HTTPServlet/AbstractServlet.html","","<p>AbstractServlet allows HTTP server modules to be reused across multiple servers and allows encapsulation …\n"],["WEBrick::HTTPServlet::CGIHandler","","WEBrick/HTTPServlet/CGIHandler.html","","<p>Servlet for handling CGI scripts\n<p>Example:\n\n<pre>server.mount(&#39;/cgi/my_script&#39;, WEBrick::HTTPServlet::CGIHandler, ...</pre>\n"],["WEBrick::HTTPServlet::DefaultFileHandler","","WEBrick/HTTPServlet/DefaultFileHandler.html","","<p>Servlet for serving a single file.  You probably want to use the FileHandler servlet instead as it handles …\n"],["WEBrick::HTTPServlet::ERBHandler","","WEBrick/HTTPServlet/ERBHandler.html","","<p>ERBHandler evaluates an ERB file and returns the result.  This handler is automatically used if there …\n"],["WEBrick::HTTPServlet::FileHandler","","WEBrick/HTTPServlet/FileHandler.html","","<p>Serves a directory including fancy indexing and a variety of other options.\n<p>Example:\n\n<pre>server.mount(&#39;/assets&#39;, ...</pre>\n"],["WEBrick::HTTPServlet::HTTPServletError","","WEBrick/HTTPServlet/HTTPServletError.html","",""],["WEBrick::HTTPServlet::ProcHandler","","WEBrick/HTTPServlet/ProcHandler.html","","<p>Mounts a proc at a path that accepts a request and response.\n<p>Instead of mounting this servlet with WEBrick::HTTPServer#mount …\n"],["WEBrick::HTTPStatus","","WEBrick/HTTPStatus.html","","<p>This module is used to manager HTTP status codes.\n<p>See www.w3.org/Protocols/rfc2616/rfc2616-sec10.html …\n"],["WEBrick::HTTPStatus::ClientError","","WEBrick/HTTPStatus/ClientError.html","","<p>Root of the HTTP client error statuses\n"],["WEBrick::HTTPStatus::EOFError","","WEBrick/HTTPStatus/EOFError.html","",""],["WEBrick::HTTPStatus::Error","","WEBrick/HTTPStatus/Error.html","","<p>Root of the HTTP error statuses\n"],["WEBrick::HTTPStatus::Info","","WEBrick/HTTPStatus/Info.html","","<p>Root of the HTTP info statuses\n"],["WEBrick::HTTPStatus::Redirect","","WEBrick/HTTPStatus/Redirect.html","","<p>Root of the HTTP redirect statuses\n"],["WEBrick::HTTPStatus::ServerError","","WEBrick/HTTPStatus/ServerError.html","","<p>Root of the HTTP server error statuses\n"],["WEBrick::HTTPStatus::Status","","WEBrick/HTTPStatus/Status.html","","<p>Root of the HTTP status class hierarchy\n"],["WEBrick::HTTPStatus::Success","","WEBrick/HTTPStatus/Success.html","","<p>Root of the HTTP success statuses\n"],["WEBrick::HTTPUtils","","WEBrick/HTTPUtils.html","","<p>HTTPUtils provides utility methods for working with the HTTP protocol.\n<p>This module is generally used internally …\n"],["WEBrick::HTTPUtils::FormData","","WEBrick/HTTPUtils/FormData.html","","<p>Stores multipart form data.  FormData objects are created when WEBrick::HTTPUtils.parse_form_data is …\n"],["WEBrick::HTTPVersion","","WEBrick/HTTPVersion.html","","<p>Represents an HTTP protocol version\n"],["WEBrick::Log","","WEBrick/Log.html","","<p>A logging class that prepends a timestamp to each message.\n"],["WEBrick::NullReader","","WEBrick/NullReader.html","",""],["WEBrick::SNIRequest","","WEBrick/SNIRequest.html","",""],["WEBrick::ServerError","","WEBrick/ServerError.html","","<p>Server error exception\n"],["WEBrick::SimpleServer","","WEBrick/SimpleServer.html","","<p>Base server class\n"],["WEBrick::Utils","","WEBrick/Utils.html","",""],["WEBrick::Utils::TimeoutHandler","","WEBrick/Utils/TimeoutHandler.html","","<p>Class used to manage timeout handlers across multiple threads.\n<p>Timeout handlers should be managed by using …\n"],["<<","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-3C-3C","(obj)","<p>Synonym for log(INFO, obj.to_s)\n"],["<<","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-3C-3C","(str)","<p>Adds <code>str</code> to this FormData which may be the body, a header or a header entry.\n<p>This is called by WEBrick::HTTPUtils.parse_form_data …\n"],["<=>","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> according to the HTTP specification rules.\n"],["[]","WEBrick::CGI","WEBrick/CGI.html#method-i-5B-5D","(key)","<p>Reads <code>key</code> from the configuration\n"],["[]","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the configuration\n"],["[]","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-5B-5D","(header_name)","<p>Retrieves <code>header_name</code>\n"],["[]","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-5B-5D","(field)","<p>Retrieves the response header <code>field</code>\n"],["[]","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-5B-5D","(code)","<p>Returns the status class corresponding to <code>code</code>\n\n<pre>WEBrick::HTTPStatus[302]\n=&gt; WEBrick::HTTPStatus::NotFound</pre>\n"],["[]","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-5B-5D","(*key)","<p>Retrieves the header at the first entry in <code>key</code>\n"],["[]=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-5B-5D-3D","(field, value)","<p>Sets the response header <code>field</code> to <code>value</code>\n"],["access_log","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-access_log","(config, req, res)","<p>Logs <code>req</code> and <code>res</code> in the access logs.  <code>config</code> is used for the server name.\n"],["add","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-add","(group, members)","<p>Add an Array of <code>members</code> to <code>group</code>\n"],["add_handler","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-add_handler","(suffix, handler)","<p>Allow custom handling of requests for files with <code>suffix</code> by class <code>handler</code>\n"],["append_data","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-append_data","(data)","<p>Adds <code>data</code> at the end of the chain of entries\n<p>This is called by WEBrick::HTTPUtils.parse_form_data for …\n"],["authenticate","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using <code>res</code> if the authentication was not correct.\n"],["authenticate","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using <code>res</code> if the authentication was not correct.\n"],["basic_auth","WEBrick::HTTPAuth","WEBrick/HTTPAuth.html#method-i-basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a request.  When called with a request <code>req</code>, response …\n"],["body","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-body","()","<p>Returns the request body.\n"],["body_reader","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-body_reader","()","<p>Prepares the HTTPRequest object for use as the source for IO.copy_stream\n"],["cancel","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-cancel","(id)","<p>Cancels the timeout handler <code>id</code>\n"],["challenge","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-i-challenge","(req, res)","<p>Returns a challenge response which asks for authentication information\n"],["challenge","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-i-challenge","(req, res, stale=false)","<p>Returns a challenge response which asks for authentication information\n"],["check_header","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-check_header","(header_value)",""],["chunked=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-chunked-3D","(val)","<p>Enables chunked transfer encoding.\n"],["chunked?","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-chunked-3F","()","<p>Will this response body be returned using chunked transfer-encoding?\n"],["client_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["client_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["close","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-close","()","<p>Closes the logger (also closes the log device associated to the logger)\n"],["code","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-code","()","<p>Returns the HTTP status code\n"],["content_length","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-content_length","()","<p>The content-length header\n"],["content_length","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_length","()","<p>The content-length header\n"],["content_length=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_length-3D","(len)","<p>Sets the content-length header to <code>len</code>\n"],["content_type","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-content_type","()","<p>The content-type header\n"],["content_type","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_type","()","<p>The content-type header\n"],["content_type=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_type-3D","(type)","<p>Sets the content-type header to <code>type</code>\n"],["convert","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-c-convert","(version)","<p>Converts <code>version</code> into an HTTPVersion\n"],["create_listeners","WEBrick::Utils","WEBrick/Utils.html#method-i-create_listeners","(address, port)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code> and returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_listeners","WEBrick::Utils","WEBrick/Utils.html#method-c-create_listeners","(address, port)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code> and returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_request","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-create_request","(with_webrick_config)","<p>Creates the HTTPRequest used when handling the HTTP request. Can be overridden by subclasses.\n"],["create_response","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-create_response","(with_webrick_config)","<p>Creates the HTTPResponse used when handling the HTTP request. Can be overridden by subclasses.\n"],["create_self_signed_cert","WEBrick::Utils","WEBrick/Utils.html#method-i-create_self_signed_cert","(bits, cn, comment)","<p>Creates a self-signed certificate with the given number of <code>bits</code>, the issuer <code>cn</code> and a <code>comment</code> to be stored …\n"],["create_self_signed_cert","WEBrick::Utils","WEBrick/Utils.html#method-c-create_self_signed_cert","(bits, cn, comment)","<p>Creates a self-signed certificate with the given number of <code>bits</code>, the issuer <code>cn</code> and a <code>comment</code> to be stored …\n"],["debug","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-debug","(msg)","<p>Shortcut for logging a DEBUG message\n"],["debug?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-debug-3F","()","<p>Will the logger output DEBUG messages?\n"],["delete_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in <code>realm</code>.\n"],["delete_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in <code>realm</code>.\n"],["dequote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-dequote","(str)","<p>Removes quotes and escapes from <code>str</code>\n"],["dequote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-dequote","(str)","<p>Removes quotes and escapes from <code>str</code>\n"],["do_GET","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_GET","(req, res)","<p>Raises a NotFound exception\n"],["do_GET","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-do_GET","(req, res)","<p>Handles GET requests\n"],["do_HEAD","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_HEAD","(req, res)","<p>Dispatches to do_GET\n"],["do_OPTIONS","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-do_OPTIONS","(req, res)","<p>The default OPTIONS request handler says GET, HEAD, POST and OPTIONS requests are allowed.\n"],["do_OPTIONS","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_OPTIONS","(req, res)","<p>Returns the allowed HTTP request methods\n"],["do_POST","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-do_POST","(req, res)","<p>Handles POST requests\n"],["each","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-each","()","<p>Iterates over the request headers\n"],["each","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-each","()","<p>Iterates over each header in the response\n"],["each_data","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-each_data","()","<p>Yields each entry in this FormData\n"],["error","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-error","(msg)","<p>Shortcut for logging an ERROR message\n"],["error?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-error-3F","()","<p>Will the logger output ERROR messages?\n"],["error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["escape","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-escape","(data)","<p>Escapes control characters in <code>data</code>\n"],["escape","WEBrick::HTMLUtils","WEBrick/HTMLUtils.html#method-c-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["escape","WEBrick::HTMLUtils","WEBrick/HTMLUtils.html#method-i-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["escape","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape","(str)","<p>Escapes HTTP reserved and unwise characters in <code>str</code>\n"],["escape8bit","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape8bit","(str)","<p>Escapes 8 bit characters in <code>str</code>\n"],["escape_form","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape_form","(str)","<p>Escapes form reserved characters in <code>str</code>\n"],["escape_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape_path","(str)","<p>Escapes path <code>str</code>\n"],["evaluate","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-evaluate","(erb, servlet_request, servlet_response)","<p>Evaluates <code>erb</code> providing <code>servlet_request</code> and <code>servlet_response</code> as local variables.\n"],["expires","WEBrick::Cookie","WEBrick/Cookie.html#method-i-expires","()","<p>Retrieves the expiration time as a Time\n"],["expires=","WEBrick::Cookie","WEBrick/Cookie.html#method-i-expires-3D","(t)","<p>Sets the cookie expiration to the time <code>t</code>.  The expiration time may be a false value to disable expiration …\n"],["fatal","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-fatal","(msg)","<p>Shortcut for logging a FATAL message\n"],["fatal?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-fatal-3F","()","<p>Will the logger output FATAL messages?\n"],["flush","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database will be written there instead of to the …\n"],["flush","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-flush","(output=nil)","<p>Flush the group database.  If <code>output</code> is given the database will be written there instead of to the original …\n"],["flush","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database will be written there instead of to the …\n"],["format","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-format","(format_string, params)","<p>Formats <code>params</code> according to <code>format_string</code> which is described in setup_params.\n"],["format","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-format","(arg)","<p>Formats <code>arg</code> for the logger\n<p>If <code>arg</code> is an Exception, it will format the error message and the back trace. …\n"],["get_instance","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-c-get_instance","(server, *options)","<p>Factory for servlet instances that will handle a request from <code>server</code> using <code>options</code> from the mount point. …\n"],["get_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in <code>realm</code>.  If <code>reload_db</code> is true the database will be …\n"],["get_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in <code>realm</code>.  If <code>reload_db</code> is true the database will be …\n"],["get_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-get_passwd","(realm, user, reload_db=false)","<p>Retrieves a password in <code>realm</code> for <code>user</code> for the auth_type of this database.  <code>reload_db</code> is a dummy value. …\n"],["getservername","WEBrick::Utils","WEBrick/Utils.html#method-i-getservername","()","<p>The server hostname\n"],["getservername","WEBrick::Utils","WEBrick/Utils.html#method-c-getservername","()","<p>The server hostname\n"],["host","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-host","()","<p>The host this request is for\n"],["info","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-info","(msg)","<p>Shortcut for logging an INFO message\n"],["info?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-info-3F","()","<p>Will the logger output INFO messages?\n"],["info?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["info?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["keep_alive?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-keep_alive-3F","()","<p>Should the connection this request was made on be kept alive?\n"],["keep_alive?","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-keep_alive-3F","()","<p>Will this response&#39;s connection be kept alive?\n"],["list","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-list","()","<p>Returns all the FormData as an Array\n"],["listen","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-listen","(address, port)","<p>Adds listeners from <code>address</code> and <code>port</code> to the server.  See WEBrick::Utils::create_listeners for details. …\n"],["load_mime_types","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-load_mime_types","(file)","<p>Loads Apache-compatible mime.types in <code>file</code>.\n"],["load_mime_types","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-load_mime_types","(file)","<p>Loads Apache-compatible mime.types in <code>file</code>.\n"],["log","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-log","(level, data)","<p>Logs <code>data</code> at <code>level</code> if the given level is above the current log level.\n"],["log","WEBrick::Log","WEBrick/Log.html#method-i-log","(level, data)","<p>Same as BasicLog#log\n"],["lookup_server","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-lookup_server","(req)","<p>Finds the appropriate virtual host to handle <code>req</code>\n"],["make_passwd","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a basic password entry\n"],["make_passwd","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a digest password entry\n"],["make_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-make_passwd","(realm, user, pass)","<p>Creates an obscured password in <code>realm</code> with <code>user</code> and <code>password</code> using the auth_type of this database.\n"],["members","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-members","(group)","<p>Retrieve the list of members from <code>group</code>\n"],["meta_vars","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-meta_vars","()","<p>This method provides the metavariables defined by the revision 3 of “The WWW Common Gateway Interface …\n"],["mime_type","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-mime_type","(filename, mime_tab)","<p>Returns the mime type of <code>filename</code> from the list in <code>mime_tab</code>.  If no mime type was found application/octet-stream …\n"],["mime_type","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-mime_type","(filename, mime_tab)","<p>Returns the mime type of <code>filename</code> from the list in <code>mime_tab</code>.  If no mime type was found application/octet-stream …\n"],["mount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-mount","(dir, servlet, *options)","<p>Mounts <code>servlet</code> on <code>dir</code> passing <code>options</code> to the servlet at creation time\n"],["mount_proc","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-mount_proc","(dir, proc=nil, &block)","<p>Mounts <code>proc</code> or <code>block</code> on <code>dir</code> and calls it with a WEBrick::HTTPRequest and WEBrick::HTTPResponse\n"],["new","WEBrick::BasicLog","WEBrick/BasicLog.html#method-c-new","(log_file=nil, level=nil)","<p>Initializes a new logger for <code>log_file</code> that outputs messages at <code>level</code> or higher.  <code>log_file</code> can be a filename, …\n"],["new","WEBrick::CGI","WEBrick/CGI.html#method-c-new","(*args)","<p>Creates a new CGI interface.\n<p>The first argument in <code>args</code> is a configuration hash which would update WEBrick::Config::HTTP …\n"],["new","WEBrick::Cookie","WEBrick/Cookie.html#method-c-new","(name, value)","<p>Creates a new cookie with the given <code>name</code> and <code>value</code>\n"],["new","WEBrick::GenericServer","WEBrick/GenericServer.html#method-c-new","(config={}, default=Config::General)","<p>Creates a new generic server from <code>config</code>.  The default configuration comes from <code>default</code>.\n"],["new","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-c-new","(config, default=Config::BasicAuth)","<p>Creates a new BasicAuth instance.\n<p>See WEBrick::Config::BasicAuth for default configuration entries\n<p>You …\n"],["new","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-c-new","(config, default=Config::DigestAuth)","<p>Creates a new DigestAuth instance.  Be sure to use the same DigestAuth instance for multiple requests …\n"],["new","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-c-new","(path)","<p>Open a digest password database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-c-new","(path)","<p>Open a group database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-c-new","(path, password_hash: nil)","<p>Open a password database at <code>path</code>\n"],["new","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Proxy server configurations.  The proxy server handles the following configuration items in addition …\n"],["new","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-c-new","(config)","<p>Creates a new HTTP request.  WEBrick::Config::HTTP is the default configuration.\n"],["new","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-c-new","(config)","<p>Creates a new HTTP response object.  WEBrick::Config::HTTP is the default configuration.\n"],["new","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Creates a new HTTP server according to <code>config</code>\n<p>An HTTP server uses the following attributes:\n<p>:AccessLog … &mdash; "],["new","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-c-new","(server, *options)","<p>Initializes a new servlet for <code>server</code> using <code>options</code> which are stored as-is in +@options+.  +@logger+ is …\n"],["new","WEBrick::HTTPServlet::CGIHandler","WEBrick/HTTPServlet/CGIHandler.html#method-c-new","(server, name)","<p>Creates a new CGI script servlet for the script at <code>name</code>\n"],["new","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-c-new","(server, local_path)","<p>Creates a DefaultFileHandler instance for the file at <code>local_path</code>.\n"],["new","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-c-new","(server, name)","<p>Creates a new ERBHandler on <code>server</code> that will evaluate and serve the ERB file <code>name</code>\n"],["new","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-new","(server, root, options={}, default=Config::FileHandler)","<p>Creates a FileHandler servlet on <code>server</code> that serves files starting at directory <code>root</code>\n<p><code>options</code> may be a …\n"],["new","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-c-new","(*args)","<p>Creates a new FormData object.\n<p><code>args</code> is an Array of form data entries.  One FormData will be created for …\n"],["new","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-c-new","(version)","<p>Creates a new HTTPVersion from <code>version</code>.\n"],["new","WEBrick::Log","WEBrick/Log.html#method-c-new","(log_file=nil, level=nil)","<p>Same as BasicLog#initialize\n<p>You can set the timestamp format through #time_format\n"],["new","WEBrick::SNIRequest","WEBrick/SNIRequest.html#method-c-new","(sslsocket, hostname)","<p>Creates a new SNIRequest.\n"],["new","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-new","()","<p>Creates a new TimeoutHandler.  You should use ::register and ::cancel instead of creating the timeout …\n"],["normalize_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-normalize_path","(path)","<p>Normalizes a request path.  Raises an exception if the path cannot be normalized.\n"],["normalize_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-normalize_path","(path)","<p>Normalizes a request path.  Raises an exception if the path cannot be normalized.\n"],["parse","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse","(str)","<p>Parses a Cookie field sent from the user-agent.  Returns an array of cookies.\n"],["parse","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-parse","(socket=nil)","<p>Parses a request from <code>socket</code>.  This is called internally by WEBrick::HTTPServer.\n"],["parse_form_data","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_form_data","(io, boundary)","<p>Parses form data in <code>io</code> with the given <code>boundary</code>\n"],["parse_form_data","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_form_data","(io, boundary)","<p>Parses form data in <code>io</code> with the given <code>boundary</code>\n"],["parse_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_header","(raw)","<p>Parses an HTTP header <code>raw</code> into a hash of header fields with an Array of values.\n"],["parse_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_header","(raw)","<p>Parses an HTTP header <code>raw</code> into a hash of header fields with an Array of values.\n"],["parse_query","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_query","(str)","<p>Parses the query component of a URI in <code>str</code>\n"],["parse_query","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_query","(str)","<p>Parses the query component of a URI in <code>str</code>\n"],["parse_qvalues","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_qvalues","(value)","<p>Parses q values in <code>value</code> as used in Accept headers.\n"],["parse_qvalues","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_qvalues","(value)","<p>Parses q values in <code>value</code> as used in Accept headers.\n"],["parse_range_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_range_header","(ranges_specifier)","<p>Parses a Range header value <code>ranges_specifier</code>\n"],["parse_range_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_range_header","(ranges_specifier)","<p>Parses a Range header value <code>ranges_specifier</code>\n"],["parse_set_cookie","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse_set_cookie","(str)","<p>Parses the cookie in <code>str</code>\n"],["parse_set_cookies","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse_set_cookies","(str)","<p>Parses the cookies in <code>str</code>\n"],["port","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-port","()","<p>The port this request is for\n"],["proxy_basic_auth","WEBrick::HTTPAuth","WEBrick/HTTPAuth.html#method-i-proxy_basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a proxied request. When called with a request  …\n"],["query","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-query","()","<p>Request query as a Hash\n"],["quote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-quote","(str)","<p>Quotes and escapes quotes in <code>str</code>\n"],["quote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-quote","(str)","<p>Quotes and escapes quotes in <code>str</code>\n"],["random_string","WEBrick::Utils","WEBrick/Utils.html#method-c-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["random_string","WEBrick::Utils","WEBrick/Utils.html#method-i-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["readpartial","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-readpartial","(size, buf = ''.b)","<p>for IO.copy_stream.  Note: we may return a larger string than <code>size</code> here; but IO.copy_stream does not …\n"],["reason_phrase","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre>WEBrick::HTTPStatus.reason_phrase 404\n=&gt; ...</pre>\n"],["reason_phrase","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre>WEBrick::HTTPStatus.reason_phrase 404\n=&gt; ...</pre>\n"],["reason_phrase","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-reason_phrase","()","<p>Returns the HTTP status description\n"],["redirect?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["redirect?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["redirect_to_directory_uri","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-redirect_to_directory_uri","(req, res)","<p>Redirects to a path ending in /\n"],["register","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-register","(seconds, exception)","<p>Registers a new timeout handler\n<p><code>time</code> &mdash; Timeout in seconds\n<p><code>exception</code> &mdash; Exception to raise when timeout elapsed …\n"],["reload","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-reload","()","<p>Reloads passwords from the database\n"],["reload","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-reload","()","<p>Reload groups from the database\n"],["reload","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-reload","()","<p>Reload passwords from the database\n"],["remote_ip","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-remote_ip","()","<p>The client&#39;s IP address\n"],["remove_handler","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-remove_handler","(suffix)","<p>Remove custom handling of requests for files with <code>suffix</code>\n"],["run","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-run","(sock)","<p>You must subclass GenericServer and implement #run which accepts a TCP client socket\n"],["run","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-run","(sock)","<p>Processes requests on <code>sock</code>\n"],["search_servlet","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-search_servlet","(path)","<p>Finds a servlet for <code>path</code>\n"],["server_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_name","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-server_name","()","<p>The server name this request is for\n"],["service","WEBrick::CGI","WEBrick/CGI.html#method-i-service","(req, res)","<p>Services the request <code>req</code> which will fill in the response <code>res</code>.  See WEBrick::HTTPServlet::AbstractServlet#service …\n"],["service","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-service","(req, res)","<p>Services <code>req</code> and fills in <code>res</code>\n"],["service","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-service","(req, res)","<p>Dispatches to a <code>do_</code> method based on <code>req</code> if such a method is available.  (<code>do_GET</code> for a GET request).  …\n"],["set_close_on_exec","WEBrick::Utils","WEBrick/Utils.html#method-i-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_close_on_exec","WEBrick::Utils","WEBrick/Utils.html#method-c-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_error","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-set_error","(ex, backtrace=false)","<p>Creates an error page for exception <code>ex</code> with an optional <code>backtrace</code>\n"],["set_non_blocking","WEBrick::Utils","WEBrick/Utils.html#method-i-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_non_blocking","WEBrick::Utils","WEBrick/Utils.html#method-c-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code> to <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code> to <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in <code>realm</code> with <code>user</code> and <code>password</code> for the auth_type of this database.\n"],["set_redirect","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-set_redirect","(status, url)","<p>Redirects to <code>url</code> with a WEBrick::HTTPStatus::Redirect <code>status</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">set_redirect</span> <span class=\"ruby-constant\">WEBrick</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTPStatus</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TemporaryRedirect</span>\n</pre>\n"],["setup_params","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-setup_params","(config, req, res)","<p>This format specification is a subset of mod_log_config of Apache:\n<p>%a &mdash; Remote IP address\n<p>%b &mdash; Total response …\n"],["shutdown","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-shutdown","()","<p>Shuts down the server and all listening sockets.  New listeners must be provided to restart the server. …\n"],["split_header_value","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-split_header_value","(str)","<p>Splits a header value <code>str</code> according to HTTP specification.\n"],["split_header_value","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-split_header_value","(str)","<p>Splits a header value <code>str</code> according to HTTP specification.\n"],["ssl?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["ssl_servername_callback","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-ssl_servername_callback","(sslsocket, hostname = nil)","<p>ServerNameIndication callback\n"],["ssl_servername_callback","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-ssl_servername_callback","(sslsocket, hostname = nil)","<p>ServerNameIndication callback\n"],["start","WEBrick::CGI","WEBrick/CGI.html#method-i-start","(env=ENV, stdin=$stdin, stdout=$stdout)","<p>Starts the CGI process with the given environment <code>env</code> and standard input and output <code>stdin</code> and <code>stdout</code> …\n"],["start","WEBrick::Daemon","WEBrick/Daemon.html#method-c-start","()","<p>Performs the standard operations for daemonizing a process.  Runs a block, if given.\n"],["start","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-start","(&block)","<p>Starts the server and runs the <code>block</code> for each connection.  This method does not return until the server …\n"],["start","WEBrick::SimpleServer","WEBrick/SimpleServer.html#method-c-start","()","<p>A SimpleServer only yields when you start it\n"],["status=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-status-3D","(status)","<p>Sets the response&#39;s status to the <code>status</code> code\n"],["status_line","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-status_line","()","<p>The response&#39;s HTTP status line\n"],["stop","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-stop","()","<p>Stops the server from accepting new connections.\n"],["su","WEBrick::Utils","WEBrick/Utils.html#method-i-su","(user)","<p>Changes the process&#39;s uid and gid to the ones of <code>user</code>\n"],["su","WEBrick::Utils","WEBrick/Utils.html#method-c-su","(user)","<p>Changes the process&#39;s uid and gid to the ones of <code>user</code>\n"],["success?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["success?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["sysread","Object","Object.html#method-i-sysread","(io, size)","<p>cgi_runner.rb – CGI launcher.\n<p>Author: IPR – Internet Programming with Ruby – writers Copyright © …\n"],["terminate","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-terminate","()",""],["timeout","WEBrick::Utils","WEBrick/Utils.html#method-i-timeout","(seconds, exception=Timeout::Error)","<p>Executes the passed block and raises <code>exception</code> if execution takes more than <code>seconds</code>.\n<p>If <code>seconds</code> is zero …\n"],["timeout","WEBrick::Utils","WEBrick/Utils.html#method-c-timeout","(seconds, exception=Timeout::Error)","<p>Executes the passed block and raises <code>exception</code> if execution takes more than <code>seconds</code>.\n<p>If <code>seconds</code> is zero …\n"],["to_ary","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-to_ary","()","<p>A FormData will behave like an Array\n"],["to_i","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-to_i","()",""],["to_s","WEBrick::Cookie","WEBrick/Cookie.html#method-i-to_s","()","<p>The cookie string suitable for use in an HTTP header\n"],["to_s","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-to_s","()","<p>This FormData&#39;s body\n"],["to_s","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-i-to_s","()","<p>The HTTP version as show in the HTTP request and response.  For example, “1.1”\n"],["umount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-umount","(dir)",""],["unescape","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-unescape","(str)","<p>Unescapes HTTP reserved and unwise characters in <code>str</code>\n"],["unescape_form","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-unescape_form","(str)","<p>Unescapes form reserved characters in <code>str</code>\n"],["unmount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-unmount","(dir)","<p>Unmounts <code>dir</code>\n"],["virtual_host","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-virtual_host","(server)","<p>Adds <code>server</code> as a virtual host.\n"],["warn","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-warn","(msg)","<p>Shortcut for logging a WARN message\n"],["warn?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-warn-3F","()","<p>Will the logger output WARN messages?\n"]]}}