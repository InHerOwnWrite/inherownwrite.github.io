var search_data = {"index":{"searchIndex":["mercenary","command","option","presenter","program","action()","add_default_options()","alias()","command()","command_header()","command_options_presentation()","command_presentation()","default_command()","eql?()","execute()","for_option_parser()","formatted_switches()","full_name()","go()","go()","has_command?()","hash()","ident()","identity()","logger()","method_missing()","names_and_aliases()","new()","new()","new()","new()","option()","options_presentation()","parent_command_options_presentation()","process_options()","program()","subcommands_presentation()","summarize()","switches()","to_s()","to_s()","usage_presentation()","version()"],"longSearchIndex":["mercenary","mercenary::command","mercenary::option","mercenary::presenter","mercenary::program","mercenary::command#action()","mercenary::command#add_default_options()","mercenary::command#alias()","mercenary::command#command()","mercenary::presenter#command_header()","mercenary::presenter#command_options_presentation()","mercenary::presenter#command_presentation()","mercenary::command#default_command()","mercenary::option#eql?()","mercenary::command#execute()","mercenary::option#for_option_parser()","mercenary::option#formatted_switches()","mercenary::command#full_name()","mercenary::command#go()","mercenary::program#go()","mercenary::command#has_command?()","mercenary::option#hash()","mercenary::command#ident()","mercenary::command#identity()","mercenary::command#logger()","mercenary::presenter#method_missing()","mercenary::command#names_and_aliases()","mercenary::command::new()","mercenary::option::new()","mercenary::presenter::new()","mercenary::program::new()","mercenary::command#option()","mercenary::presenter#options_presentation()","mercenary::presenter#parent_command_options_presentation()","mercenary::command#process_options()","mercenary::program()","mercenary::presenter#subcommands_presentation()","mercenary::command#summarize()","mercenary::option#switches()","mercenary::command#to_s()","mercenary::option#to_s()","mercenary::presenter#usage_presentation()","mercenary::command#version()"],"info":[["Mercenary","","Mercenary.html","",""],["Mercenary::Command","","Mercenary/Command.html","",""],["Mercenary::Option","","Mercenary/Option.html","",""],["Mercenary::Presenter","","Mercenary/Presenter.html","",""],["Mercenary::Program","","Mercenary/Program.html","",""],["action","Mercenary::Command","Mercenary/Command.html#method-i-action","(&block)","<p>Public: Add an action Proc to be executed at runtime\n<p>block - the Proc to be executed at runtime\n<p>Returns …\n"],["add_default_options","Mercenary::Command","Mercenary/Command.html#method-i-add_default_options","(opts)","<p>Public: Add version and help options to the command\n<p>opts - instance of OptionParser\n<p>Returns nothing\n"],["alias","Mercenary::Command","Mercenary/Command.html#method-i-alias","(cmd_name)","<p>Public: Add an alias for this command&#39;s name to be attached to the parent\n<p>cmd_name - the name of the …\n"],["command","Mercenary::Command","Mercenary/Command.html#method-i-command","(cmd_name)","<p>Public: Adds a subcommand\n<p>cmd_name - the name of the command block    - a block accepting the new instance …\n"],["command_header","Mercenary::Presenter","Mercenary/Presenter.html#method-i-command_header","()","<p>Public: Builds the command header, including the command identity and description\n<p>Returns the command …\n"],["command_options_presentation","Mercenary::Presenter","Mercenary/Presenter.html#method-i-command_options_presentation","()",""],["command_presentation","Mercenary::Presenter","Mercenary/Presenter.html#method-i-command_presentation","()","<p>Public: Builds a string representation of the whole command\n<p>Returns the string representation of the whole …\n"],["default_command","Mercenary::Command","Mercenary/Command.html#method-i-default_command","(command_name = nil)","<p>Public: Sets the default command\n<p>command_name - the command name to be executed in the event no args are …\n"],["eql?","Mercenary::Option","Mercenary/Option.html#method-i-eql-3F","(other)","<p>Public: Check equivalence of two Options based on equivalence of their\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">instance</span> <span class=\"ruby-identifier\">variables</span>\n</pre>\n<p>Returns true …\n"],["execute","Mercenary::Command","Mercenary/Command.html#method-i-execute","(argv = [], config = {})","<p>Public: Execute all actions given the inputted args and options\n<p>argv - (optional) command-line args (sans …\n"],["for_option_parser","Mercenary::Option","Mercenary/Option.html#method-i-for_option_parser","()","<p>Public: Fetch the array containing the info OptionParser is interested in\n<p>Returns the array which OptionParser#on …\n"],["formatted_switches","Mercenary::Option","Mercenary/Option.html#method-i-formatted_switches","()","<p>Public: Build a beautifully-formatted string representation of the switches\n<p>Returns a formatted string …\n"],["full_name","Mercenary::Command","Mercenary/Command.html#method-i-full_name","()","<p>Public: Get the name of the current command plus that of\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">its</span> <span class=\"ruby-identifier\">parent</span> <span class=\"ruby-identifier\">commands</span>\n</pre>\n<p>Returns the full name of the …\n"],["go","Mercenary::Command","Mercenary/Command.html#method-i-go","(argv, opts, config)","<p>Public: Run the command\n<p>argv   - an array of string args opts   - the instance of OptionParser config …\n"],["go","Mercenary::Program","Mercenary/Program.html#method-i-go","(argv)","<p>Public: Run the program\n<p>argv - an array of string args (usually ARGV)\n<p>Returns nothing\n"],["has_command?","Mercenary::Command","Mercenary/Command.html#method-i-has_command-3F","(sub_command)","<p>Public: Check if this command has a subcommand\n<p>sub_command - the name of the subcommand\n<p>Returns true if …\n"],["hash","Mercenary::Option","Mercenary/Option.html#method-i-hash","()","<p>Public: Hash based on the hash value of instance variables\n<p>Returns a Fixnum which is unique to this Option …\n"],["ident","Mercenary::Command","Mercenary/Command.html#method-i-ident","()","<p>Public: Identify this command\n<p>Returns a string which identifies this command\n"],["identity","Mercenary::Command","Mercenary/Command.html#method-i-identity","()","<p>Public: Get the full identity (name &amp; version) of this command\n<p>Returns a string containing the name …\n"],["logger","Mercenary::Command","Mercenary/Command.html#method-i-logger","(level = nil)","<p>Public: Fetch a Logger (stdlib)\n<p>level - the logger level (a Logger constant, see docs for more info)\n<p>Returns …\n"],["method_missing","Mercenary::Presenter","Mercenary/Presenter.html#method-i-method_missing","(meth, *args, &block)","<p>Public: Turn a print_* into a *_presentation or freak out\n<p>meth  - the method being called args  - an array …\n"],["names_and_aliases","Mercenary::Command","Mercenary/Command.html#method-i-names_and_aliases","()","<p>Public: Return all the names and aliases for this command.\n<p>Returns a comma-separated String list of the …\n"],["new","Mercenary::Command","Mercenary/Command.html#method-c-new","(name, parent = nil)","<p>Public: Creates a new Command\n<p>name - the name of the command parent - (optional) the instancce of Mercenary::Command …\n"],["new","Mercenary::Option","Mercenary/Option.html#method-c-new","(config_key, info)","<p>Public: Create a new Option\n<p>config_key - the key in the config hash to which the value of this option …\n"],["new","Mercenary::Presenter","Mercenary/Presenter.html#method-c-new","(command)","<p>Public: Make a new Presenter\n<p>command - a Mercenary::Command to present\n<p>Returns nothing\n"],["new","Mercenary::Program","Mercenary/Program.html#method-c-new","(name)","<p>Public: Creates a new Program\n<p>name - the name of the program\n<p>Returns nothing\n"],["option","Mercenary::Command","Mercenary/Command.html#method-i-option","(sym, *options)","<p>Public: Adds an option switch\n<p>sym - the variable key which is used to identify the value of the switch …\n"],["options_presentation","Mercenary::Presenter","Mercenary/Presenter.html#method-i-options_presentation","()","<p>Public: Builds a string representation of the options\n<p>Returns the string representation of the options …\n"],["parent_command_options_presentation","Mercenary::Presenter","Mercenary/Presenter.html#method-i-parent_command_options_presentation","()","<p>Public: Builds a string representation of the options for parent commands\n<p>Returns the string representation …\n"],["process_options","Mercenary::Command","Mercenary/Command.html#method-i-process_options","(opts, config)","<p>Public: Add this command&#39;s options to OptionParser and set a default\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">action</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">setting</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["program","Mercenary","Mercenary.html#method-c-program","(name)","<p>Public: Instantiate a new program and execute.\n<p>name - the name of your program\n<p>Returns nothing.\n"],["subcommands_presentation","Mercenary::Presenter","Mercenary/Presenter.html#method-i-subcommands_presentation","()","<p>Public: Builds a string representation of the subcommands\n<p>Returns the string representation of the subcommands …\n"],["summarize","Mercenary::Command","Mercenary/Command.html#method-i-summarize","()","<p>Public: Build a string containing a summary of the command\n<p>Returns a one-line summary of the command. …\n"],["switches","Mercenary::Option","Mercenary/Option.html#method-i-switches","()","<p>Public: Fetch an array of switches, including the short and long versions\n<p>Returns an array of two strings. …\n"],["to_s","Mercenary::Command","Mercenary/Command.html#method-i-to_s","()","<p>Public: Build a string containing the command name, options and any subcommands\n<p>Returns the string identifying …\n"],["to_s","Mercenary::Option","Mercenary/Option.html#method-i-to_s","()","<p>Public: Build a string representation of this option including the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">switches</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-identifier\">description</span>\n</pre>\n<p>Returns a string …\n"],["usage_presentation","Mercenary::Presenter","Mercenary/Presenter.html#method-i-usage_presentation","()","<p>Public: Builds a string representation of the command usage\n<p>Returns the string representation of the command …\n"],["version","Mercenary::Command","Mercenary/Command.html#method-i-version","(version = nil)","<p>Public: Sets or gets the command version\n<p>version - the command version (optional)\n<p>Returns the version and …\n"]]}}