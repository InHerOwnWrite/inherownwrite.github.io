var search_data = {"index":{"searchIndex":["powerassert","blockcontext","configuration","context","empty","formatter","inspectedvalue","parser","branch","dummyparser","safeinspectable","tracecontext","!()","==()","_colorize_message=()","_fixed?()","_trace_alias_method=()","_use_pp=()","app_caller_locations()","app_context?()","build_assertion_message()","call_paths()","call_paths()","clear_global_method_cache()","collect_paths()","column2display_offset()","configuration()","configure()","detect_path()","disable()","enable()","enabled?()","encoding_safe_rstrip()","enum_count_by()","extract_idents()","find_all_identified_calls()","fired?()","fixed?()","handle_columnless_ident()","idents()","idents()","inspect()","inspect()","inspect()","internal_file?()","invoke_yield()","lazy_inspection=()","lib_dir()","message()","message_proc()","method_id_set()","new()","new()","new()","new()","new()","new()","new()","new()","setup_internal_lib_dir()","slice_expression()","start()","str_indices()","trace()","uniq_calls()","valid_syntax?()","yield()","readme"],"longSearchIndex":["powerassert","powerassert::blockcontext","powerassert::configuration","powerassert::context","powerassert::empty","powerassert::formatter","powerassert::inspectedvalue","powerassert::parser","powerassert::parser::branch","powerassert::parser::dummyparser","powerassert::safeinspectable","powerassert::tracecontext","powerassert#!()","powerassert#==()","powerassert::configuration#_colorize_message=()","powerassert#_fixed?()","powerassert::configuration#_trace_alias_method=()","powerassert::configuration#_use_pp=()","powerassert::app_caller_locations()","powerassert::app_context?()","powerassert::context#build_assertion_message()","powerassert::parser#call_paths()","powerassert::parser::dummyparser#call_paths()","powerassert::clear_global_method_cache()","powerassert::parser#collect_paths()","powerassert::context#column2display_offset()","powerassert::configuration()","powerassert::configure()","powerassert::context#detect_path()","powerassert::tracecontext#disable()","powerassert::tracecontext#enable()","powerassert::tracecontext#enabled?()","powerassert::context#encoding_safe_rstrip()","powerassert::context#enum_count_by()","powerassert::parser#extract_idents()","powerassert::context#find_all_identified_calls()","powerassert::context#fired?()","powerassert#fixed?()","powerassert::parser#handle_columnless_ident()","powerassert::parser#idents()","powerassert::parser::dummyparser#idents()","powerassert::formatter#inspect()","powerassert::inspectedvalue#inspect()","powerassert::safeinspectable#inspect()","powerassert::internal_file?()","powerassert::blockcontext#invoke_yield()","powerassert::configuration#lazy_inspection=()","powerassert::lib_dir()","powerassert::context#message()","powerassert::context#message_proc()","powerassert::parser#method_id_set()","powerassert::blockcontext::new()","powerassert::context::new()","powerassert::formatter::new()","powerassert::inspectedvalue::new()","powerassert::parser::new()","powerassert::parser::dummyparser::new()","powerassert::safeinspectable::new()","powerassert::tracecontext::new()","powerassert::setup_internal_lib_dir()","powerassert::parser#slice_expression()","powerassert::start()","powerassert::parser#str_indices()","powerassert::trace()","powerassert::context#uniq_calls()","powerassert::parser#valid_syntax?()","powerassert::blockcontext#yield()",""],"info":[["PowerAssert","","PowerAssert.html","",""],["PowerAssert::BlockContext","","PowerAssert/BlockContext.html","",""],["PowerAssert::Configuration","","PowerAssert/Configuration.html","",""],["PowerAssert::Context","","PowerAssert/Context.html","",""],["PowerAssert::Empty","","PowerAssert/Empty.html","",""],["PowerAssert::Formatter","","PowerAssert/Formatter.html","",""],["PowerAssert::InspectedValue","","PowerAssert/InspectedValue.html","",""],["PowerAssert::Parser","","PowerAssert/Parser.html","",""],["PowerAssert::Parser::Branch","","PowerAssert/Parser/Branch.html","",""],["PowerAssert::Parser::DummyParser","","PowerAssert/Parser/DummyParser.html","",""],["PowerAssert::SafeInspectable","","PowerAssert/SafeInspectable.html","",""],["PowerAssert::TraceContext","","PowerAssert/TraceContext.html","",""],["!","PowerAssert","PowerAssert.html#method-i-21","()",""],["==","PowerAssert","PowerAssert.html#method-i-3D-3D","()",""],["_colorize_message=","PowerAssert::Configuration","PowerAssert/Configuration.html#method-i-_colorize_message-3D","(bool)",""],["_fixed?","PowerAssert","PowerAssert.html#method-i-_fixed-3F","()",""],["_trace_alias_method=","PowerAssert::Configuration","PowerAssert/Configuration.html#method-i-_trace_alias_method-3D","(bool)",""],["_use_pp=","PowerAssert::Configuration","PowerAssert/Configuration.html#method-i-_use_pp-3D","(bool)",""],["app_caller_locations","PowerAssert","PowerAssert.html#method-c-app_caller_locations","()",""],["app_context?","PowerAssert","PowerAssert.html#method-c-app_context-3F","()",""],["build_assertion_message","PowerAssert::Context","PowerAssert/Context.html#method-i-build_assertion_message","(parser, return_values)",""],["call_paths","PowerAssert::Parser","PowerAssert/Parser.html#method-i-call_paths","()",""],["call_paths","PowerAssert::Parser::DummyParser","PowerAssert/Parser/DummyParser.html#method-i-call_paths","()",""],["clear_global_method_cache","PowerAssert","PowerAssert.html#method-c-clear_global_method_cache","()",""],["collect_paths","PowerAssert::Parser","PowerAssert/Parser.html#method-i-collect_paths","(idents, prefixes = [[]], index = 0)",""],["column2display_offset","PowerAssert::Context","PowerAssert/Context.html#method-i-column2display_offset","(str)",""],["configuration","PowerAssert","PowerAssert.html#method-c-configuration","()",""],["configure","PowerAssert","PowerAssert.html#method-c-configure","()",""],["detect_path","PowerAssert::Context","PowerAssert/Context.html#method-i-detect_path","(parser, return_values)",""],["disable","PowerAssert::TraceContext","PowerAssert/TraceContext.html#method-i-disable","()",""],["enable","PowerAssert::TraceContext","PowerAssert/TraceContext.html#method-i-enable","()",""],["enabled?","PowerAssert::TraceContext","PowerAssert/TraceContext.html#method-i-enabled-3F","()",""],["encoding_safe_rstrip","PowerAssert::Context","PowerAssert/Context.html#method-i-encoding_safe_rstrip","(str)",""],["enum_count_by","PowerAssert::Context","PowerAssert/Context.html#method-i-enum_count_by","(enum, &blk)",""],["extract_idents","PowerAssert::Parser","PowerAssert/Parser.html#method-i-extract_idents","(sexp)","<p>Returns idents as graph structure.\n\n<pre class=\"ruby\">                                                <span class=\"ruby-operator\">+</span><span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">c</span><span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">b</span><span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">+</span>\n<span class=\"ruby-identifier\">extract_idents</span>(<span class=\"ruby-constant\">Ripper</span>.<span class=\"ruby-identifier\">sexp</span>(<span class=\"ruby-string\">&#39;a&amp;.b(c).d&#39;</span>)) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["find_all_identified_calls","PowerAssert::Context","PowerAssert/Context.html#method-i-find_all_identified_calls","(return_values, path)",""],["fired?","PowerAssert::Context","PowerAssert/Context.html#method-i-fired-3F","()",""],["fixed?","PowerAssert","PowerAssert.html#method-i-fixed-3F","()",""],["handle_columnless_ident","PowerAssert::Parser","PowerAssert/Parser.html#method-i-handle_columnless_ident","(left_idents, mid, right_idents, with_safe_op = false)",""],["idents","PowerAssert::Parser","PowerAssert/Parser.html#method-i-idents","()",""],["idents","PowerAssert::Parser::DummyParser","PowerAssert/Parser/DummyParser.html#method-i-idents","()",""],["inspect","PowerAssert::Formatter","PowerAssert/Formatter.html#method-i-inspect","()",""],["inspect","PowerAssert::InspectedValue","PowerAssert/InspectedValue.html#method-i-inspect","()",""],["inspect","PowerAssert::SafeInspectable","PowerAssert/SafeInspectable.html#method-i-inspect","()",""],["internal_file?","PowerAssert","PowerAssert.html#method-c-internal_file-3F","(file)",""],["invoke_yield","PowerAssert::BlockContext","PowerAssert/BlockContext.html#method-i-invoke_yield","()",""],["lazy_inspection=","PowerAssert::Configuration","PowerAssert/Configuration.html#method-i-lazy_inspection-3D","(bool)",""],["lib_dir","PowerAssert","PowerAssert.html#method-c-lib_dir","(obj, mid, depth)",""],["message","PowerAssert::Context","PowerAssert/Context.html#method-i-message","()",""],["message_proc","PowerAssert::Context","PowerAssert/Context.html#method-i-message_proc","()",""],["method_id_set","PowerAssert::Parser","PowerAssert/Parser.html#method-i-method_id_set","()",""],["new","PowerAssert::BlockContext","PowerAssert/BlockContext.html#method-c-new","(assertion_proc_or_source, assertion_method, source_binding)",""],["new","PowerAssert::Context","PowerAssert/Context.html#method-c-new","(base_caller_length)",""],["new","PowerAssert::Formatter","PowerAssert/Formatter.html#method-c-new","(value, indent)",""],["new","PowerAssert::InspectedValue","PowerAssert/InspectedValue.html#method-c-new","(value)",""],["new","PowerAssert::Parser","PowerAssert/Parser.html#method-c-new","(line, path, lineno, binding, assertion_method_name = nil, assertion_proc = nil)",""],["new","PowerAssert::Parser::DummyParser","PowerAssert/Parser/DummyParser.html#method-c-new","()",""],["new","PowerAssert::SafeInspectable","PowerAssert/SafeInspectable.html#method-c-new","(value)",""],["new","PowerAssert::TraceContext","PowerAssert/TraceContext.html#method-c-new","(binding)",""],["setup_internal_lib_dir","PowerAssert","PowerAssert.html#method-c-setup_internal_lib_dir","(lib, mid, depth, lib_obj = lib)",""],["slice_expression","PowerAssert::Parser","PowerAssert/Parser.html#method-i-slice_expression","(str)",""],["start","PowerAssert","PowerAssert.html#method-c-start","(assertion_proc_or_source, assertion_method: nil, source_binding: TOPLEVEL_BINDING)",""],["str_indices","PowerAssert::Parser","PowerAssert/Parser.html#method-i-str_indices","(str, re, offset, limit)",""],["trace","PowerAssert","PowerAssert.html#method-c-trace","(frame)",""],["uniq_calls","PowerAssert::Context","PowerAssert/Context.html#method-i-uniq_calls","(paths)",""],["valid_syntax?","PowerAssert::Parser","PowerAssert/Parser.html#method-i-valid_syntax-3F","(str)",""],["yield","PowerAssert::BlockContext","PowerAssert/BlockContext.html#method-i-yield","()",""],["README","","README_rdoc.html","","<p>power_assert\n<p>About\n<p>Power Assert for Ruby.\n"]]}}