var search_data = {"index":{"searchIndex":["didyoumean","(nameerrorcheckers","classnamechecker","classname","correctelement","correctable","experimental","initializernamecorrection","ivarnamechecker","ivarnamecheckerbuilder","jaro","jarowinkler","keyerrorchecker","levenshtein","methodnamechecker","nullchecker","parsedimensions","plainformatter","spellchecker","treespellchecker","variablenamechecker","verboseformatter","call()","call()","class_names()","correct()","correct()","correct_error()","corrections()","corrections()","corrections()","corrections()","corrections()","corrections()","distance()","distance()","exact_matches()","find_elements()","find_ideas()","find_leaves()","find_suggestions()","formatter()","formatter=()","full_name()","ideas_to_paths()","message_for()","message_for()","method_added()","method_names()","names_to_exclude()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_idea()","normalize()","original_message()","parse_dimensions()","plausible_dimensions()","possible_paths()","remove_leaves()","scopes()","spell_checker()","to_s()"],"longSearchIndex":["didyoumean","didyoumean::(nameerrorcheckers","didyoumean::classnamechecker","didyoumean::classnamechecker::classname","didyoumean::correctelement","didyoumean::correctable","didyoumean::experimental","didyoumean::experimental::initializernamecorrection","didyoumean::experimental::ivarnamechecker","didyoumean::experimental::ivarnamecheckerbuilder","didyoumean::jaro","didyoumean::jarowinkler","didyoumean::keyerrorchecker","didyoumean::levenshtein","didyoumean::methodnamechecker","didyoumean::nullchecker","didyoumean::parsedimensions","didyoumean::plainformatter","didyoumean::spellchecker","didyoumean::treespellchecker","didyoumean::variablenamechecker","didyoumean::verboseformatter","didyoumean::correctelement#call()","didyoumean::parsedimensions#call()","didyoumean::classnamechecker#class_names()","didyoumean::spellchecker#correct()","didyoumean::treespellchecker#correct()","didyoumean::correct_error()","didyoumean::classnamechecker#corrections()","didyoumean::correctable#corrections()","didyoumean::keyerrorchecker#corrections()","didyoumean::methodnamechecker#corrections()","didyoumean::nullchecker#corrections()","didyoumean::variablenamechecker#corrections()","didyoumean::jaro#distance()","didyoumean::jarowinkler#distance()","didyoumean::keyerrorchecker#exact_matches()","didyoumean::parsedimensions#find_elements()","didyoumean::treespellchecker#find_ideas()","didyoumean::treespellchecker#find_leaves()","didyoumean::treespellchecker#find_suggestions()","didyoumean::formatter()","didyoumean::formatter=()","didyoumean::classnamechecker::classname#full_name()","didyoumean::treespellchecker#ideas_to_paths()","didyoumean::plainformatter#message_for()","didyoumean::verboseformatter#message_for()","didyoumean::experimental::initializernamecorrection#method_added()","didyoumean::methodnamechecker#method_names()","didyoumean::methodnamechecker#names_to_exclude()","didyoumean::classnamechecker::new()","didyoumean::classnamechecker::classname::new()","didyoumean::correctelement::new()","didyoumean::keyerrorchecker::new()","didyoumean::methodnamechecker::new()","didyoumean::nullchecker::new()","didyoumean::parsedimensions::new()","didyoumean::spellchecker::new()","didyoumean::treespellchecker::new()","didyoumean::variablenamechecker::new()","didyoumean::treespellchecker#no_idea()","didyoumean::correctelement#normalize()","didyoumean::correctable#original_message()","didyoumean::treespellchecker#parse_dimensions()","didyoumean::treespellchecker#plausible_dimensions()","didyoumean::treespellchecker#possible_paths()","didyoumean::parsedimensions#remove_leaves()","didyoumean::classnamechecker#scopes()","didyoumean::correctable#spell_checker()","didyoumean::correctable#to_s()"],"info":[["DidYouMean","","DidYouMean.html","","<p>The <code>DidYouMean</code> gem adds functionality to suggest possible method/class names upon errors such as <code>NameError</code> …\n"],["DidYouMean::(NameErrorCheckers","","DidYouMean/(NameErrorCheckers.html","",""],["DidYouMean::ClassNameChecker","","DidYouMean/ClassNameChecker.html","",""],["DidYouMean::ClassNameChecker::ClassName","","DidYouMean/ClassNameChecker/ClassName.html","",""],["DidYouMean::CorrectElement","","DidYouMean/CorrectElement.html","","<p>identifies the elements close to element\n"],["DidYouMean::Correctable","","DidYouMean/Correctable.html","",""],["DidYouMean::Experimental","","DidYouMean/Experimental.html","",""],["DidYouMean::Experimental::InitializerNameCorrection","","DidYouMean/Experimental/InitializerNameCorrection.html","",""],["DidYouMean::Experimental::IvarNameChecker","","DidYouMean/Experimental/IvarNameChecker.html","",""],["DidYouMean::Experimental::IvarNameCheckerBuilder","","DidYouMean/Experimental/IvarNameCheckerBuilder.html","",""],["DidYouMean::Jaro","","DidYouMean/Jaro.html","",""],["DidYouMean::JaroWinkler","","DidYouMean/JaroWinkler.html","",""],["DidYouMean::KeyErrorChecker","","DidYouMean/KeyErrorChecker.html","",""],["DidYouMean::Levenshtein","","DidYouMean/Levenshtein.html","",""],["DidYouMean::MethodNameChecker","","DidYouMean/MethodNameChecker.html","",""],["DidYouMean::NullChecker","","DidYouMean/NullChecker.html","",""],["DidYouMean::ParseDimensions","","DidYouMean/ParseDimensions.html","","<p>parses the elements in each dimension\n"],["DidYouMean::PlainFormatter","","DidYouMean/PlainFormatter.html","","<p>The <code>DidYouMean::PlainFormatter</code> is the basic, default formatter for the gem. The formatter responds to …\n"],["DidYouMean::SpellChecker","","DidYouMean/SpellChecker.html","",""],["DidYouMean::TreeSpellChecker","","DidYouMean/TreeSpellChecker.html","","<p>spell checker for a dictionary that has a tree structure, see doc/tree_spell_checker_api.md\n"],["DidYouMean::VariableNameChecker","","DidYouMean/VariableNameChecker.html","",""],["DidYouMean::VerboseFormatter","","DidYouMean/VerboseFormatter.html","","<p>The <code>DidYouMean::VerboseFormatter</code> uses extra empty lines to make the suggestion stand out more in the …\n"],["call","DidYouMean::CorrectElement","DidYouMean/CorrectElement.html#method-i-call","(names, element)",""],["call","DidYouMean::ParseDimensions","DidYouMean/ParseDimensions.html#method-i-call","()",""],["class_names","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-i-class_names","()",""],["correct","DidYouMean::SpellChecker","DidYouMean/SpellChecker.html#method-i-correct","(input)",""],["correct","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-correct","(input)",""],["correct_error","DidYouMean","DidYouMean.html#method-c-correct_error","(error_class, spell_checker)","<p>Adds <code>DidYouMean</code> functionality to an error using a given spell checker\n"],["corrections","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-corrections","()",""],["corrections","DidYouMean::KeyErrorChecker","DidYouMean/KeyErrorChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::NullChecker","DidYouMean/NullChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::VariableNameChecker","DidYouMean/VariableNameChecker.html#method-i-corrections","()",""],["distance","DidYouMean::Jaro","DidYouMean/Jaro.html#method-i-distance","(str1, str2)",""],["distance","DidYouMean::JaroWinkler","DidYouMean/JaroWinkler.html#method-i-distance","(str1, str2)",""],["exact_matches","DidYouMean::KeyErrorChecker","DidYouMean/KeyErrorChecker.html#method-i-exact_matches","()",""],["find_elements","DidYouMean::ParseDimensions","DidYouMean/ParseDimensions.html#method-i-find_elements","(leafless)",""],["find_ideas","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-find_ideas","(paths, leaf)",""],["find_leaves","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-find_leaves","(path)",""],["find_suggestions","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-find_suggestions","(input, plausibles)",""],["formatter","DidYouMean","DidYouMean.html#method-c-formatter","()","<p>Returns the currenctly set formatter. By default, it is set to <code>DidYouMean::Formatter</code>.\n"],["formatter=","DidYouMean","DidYouMean.html#method-c-formatter-3D","(formatter)","<p>Updates the primary formatter used to format the suggestions.\n"],["full_name","DidYouMean::ClassNameChecker::ClassName","DidYouMean/ClassNameChecker/ClassName.html#method-i-full_name","()",""],["ideas_to_paths","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-ideas_to_paths","(ideas, leaf, names, path)",""],["message_for","DidYouMean::PlainFormatter","DidYouMean/PlainFormatter.html#method-i-message_for","(corrections)","<p>Returns a human readable string that contains <code>corrections</code>. This formatter is designed to be less verbose …\n"],["message_for","DidYouMean::VerboseFormatter","DidYouMean/VerboseFormatter.html#method-i-message_for","(corrections)","<p>Returns a human readable string that contains <code>corrections</code>. This formatter is designed to be less verbose …\n"],["method_added","DidYouMean::Experimental::InitializerNameCorrection","DidYouMean/Experimental/InitializerNameCorrection.html#method-i-method_added","(name)",""],["method_names","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-i-method_names","()",""],["names_to_exclude","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-i-names_to_exclude","()",""],["new","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-c-new","(exception)",""],["new","DidYouMean::ClassNameChecker::ClassName","DidYouMean/ClassNameChecker/ClassName.html#method-c-new","(name, namespace = '')",""],["new","DidYouMean::CorrectElement","DidYouMean/CorrectElement.html#method-c-new","()",""],["new","DidYouMean::KeyErrorChecker","DidYouMean/KeyErrorChecker.html#method-c-new","(key_error)",""],["new","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-c-new","(exception)",""],["new","DidYouMean::NullChecker","DidYouMean/NullChecker.html#method-c-new","(*)",""],["new","DidYouMean::ParseDimensions","DidYouMean/ParseDimensions.html#method-c-new","(dictionary, separator)",""],["new","DidYouMean::SpellChecker","DidYouMean/SpellChecker.html#method-c-new","(dictionary:)",""],["new","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-c-new","(dictionary:, separator: '/', augment: nil)",""],["new","DidYouMean::VariableNameChecker","DidYouMean/VariableNameChecker.html#method-c-new","(exception)",""],["no_idea","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-no_idea","(input)",""],["normalize","DidYouMean::CorrectElement","DidYouMean/CorrectElement.html#method-i-normalize","(leaf)",""],["original_message","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-original_message","()",""],["parse_dimensions","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-parse_dimensions","()",""],["plausible_dimensions","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-plausible_dimensions","(input)",""],["possible_paths","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-possible_paths","(states)",""],["remove_leaves","DidYouMean::ParseDimensions","DidYouMean/ParseDimensions.html#method-i-remove_leaves","()",""],["scopes","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-i-scopes","()",""],["spell_checker","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-spell_checker","()",""],["to_s","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-to_s","()",""]]}}