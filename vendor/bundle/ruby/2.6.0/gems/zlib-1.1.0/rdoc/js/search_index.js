var search_data = {"index":{"searchIndex":["object","zlib","buferror","dataerror","deflate","error","gzipfile","crcerror","error","lengtherror","nofooter","gzipreader","gzipwriter","inflate","memerror","needdict","streamend","streamerror","versionerror","zstream","<<()","<<()","<<()","add_dictionary()","adler()","adler32()","adler32_combine()","avail_in()","avail_out()","avail_out=()","bytes()","close()","close()","closed?()","closed?()","comment()","comment=()","crc()","crc32()","crc32_combine()","crc_table()","data_type()","deflate()","deflate()","deflate()","each()","each_byte()","each_char()","each_line()","end()","ended?()","eof()","eof?()","external_encoding()","finish()","finish()","finished?()","flush()","flush()","flush_next_in()","flush_next_out()","getbyte()","getc()","gets()","gunzip()","gzip()","inflate()","inflate()","inflate()","initialize_copy()","inspect()","level()","lineno()","lineno=()","lines()","mtime()","mtime=()","new()","new()","new()","new()","open()","open()","orig_name()","orig_name=()","os_code()","params()","pos()","pos()","print()","printf()","putc()","puts()","read()","readbyte()","readchar()","readline()","readlines()","readpartial()","reset()","rewind()","set_dictionary()","set_dictionary()","stream_end?()","sync()","sync()","sync=()","sync_point?()","tell()","tell()","to_io()","total_in()","total_out()","ungetbyte()","ungetc()","unused()","wrap()","write()","zlib_version()","makefile"],"longSearchIndex":["object","zlib","zlib::buferror","zlib::dataerror","zlib::deflate","zlib::error","zlib::gzipfile","zlib::gzipfile::crcerror","zlib::gzipfile::error","zlib::gzipfile::lengtherror","zlib::gzipfile::nofooter","zlib::gzipreader","zlib::gzipwriter","zlib::inflate","zlib::memerror","zlib::needdict","zlib::streamend","zlib::streamerror","zlib::versionerror","zlib::zstream","zlib::deflate#<<()","zlib::gzipwriter#<<()","zlib::inflate#<<()","zlib::inflate#add_dictionary()","zlib::zstream#adler()","zlib::adler32()","zlib::adler32_combine()","zlib::zstream#avail_in()","zlib::zstream#avail_out()","zlib::zstream#avail_out=()","zlib::gzipreader#bytes()","zlib::gzipfile#close()","zlib::zstream#close()","zlib::gzipfile#closed?()","zlib::zstream#closed?()","zlib::gzipfile#comment()","zlib::gzipwriter#comment=()","zlib::gzipfile#crc()","zlib::crc32()","zlib::crc32_combine()","zlib::crc_table()","zlib::zstream#data_type()","zlib::deflate()","zlib::deflate::deflate()","zlib::deflate#deflate()","zlib::gzipreader#each()","zlib::gzipreader#each_byte()","zlib::gzipreader#each_char()","zlib::gzipreader#each_line()","zlib::zstream#end()","zlib::zstream#ended?()","zlib::gzipreader#eof()","zlib::gzipreader#eof?()","zlib::gzipreader#external_encoding()","zlib::gzipfile#finish()","zlib::zstream#finish()","zlib::zstream#finished?()","zlib::deflate#flush()","zlib::gzipwriter#flush()","zlib::zstream#flush_next_in()","zlib::zstream#flush_next_out()","zlib::gzipreader#getbyte()","zlib::gzipreader#getc()","zlib::gzipreader#gets()","zlib::gunzip()","zlib::gzip()","zlib::inflate()","zlib::inflate::inflate()","zlib::inflate#inflate()","zlib::deflate#initialize_copy()","zlib::gzipfile::error#inspect()","zlib::gzipfile#level()","zlib::gzipreader#lineno()","zlib::gzipreader#lineno=()","zlib::gzipreader#lines()","zlib::gzipfile#mtime()","zlib::gzipwriter#mtime=()","zlib::deflate::new()","zlib::gzipreader::new()","zlib::gzipwriter::new()","zlib::inflate::new()","zlib::gzipreader::open()","zlib::gzipwriter::open()","zlib::gzipfile#orig_name()","zlib::gzipwriter#orig_name=()","zlib::gzipfile#os_code()","zlib::deflate#params()","zlib::gzipreader#pos()","zlib::gzipwriter#pos()","zlib::gzipwriter#print()","zlib::gzipwriter#printf()","zlib::gzipwriter#putc()","zlib::gzipwriter#puts()","zlib::gzipreader#read()","zlib::gzipreader#readbyte()","zlib::gzipreader#readchar()","zlib::gzipreader#readline()","zlib::gzipreader#readlines()","zlib::gzipreader#readpartial()","zlib::zstream#reset()","zlib::gzipreader#rewind()","zlib::deflate#set_dictionary()","zlib::inflate#set_dictionary()","zlib::zstream#stream_end?()","zlib::gzipfile#sync()","zlib::inflate#sync()","zlib::gzipfile#sync=()","zlib::inflate#sync_point?()","zlib::gzipreader#tell()","zlib::gzipwriter#tell()","zlib::gzipfile#to_io()","zlib::zstream#total_in()","zlib::zstream#total_out()","zlib::gzipreader#ungetbyte()","zlib::gzipreader#ungetc()","zlib::gzipreader#unused()","zlib::gzipfile::wrap()","zlib::gzipwriter#write()","zlib::zlib_version()",""],"info":[["Object","","Object.html","",""],["Zlib","","Zlib.html","","<p>This module provides access to the zlib library. Zlib is designed to be a portable, free, general-purpose, …\n"],["Zlib::BufError","","Zlib/BufError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_BUF_ERROR.\n<p>Usually if no progress is possible.\n"],["Zlib::DataError","","Zlib/DataError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_DATA_ERROR.\n<p>Usually if a stream was prematurely freed.\n"],["Zlib::Deflate","","Zlib/Deflate.html","","<p>Zlib::Deflate is the class for compressing data.  See Zlib::ZStream for more information.\n"],["Zlib::Error","","Zlib/Error.html","","<p>The superclass for all exceptions raised by Ruby/zlib.\n<p>The following exceptions are defined as subclasses …\n"],["Zlib::GzipFile","","Zlib/GzipFile.html","","<p>Zlib::GzipFile is an abstract class for handling a gzip formatted compressed file. The operations are …\n"],["Zlib::GzipFile::CRCError","","Zlib/GzipFile/CRCError.html","","<p>Raised when the CRC checksum recorded in gzip file footer is not equivalent to the CRC checksum of the …\n"],["Zlib::GzipFile::Error","","Zlib/GzipFile/Error.html","","<p>Base class of errors that occur when processing GZIP files.\n"],["Zlib::GzipFile::LengthError","","Zlib/GzipFile/LengthError.html","","<p>Raised when the data length recorded in the gzip file footer is not equivalent to the length of the actual …\n"],["Zlib::GzipFile::NoFooter","","Zlib/GzipFile/NoFooter.html","","<p>Raised when gzip file footer is not found.\n"],["Zlib::GzipReader","","Zlib/GzipReader.html","","<p>Zlib::GzipReader is the class for reading a gzipped file.  GzipReader should be used as an IO, or -IO-like, …\n"],["Zlib::GzipWriter","","Zlib/GzipWriter.html","","<p>Zlib::GzipWriter is a class for writing gzipped files.  GzipWriter should be used with an instance of …\n"],["Zlib::Inflate","","Zlib/Inflate.html","","<p>Zlib:Inflate is the class for decompressing compressed data.  Unlike Zlib::Deflate, an instance of this …\n"],["Zlib::MemError","","Zlib/MemError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_MEM_ERROR, usually if there was not enough memory.\n"],["Zlib::NeedDict","","Zlib/NeedDict.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_NEED_DICT if a preset dictionary is needed at this point. …\n"],["Zlib::StreamEnd","","Zlib/StreamEnd.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_END is return if the end of the compressed data has …\n"],["Zlib::StreamError","","Zlib/StreamError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_ERROR, usually if the stream state was inconsistent. …\n"],["Zlib::VersionError","","Zlib/VersionError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_VERSION_ERROR, usually if the zlib library version is incompatible …\n"],["Zlib::ZStream","","Zlib/ZStream.html","","<p>Zlib::ZStream is the abstract class for the stream which handles the compressed data. The operations …\n"],["<<","Zlib::Deflate","Zlib/Deflate.html#method-i-3C-3C","(p1)","<p>Inputs <code>string</code> into the deflate stream just like Zlib::Deflate#deflate, but returns the Zlib::Deflate …\n"],["<<","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<<","Zlib::Inflate","Zlib/Inflate.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["add_dictionary","Zlib::Inflate","Zlib/Inflate.html#method-i-add_dictionary","(p1)","<p>Provide the inflate stream with a dictionary that may be required in the future.  Multiple dictionaries …\n"],["adler","Zlib::ZStream","Zlib/ZStream.html#method-i-adler","()","<p>Returns the adler-32 checksum.\n"],["adler32","Zlib","Zlib.html#method-c-adler32","(*args)","<p>Calculates Adler-32 checksum for <code>string</code>, and returns updated value of <code>adler</code>. If <code>string</code> is omitted, it …\n"],["adler32_combine","Zlib","Zlib.html#method-c-adler32_combine","(p1, p2, p3)","<p>Combine two Adler-32 check values in to one.  <code>alder1</code> is the first Adler-32 value, <code>adler2</code> is the second …\n"],["avail_in","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_in","()","<p>Returns bytes of data in the input buffer. Normally, returns 0.\n"],["avail_out","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_out","()","<p>Returns number of bytes of free spaces in output buffer.  Because the free space is allocated automatically, …\n"],["avail_out=","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_out-3D","(p1)","<p>Allocates <code>size</code> bytes of free space in the output buffer. If there are more than <code>size</code> bytes already in …\n"],["bytes","Zlib::GzipReader","Zlib/GzipReader.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["close","Zlib::GzipFile","Zlib/GzipFile.html#method-i-close","()","<p>Closes the GzipFile object. This method calls close method of the associated IO object. Returns the associated …\n"],["close","Zlib::ZStream","Zlib/ZStream.html#method-i-close","()","<p>Closes the stream. All operations on the closed stream will raise an exception.\n"],["closed?","Zlib::GzipFile","Zlib/GzipFile.html#method-i-closed-3F","()","<p>Same as IO#closed?\n"],["closed?","Zlib::ZStream","Zlib/ZStream.html#method-i-closed-3F","()","<p>Returns true if the stream is closed.\n"],["comment","Zlib::GzipFile","Zlib/GzipFile.html#method-i-comment","()","<p>Returns comments recorded in the gzip file header, or nil if the comments is not present.\n"],["comment=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-comment-3D","(p1)","<p>Specify the comment (<code>str</code>) in the gzip header.\n"],["crc","Zlib::GzipFile","Zlib/GzipFile.html#method-i-crc","()","<p>Returns CRC value of the uncompressed data.\n"],["crc32","Zlib","Zlib.html#method-c-crc32","(*args)","<p>Calculates CRC checksum for <code>string</code>, and returns updated value of <code>crc</code>. If <code>string</code> is omitted, it returns …\n"],["crc32_combine","Zlib","Zlib.html#method-c-crc32_combine","(p1, p2, p3)","<p>Combine two CRC-32 check values in to one.  <code>crc1</code> is the first CRC-32 value, <code>crc2</code> is the second CRC-32 …\n"],["crc_table","Zlib","Zlib.html#method-c-crc_table","()","<p>Returns the table for calculating CRC checksum as an array.\n"],["data_type","Zlib::ZStream","Zlib/ZStream.html#method-i-data_type","()","<p>Guesses the type of the data which have been inputed into the stream. The returned value is either <code>BINARY</code> …\n"],["deflate","Zlib","Zlib.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are Zlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","Zlib/Deflate.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are Zlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","Zlib/Deflate.html#method-i-deflate","(p1, p2 = v2)","<p>Inputs <code>string</code> into the deflate stream and returns the output from the stream.  On calling this method, …\n"],["each","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_byte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_byte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_char","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_char","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_line","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_line","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["end","Zlib::ZStream","Zlib/ZStream.html#method-i-end","()","<p>Closes the stream. All operations on the closed stream will raise an exception.\n"],["ended?","Zlib::ZStream","Zlib/ZStream.html#method-i-ended-3F","()","<p>Returns true if the stream is closed.\n"],["eof","Zlib::GzipReader","Zlib/GzipReader.html#method-i-eof","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has reached the end.\n"],["eof?","Zlib::GzipReader","Zlib/GzipReader.html#method-i-eof-3F","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has reached the end.\n"],["external_encoding","Zlib::GzipReader","Zlib/GzipReader.html#method-i-external_encoding","()","<p>See Zlib::GzipReader documentation for a description.\n"],["finish","Zlib::GzipFile","Zlib/GzipFile.html#method-i-finish","()","<p>Closes the GzipFile object. Unlike Zlib::GzipFile#close, this method never calls the close method of …\n"],["finish","Zlib::ZStream","Zlib/ZStream.html#method-i-finish","()","<p>Finishes the stream and flushes output buffer.  If a block is given each chunk is yielded to the block …\n"],["finished?","Zlib::ZStream","Zlib/ZStream.html#method-i-finished-3F","()","<p>Returns true if the stream is finished.\n"],["flush","Zlib::Deflate","Zlib/Deflate.html#method-i-flush","(p1 = v1)","<p>This method is equivalent to <code>deflate(&#39;&#39;, flush)</code>. This method is just provided to improve the …\n"],["flush","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-flush","(p1 = v1)","<p>Flushes all the internal buffers of the GzipWriter object.  The meaning of <code>flush</code> is same as in Zlib::Deflate#deflate …\n"],["flush_next_in","Zlib::ZStream","Zlib/ZStream.html#method-i-flush_next_in","()",""],["flush_next_out","Zlib::ZStream","Zlib/ZStream.html#method-i-flush_next_out","()","<p>Flushes output buffer and returns all data in that buffer.  If a block is given each chunk is yielded …\n"],["getbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-getbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc","Zlib::GzipReader","Zlib/GzipReader.html#method-i-getc","()","<p>See Zlib::GzipReader documentation for a description.\n"],["gets","Zlib::GzipReader","Zlib/GzipReader.html#method-i-gets","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["gunzip","Zlib","Zlib.html#method-c-gunzip","(p1)","<p>Decode the given gzipped <code>string</code>.\n<p>This method is almost equivalent to the following code:\n\n<pre>def gunzip(string) ...</pre>\n"],["gzip","Zlib","Zlib.html#method-c-gzip","(p1)","<p>Gzip the given <code>string</code>. Valid values of level are Zlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["inflate","Zlib","Zlib.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a preset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","Zlib/Inflate.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a preset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","Zlib/Inflate.html#method-i-inflate","(p1)","<p>Inputs <code>deflate_string</code> into the inflate stream and returns the output from the stream.  Calling this method, …\n"],["initialize_copy","Zlib::Deflate","Zlib/Deflate.html#method-i-initialize_copy","(p1)","<p>Duplicates the deflate stream.\n"],["inspect","Zlib::GzipFile::Error","Zlib/GzipFile/Error.html#method-i-inspect","()","<p>Constructs a String of the GzipFile Error\n"],["level","Zlib::GzipFile","Zlib/GzipFile.html#method-i-level","()","<p>Returns compression level.\n"],["lineno","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lineno","()","<p>The line number of the last row read from this file.\n"],["lineno=","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lineno-3D","(p1)","<p>Specify line number of the last row read from this file.\n"],["lines","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["mtime","Zlib::GzipFile","Zlib/GzipFile.html#method-i-mtime","()","<p>Returns last modification time recorded in the gzip file header.\n"],["mtime=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-mtime-3D","(p1)","<p>Specify the modification time (<code>mtime</code>) in the gzip header. Using an Integer.\n<p>Setting the mtime in the gzip …\n"],["new","Zlib::Deflate","Zlib/Deflate.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new deflate stream for compression. If a given argument is nil, the default value of that argument …\n"],["new","Zlib::GzipReader","Zlib/GzipReader.html#method-c-new","(p1, p2 = {})","<p>Creates a GzipReader object associated with <code>io</code>. The GzipReader object reads gzipped data from <code>io</code>, and …\n"],["new","Zlib::GzipWriter","Zlib/GzipWriter.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a GzipWriter object associated with <code>io</code>. <code>level</code> and <code>strategy</code> should be the same as the arguments …\n"],["new","Zlib::Inflate","Zlib/Inflate.html#method-c-new","(p1 = v1)","<p>Creates a new inflate stream for decompression.  <code>window_bits</code> sets the size of the history buffer and …\n"],["open","Zlib::GzipReader","Zlib/GzipReader.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> as a gzipped file, and returns a GzipReader object associated with …\n"],["open","Zlib::GzipWriter","Zlib/GzipWriter.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> for writing gzip compressed data, and returns a GzipWriter object …\n"],["orig_name","Zlib::GzipFile","Zlib/GzipFile.html#method-i-orig_name","()","<p>Returns original filename recorded in the gzip file header, or <code>nil</code> if original filename is not present. …\n"],["orig_name=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-orig_name-3D","(p1)","<p>Specify the original name (<code>str</code>) in the gzip header.\n"],["os_code","Zlib::GzipFile","Zlib/GzipFile.html#method-i-os_code","()","<p>Returns OS code number recorded in the gzip file header.\n"],["params","Zlib::Deflate","Zlib/Deflate.html#method-i-params","(p1, p2)","<p>Changes the parameters of the deflate stream to allow changes between different types of data that require …\n"],["pos","Zlib::GzipReader","Zlib/GzipReader.html#method-i-pos","()","<p>Total number of output bytes output so far.\n"],["pos","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-pos","()","<p>Total number of input bytes read so far.\n"],["print","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-print","(*args)","<p>Same as IO.\n"],["printf","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-printf","(*args)","<p>Same as IO.\n"],["putc","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-putc","(p1)","<p>Same as IO.\n"],["puts","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-puts","(*args)","<p>Same as IO.\n"],["read","Zlib::GzipReader","Zlib/GzipReader.html#method-i-read","(p1 = v1)","<p>See Zlib::GzipReader documentation for a description.\n"],["readbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readchar","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readchar","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readline","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readline","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlines","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readlines","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readpartial","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readpartial","(p1, p2 = v2)","<p>Reads at most <em>maxlen</em> bytes from the gziped stream but it blocks only if <em>gzipreader</em> has no data immediately …\n"],["reset","Zlib::ZStream","Zlib/ZStream.html#method-i-reset","()","<p>Resets and initializes the stream. All data in both input and output buffer are discarded.\n"],["rewind","Zlib::GzipReader","Zlib/GzipReader.html#method-i-rewind","()","<p>Resets the position of the file pointer to the point created the GzipReader object.  The associated  …\n"],["set_dictionary","Zlib::Deflate","Zlib/Deflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>. This method is available just only after Zlib::Deflate.new …\n"],["set_dictionary","Zlib::Inflate","Zlib/Inflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>.  This method is available just only after a Zlib::NeedDict …\n"],["stream_end?","Zlib::ZStream","Zlib/ZStream.html#method-i-stream_end-3F","()","<p>Returns true if the stream is finished.\n"],["sync","Zlib::GzipFile","Zlib/GzipFile.html#method-i-sync","()","<p>Same as IO#sync\n"],["sync","Zlib::Inflate","Zlib/Inflate.html#method-i-sync","(p1)","<p>Inputs <code>string</code> into the end of input buffer and skips data until a full flush point can be found.  If …\n"],["sync=","Zlib::GzipFile","Zlib/GzipFile.html#method-i-sync-3D","(p1)","<p>Same as IO.  If flag is <code>true</code>, the associated IO object must respond to the <code>flush</code> method.  While <code>sync</code> …\n"],["sync_point?","Zlib::Inflate","Zlib/Inflate.html#method-i-sync_point-3F","()","<p>Quoted verbatim from original documentation:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">What</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">this?</span>\n</pre>\n<p><code>:)</code>\n"],["tell","Zlib::GzipReader","Zlib/GzipReader.html#method-i-tell","()","<p>Total number of output bytes output so far.\n"],["tell","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-tell","()","<p>Total number of input bytes read so far.\n"],["to_io","Zlib::GzipFile","Zlib/GzipFile.html#method-i-to_io","()","<p>Same as IO.\n"],["total_in","Zlib::ZStream","Zlib/ZStream.html#method-i-total_in","()","<p>Returns the total bytes of the input data to the stream.  FIXME\n"],["total_out","Zlib::ZStream","Zlib/ZStream.html#method-i-total_out","()","<p>Returns the total bytes of the output data from the stream.  FIXME\n"],["ungetbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-ungetbyte","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["ungetc","Zlib::GzipReader","Zlib/GzipReader.html#method-i-ungetc","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["unused","Zlib::GzipReader","Zlib/GzipReader.html#method-i-unused","()","<p>Returns the rest of the data which had read for parsing gzip format, or <code>nil</code> if the whole gzip file is …\n"],["wrap","Zlib::GzipFile","Zlib/GzipFile.html#method-c-wrap","(*args)","<p>Creates a GzipReader or GzipWriter associated with <code>io</code>, passing in any necessary extra options, and executes …\n"],["write","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-write","(*args)","<p>Same as IO.\n"],["zlib_version","Zlib","Zlib.html#method-c-zlib_version","()","<p>Returns the string which represents the version of zlib library.\n"],["Makefile","","ext/zlib/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don&#39;t work. V = 0 Q1 = $(V:1=) Q = $(Q1:0=@) …\n"]]}}