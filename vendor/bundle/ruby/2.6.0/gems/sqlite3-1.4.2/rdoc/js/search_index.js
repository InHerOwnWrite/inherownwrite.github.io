var search_data = {"index":{"searchIndex":["object","rbconfig","sqlite3","abortexception","authorizationexception","backup","blob","busyexception","cantopenexception","constants","columntype","errorcode","open","textrep","constraintexception","corruptexception","database","functionproxy","emptyexception","exception","formatexception","fullexception","ioexception","internalexception","interruptexception","lockedexception","memoryexception","mismatchexception","misuseexception","notadatabaseexception","notfoundexception","permissionexception","pragmas","protocolexception","rangeexception","readonlyexception","resultset","arraywithtypes","arraywithtypesandfields","hashwithtypesandfields","sqlexception","schemachangedexception","statement","toobigexception","translator","unsupportedexception","value","versionproxy","string","[]()","[]=()","active?()","add_translator()","application_id()","application_id=()","arity()","authorizer()","authorizer=()","auto_vacuum()","auto_vacuum=()","automatic_index()","automatic_index=()","bind_param()","bind_parameter_count()","bind_params()","busy_handler()","busy_timeout()","busy_timeout()","busy_timeout=()","busy_timeout=()","cache_size()","cache_size=()","cache_spill()","cache_spill=()","case_sensitive_like=()","cell_size_check()","cell_size_check=()","changes()","checkpoint_fullfsync()","checkpoint_fullfsync=()","clear_bindings!()","close()","close()","close()","closed?()","closed?()","closed?()","collation()","collation_list()","column_count()","column_decltype()","column_name()","columns()","columns()","commit()","compile_options()","complete?()","const_missing()","count()","count_changes()","count_changes=()","create_aggregate()","create_aggregate_handler()","create_function()","data_version()","database_list()","database_name()","db_filename()","default_cache_size()","default_cache_size=()","default_synchronous()","default_synchronous=()","default_temp_store()","default_temp_store=()","defer_foreign_keys()","defer_foreign_keys=()","define_aggregator()","define_function()","define_function_with_flags()","done?()","each()","each()","each_hash()","enable_load_extension()","encoding()","encoding()","encoding=()","eof?()","errcode()","errmsg()","exec_batch()","execute()","execute()","execute!()","execute2()","execute_batch()","execute_batch2()","extended_result_codes=()","filename()","finalize()","finalize()","finish()","foreign_key_check()","foreign_key_list()","foreign_keys()","foreign_keys=()","freelist_count()","full_column_names()","full_column_names=()","fullfsync()","fullfsync=()","get_boolean_pragma()","get_enum_pragma()","get_first_row()","get_first_value()","get_int_pragma()","get_metadata()","get_query_pragma()","ignore_check_constraints=()","incremental_vacuum()","index_info()","index_list()","index_xinfo()","integrity_check()","interrupt()","journal_mode()","journal_mode=()","journal_size_limit()","journal_size_limit=()","last_insert_row_id()","legacy_file_format()","legacy_file_format=()","length()","libversion()","load_extension()","locking_mode()","locking_mode=()","make_type_translator()","max_page_count()","max_page_count=()","mmap_size()","mmap_size=()","name()","new()","new()","new()","new()","new()","new()","new()","next()","next_hash()","null?()","open16()","open_v2()","page_count()","page_size()","page_size=()","pagecount()","parser_trace=()","prepare()","query()","query_only()","query_only=()","quick_check()","quote()","read_uncommitted()","read_uncommitted=()","readonly?()","recursive_triggers()","recursive_triggers=()","register_default_translators()","remaining()","reset()","reset!()","reverse_unordered_selects()","reverse_unordered_selects=()","rollback()","schema_cookie()","schema_cookie=()","schema_version()","schema_version=()","secure_delete()","secure_delete=()","set_boolean_pragma()","set_enum_pragma()","set_error()","set_int_pragma()","short_column_names()","short_column_names=()","shrink_memory()","soft_heap_limit()","soft_heap_limit=()","sqlcipher?()","stats()","step()","step()","step()","step()","synchronous()","synchronous=()","table_info()","temp_store()","temp_store=()","template()","threads()","threads=()","threadsafe()","threadsafe?()","to_blob()","to_blob()","to_f()","to_i()","to_int64()","to_s()","total_changes()","trace()","transaction()","transaction_active?()","translate()","translate_from_db()","translator()","tweak_default()","type()","type_name()","types()","types()","user_cookie()","user_cookie=()","user_version()","user_version=()","vdbe_addoptrace=()","vdbe_debug=()","vdbe_listing=()","vdbe_trace()","vdbe_trace=()","version_compare()","wal_autocheckpoint()","wal_autocheckpoint=()","wal_checkpoint()","wal_checkpoint=()","writable_schema=()","api_changes","changelog","manifest","readme","makefile"],"longSearchIndex":["object","rbconfig","sqlite3","sqlite3::abortexception","sqlite3::authorizationexception","sqlite3::backup","sqlite3::blob","sqlite3::busyexception","sqlite3::cantopenexception","sqlite3::constants","sqlite3::constants::columntype","sqlite3::constants::errorcode","sqlite3::constants::open","sqlite3::constants::textrep","sqlite3::constraintexception","sqlite3::corruptexception","sqlite3::database","sqlite3::database::functionproxy","sqlite3::emptyexception","sqlite3::exception","sqlite3::formatexception","sqlite3::fullexception","sqlite3::ioexception","sqlite3::internalexception","sqlite3::interruptexception","sqlite3::lockedexception","sqlite3::memoryexception","sqlite3::mismatchexception","sqlite3::misuseexception","sqlite3::notadatabaseexception","sqlite3::notfoundexception","sqlite3::permissionexception","sqlite3::pragmas","sqlite3::protocolexception","sqlite3::rangeexception","sqlite3::readonlyexception","sqlite3::resultset","sqlite3::resultset::arraywithtypes","sqlite3::resultset::arraywithtypesandfields","sqlite3::resultset::hashwithtypesandfields","sqlite3::sqlexception","sqlite3::schemachangedexception","sqlite3::statement","sqlite3::toobigexception","sqlite3::translator","sqlite3::unsupportedexception","sqlite3::value","sqlite3::versionproxy","string","sqlite3::database::functionproxy#[]()","sqlite3::database::functionproxy#[]=()","sqlite3::statement#active?()","sqlite3::translator#add_translator()","sqlite3::pragmas#application_id()","sqlite3::pragmas#application_id=()","sqlite3::database::arity()","sqlite3::database#authorizer()","sqlite3::database#authorizer=()","sqlite3::pragmas#auto_vacuum()","sqlite3::pragmas#auto_vacuum=()","sqlite3::pragmas#automatic_index()","sqlite3::pragmas#automatic_index=()","sqlite3::statement#bind_param()","sqlite3::statement#bind_parameter_count()","sqlite3::statement#bind_params()","sqlite3::database#busy_handler()","sqlite3::database#busy_timeout()","sqlite3::pragmas#busy_timeout()","sqlite3::database#busy_timeout=()","sqlite3::pragmas#busy_timeout=()","sqlite3::pragmas#cache_size()","sqlite3::pragmas#cache_size=()","sqlite3::pragmas#cache_spill()","sqlite3::pragmas#cache_spill=()","sqlite3::pragmas#case_sensitive_like=()","sqlite3::pragmas#cell_size_check()","sqlite3::pragmas#cell_size_check=()","sqlite3::database#changes()","sqlite3::pragmas#checkpoint_fullfsync()","sqlite3::pragmas#checkpoint_fullfsync=()","sqlite3::statement#clear_bindings!()","sqlite3::database#close()","sqlite3::resultset#close()","sqlite3::statement#close()","sqlite3::database#closed?()","sqlite3::resultset#closed?()","sqlite3::statement#closed?()","sqlite3::database#collation()","sqlite3::pragmas#collation_list()","sqlite3::statement#column_count()","sqlite3::statement#column_decltype()","sqlite3::statement#column_name()","sqlite3::resultset#columns()","sqlite3::statement#columns()","sqlite3::database#commit()","sqlite3::pragmas#compile_options()","sqlite3::database#complete?()","sqlite3::const_missing()","sqlite3::database::functionproxy#count()","sqlite3::pragmas#count_changes()","sqlite3::pragmas#count_changes=()","sqlite3::database#create_aggregate()","sqlite3::database#create_aggregate_handler()","sqlite3::database#create_function()","sqlite3::pragmas#data_version()","sqlite3::pragmas#database_list()","sqlite3::statement#database_name()","sqlite3::database#db_filename()","sqlite3::pragmas#default_cache_size()","sqlite3::pragmas#default_cache_size=()","sqlite3::pragmas#default_synchronous()","sqlite3::pragmas#default_synchronous=()","sqlite3::pragmas#default_temp_store()","sqlite3::pragmas#default_temp_store=()","sqlite3::pragmas#defer_foreign_keys()","sqlite3::pragmas#defer_foreign_keys=()","sqlite3::database#define_aggregator()","sqlite3::database#define_function()","sqlite3::database#define_function_with_flags()","sqlite3::statement#done?()","sqlite3::resultset#each()","sqlite3::statement#each()","sqlite3::resultset#each_hash()","sqlite3::database#enable_load_extension()","sqlite3::database#encoding()","sqlite3::pragmas#encoding()","sqlite3::pragmas#encoding=()","sqlite3::resultset#eof?()","sqlite3::database#errcode()","sqlite3::database#errmsg()","sqlite3::database#exec_batch()","sqlite3::database#execute()","sqlite3::statement#execute()","sqlite3::statement#execute!()","sqlite3::database#execute2()","sqlite3::database#execute_batch()","sqlite3::database#execute_batch2()","sqlite3::database#extended_result_codes=()","sqlite3::database#filename()","sqlite3::database#finalize()","sqlite3::database::finalize()","sqlite3::backup#finish()","sqlite3::pragmas#foreign_key_check()","sqlite3::pragmas#foreign_key_list()","sqlite3::pragmas#foreign_keys()","sqlite3::pragmas#foreign_keys=()","sqlite3::pragmas#freelist_count()","sqlite3::pragmas#full_column_names()","sqlite3::pragmas#full_column_names=()","sqlite3::pragmas#fullfsync()","sqlite3::pragmas#fullfsync=()","sqlite3::pragmas#get_boolean_pragma()","sqlite3::pragmas#get_enum_pragma()","sqlite3::database#get_first_row()","sqlite3::database#get_first_value()","sqlite3::pragmas#get_int_pragma()","sqlite3::statement#get_metadata()","sqlite3::pragmas#get_query_pragma()","sqlite3::pragmas#ignore_check_constraints=()","sqlite3::pragmas#incremental_vacuum()","sqlite3::pragmas#index_info()","sqlite3::pragmas#index_list()","sqlite3::pragmas#index_xinfo()","sqlite3::pragmas#integrity_check()","sqlite3::database#interrupt()","sqlite3::pragmas#journal_mode()","sqlite3::pragmas#journal_mode=()","sqlite3::pragmas#journal_size_limit()","sqlite3::pragmas#journal_size_limit=()","sqlite3::database#last_insert_row_id()","sqlite3::pragmas#legacy_file_format()","sqlite3::pragmas#legacy_file_format=()","sqlite3::value#length()","sqlite3::libversion()","sqlite3::database#load_extension()","sqlite3::pragmas#locking_mode()","sqlite3::pragmas#locking_mode=()","sqlite3::database#make_type_translator()","sqlite3::pragmas#max_page_count()","sqlite3::pragmas#max_page_count=()","sqlite3::pragmas#mmap_size()","sqlite3::pragmas#mmap_size=()","sqlite3::database::name()","sqlite3::backup::new()","sqlite3::database::new()","sqlite3::database::functionproxy::new()","sqlite3::resultset::new()","sqlite3::statement::new()","sqlite3::translator::new()","sqlite3::value::new()","sqlite3::resultset#next()","sqlite3::resultset#next_hash()","sqlite3::value#null?()","sqlite3::database#open16()","sqlite3::database#open_v2()","sqlite3::pragmas#page_count()","sqlite3::pragmas#page_size()","sqlite3::pragmas#page_size=()","sqlite3::backup#pagecount()","sqlite3::pragmas#parser_trace=()","sqlite3::database#prepare()","sqlite3::database#query()","sqlite3::pragmas#query_only()","sqlite3::pragmas#query_only=()","sqlite3::pragmas#quick_check()","sqlite3::database::quote()","sqlite3::pragmas#read_uncommitted()","sqlite3::pragmas#read_uncommitted=()","sqlite3::database#readonly?()","sqlite3::pragmas#recursive_triggers()","sqlite3::pragmas#recursive_triggers=()","sqlite3::translator#register_default_translators()","sqlite3::backup#remaining()","sqlite3::resultset#reset()","sqlite3::statement#reset!()","sqlite3::pragmas#reverse_unordered_selects()","sqlite3::pragmas#reverse_unordered_selects=()","sqlite3::database#rollback()","sqlite3::pragmas#schema_cookie()","sqlite3::pragmas#schema_cookie=()","sqlite3::pragmas#schema_version()","sqlite3::pragmas#schema_version=()","sqlite3::pragmas#secure_delete()","sqlite3::pragmas#secure_delete=()","sqlite3::pragmas#set_boolean_pragma()","sqlite3::pragmas#set_enum_pragma()","sqlite3::database::functionproxy#set_error()","sqlite3::pragmas#set_int_pragma()","sqlite3::pragmas#short_column_names()","sqlite3::pragmas#short_column_names=()","sqlite3::pragmas#shrink_memory()","sqlite3::pragmas#soft_heap_limit()","sqlite3::pragmas#soft_heap_limit=()","sqlite3::sqlcipher?()","sqlite3::pragmas#stats()","sqlite3::backup#step()","sqlite3::database#step()","sqlite3::database::step()","sqlite3::statement#step()","sqlite3::pragmas#synchronous()","sqlite3::pragmas#synchronous=()","sqlite3::pragmas#table_info()","sqlite3::pragmas#temp_store()","sqlite3::pragmas#temp_store=()","sqlite3::database::template()","sqlite3::pragmas#threads()","sqlite3::pragmas#threads=()","sqlite3::threadsafe()","sqlite3::threadsafe?()","sqlite3::value#to_blob()","string#to_blob()","sqlite3::value#to_f()","sqlite3::value#to_i()","sqlite3::value#to_int64()","sqlite3::value#to_s()","sqlite3::database#total_changes()","sqlite3::database#trace()","sqlite3::database#transaction()","sqlite3::database#transaction_active?()","sqlite3::translator#translate()","sqlite3::database#translate_from_db()","sqlite3::database#translator()","sqlite3::pragmas#tweak_default()","sqlite3::value#type()","sqlite3::translator#type_name()","sqlite3::resultset#types()","sqlite3::statement#types()","sqlite3::pragmas#user_cookie()","sqlite3::pragmas#user_cookie=()","sqlite3::pragmas#user_version()","sqlite3::pragmas#user_version=()","sqlite3::pragmas#vdbe_addoptrace=()","sqlite3::pragmas#vdbe_debug=()","sqlite3::pragmas#vdbe_listing=()","sqlite3::pragmas#vdbe_trace()","sqlite3::pragmas#vdbe_trace=()","sqlite3::pragmas#version_compare()","sqlite3::pragmas#wal_autocheckpoint()","sqlite3::pragmas#wal_autocheckpoint=()","sqlite3::pragmas#wal_checkpoint()","sqlite3::pragmas#wal_checkpoint=()","sqlite3::pragmas#writable_schema=()","","","","",""],"info":[["Object","","Object.html","",""],["RbConfig","","RbConfig.html","",""],["SQLite3","","SQLite3.html","","<p>SQLite3 is a wrapper around the popular database sqlite.\n<p>For an example of usage, see SQLite3::Database …\n"],["SQLite3::AbortException","","SQLite3/AbortException.html","",""],["SQLite3::AuthorizationException","","SQLite3/AuthorizationException.html","",""],["SQLite3::Backup","","SQLite3/Backup.html","",""],["SQLite3::Blob","","SQLite3/Blob.html","","<p>A class for differentiating between strings and blobs, when binding them\n\n<pre>into statements.</pre>\n"],["SQLite3::BusyException","","SQLite3/BusyException.html","",""],["SQLite3::CantOpenException","","SQLite3/CantOpenException.html","",""],["SQLite3::Constants","","SQLite3/Constants.html","",""],["SQLite3::Constants::ColumnType","","SQLite3/Constants/ColumnType.html","",""],["SQLite3::Constants::ErrorCode","","SQLite3/Constants/ErrorCode.html","",""],["SQLite3::Constants::Open","","SQLite3/Constants/Open.html","","<p>sqlite3_open_v2 flags for Database::new\n"],["SQLite3::Constants::TextRep","","SQLite3/Constants/TextRep.html","",""],["SQLite3::ConstraintException","","SQLite3/ConstraintException.html","",""],["SQLite3::CorruptException","","SQLite3/CorruptException.html","",""],["SQLite3::Database","","SQLite3/Database.html","","<p>The Database class encapsulates a single connection to a SQLite3 database. Its usage is very straightforward: …\n"],["SQLite3::Database::FunctionProxy","","SQLite3/Database/FunctionProxy.html","","<p>A helper class for dealing with custom functions (see #create_function, #create_aggregate, and #create_aggregate_handler …\n"],["SQLite3::EmptyException","","SQLite3/EmptyException.html","",""],["SQLite3::Exception","","SQLite3/Exception.html","",""],["SQLite3::FormatException","","SQLite3/FormatException.html","",""],["SQLite3::FullException","","SQLite3/FullException.html","",""],["SQLite3::IOException","","SQLite3/IOException.html","",""],["SQLite3::InternalException","","SQLite3/InternalException.html","",""],["SQLite3::InterruptException","","SQLite3/InterruptException.html","",""],["SQLite3::LockedException","","SQLite3/LockedException.html","",""],["SQLite3::MemoryException","","SQLite3/MemoryException.html","",""],["SQLite3::MismatchException","","SQLite3/MismatchException.html","",""],["SQLite3::MisuseException","","SQLite3/MisuseException.html","",""],["SQLite3::NotADatabaseException","","SQLite3/NotADatabaseException.html","",""],["SQLite3::NotFoundException","","SQLite3/NotFoundException.html","",""],["SQLite3::PermissionException","","SQLite3/PermissionException.html","",""],["SQLite3::Pragmas","","SQLite3/Pragmas.html","","<p>This module is intended for inclusion solely by the Database class. It defines convenience methods for …\n"],["SQLite3::ProtocolException","","SQLite3/ProtocolException.html","",""],["SQLite3::RangeException","","SQLite3/RangeException.html","",""],["SQLite3::ReadOnlyException","","SQLite3/ReadOnlyException.html","",""],["SQLite3::ResultSet","","SQLite3/ResultSet.html","","<p>The ResultSet object encapsulates the enumerability of a query&#39;s output. It is a simple cursor over …\n"],["SQLite3::ResultSet::ArrayWithTypes","","SQLite3/ResultSet/ArrayWithTypes.html","",""],["SQLite3::ResultSet::ArrayWithTypesAndFields","","SQLite3/ResultSet/ArrayWithTypesAndFields.html","",""],["SQLite3::ResultSet::HashWithTypesAndFields","","SQLite3/ResultSet/HashWithTypesAndFields.html","",""],["SQLite3::SQLException","","SQLite3/SQLException.html","",""],["SQLite3::SchemaChangedException","","SQLite3/SchemaChangedException.html","",""],["SQLite3::Statement","","SQLite3/Statement.html","","<p>A statement represents a prepared-but-unexecuted SQL query. It will rarely (if ever) be instantiated …\n"],["SQLite3::TooBigException","","SQLite3/TooBigException.html","",""],["SQLite3::Translator","","SQLite3/Translator.html","","<p>The Translator class encapsulates the logic and callbacks necessary for converting string data to a value …\n"],["SQLite3::UnsupportedException","","SQLite3/UnsupportedException.html","",""],["SQLite3::Value","","SQLite3/Value.html","",""],["SQLite3::VersionProxy","","SQLite3/VersionProxy.html","",""],["String","","String.html","",""],["[]","SQLite3::Database::FunctionProxy","SQLite3/Database/FunctionProxy.html#method-i-5B-5D","( key )","<p>Returns the value with the given key from the context. This is only available to aggregate functions. …\n"],["[]=","SQLite3::Database::FunctionProxy","SQLite3/Database/FunctionProxy.html#method-i-5B-5D-3D","( key, value )","<p>Sets the value with the given key in the context. This is only available to aggregate functions.\n"],["active?","SQLite3::Statement","SQLite3/Statement.html#method-i-active-3F","()","<p>Returns true if the statement is currently active, meaning it has an open result set.\n"],["add_translator","SQLite3::Translator","SQLite3/Translator.html#method-i-add_translator","( type )","<p>Add a new translator block, which will be invoked to process type translations to the given type. The …\n"],["application_id","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-application_id","()",""],["application_id=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-application_id-3D","( integer )",""],["arity","SQLite3::Database","SQLite3/Database.html#method-c-arity","()",""],["authorizer","SQLite3::Database","SQLite3/Database.html#method-i-authorizer","( &block )","<p>Installs (or removes) a block that will be invoked for every access to the database. If the block returns …\n"],["authorizer=","SQLite3::Database","SQLite3/Database.html#method-i-authorizer-3D","(p1)","<p>Set the authorizer for this database.  <code>auth</code> must respond to <code>call</code>, and <code>call</code> must take 5 arguments.\n<p>Installs …\n"],["auto_vacuum","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-auto_vacuum","()",""],["auto_vacuum=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-auto_vacuum-3D","( mode )",""],["automatic_index","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-automatic_index","()",""],["automatic_index=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-automatic_index-3D","( mode )",""],["bind_param","SQLite3::Statement","SQLite3/Statement.html#method-i-bind_param","(p1, p2)","<p>Binds value to the named (or positional) placeholder. If <code>param</code> is a Fixnum, it is treated as an index …\n"],["bind_parameter_count","SQLite3::Statement","SQLite3/Statement.html#method-i-bind_parameter_count","()","<p>Return the number of bind parameters\n"],["bind_params","SQLite3::Statement","SQLite3/Statement.html#method-i-bind_params","( *bind_vars )","<p>Binds the given variables to the corresponding placeholders in the SQL text.\n<p>See Database#execute for …\n"],["busy_handler","SQLite3::Database","SQLite3/Database.html#method-i-busy_handler","(p1 = v1)","<p>Register a busy handler with this database instance. When a requested resource is busy, this handler …\n"],["busy_timeout","SQLite3::Database","SQLite3/Database.html#method-i-busy_timeout","(p1)",""],["busy_timeout","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-busy_timeout","()",""],["busy_timeout=","SQLite3::Database","SQLite3/Database.html#method-i-busy_timeout-3D","(p1)","<p>Indicates that if a request for a resource terminates because that resource is busy, SQLite should sleep …\n"],["busy_timeout=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-busy_timeout-3D","( milliseconds )",""],["cache_size","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-cache_size","()",""],["cache_size=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-cache_size-3D","( size )",""],["cache_spill","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-cache_spill","()",""],["cache_spill=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-cache_spill-3D","( mode )",""],["case_sensitive_like=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-case_sensitive_like-3D","( mode )",""],["cell_size_check","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-cell_size_check","()",""],["cell_size_check=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-cell_size_check-3D","( mode )",""],["changes","SQLite3::Database","SQLite3/Database.html#method-i-changes","()","<p>Returns the number of changes made to this database instance by the last operation performed. Note that …\n"],["checkpoint_fullfsync","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-checkpoint_fullfsync","()",""],["checkpoint_fullfsync=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-checkpoint_fullfsync-3D","( mode )",""],["clear_bindings!","SQLite3::Statement","SQLite3/Statement.html#method-i-clear_bindings-21","()","<p>Resets the statement. This is typically done internally, though it might occassionally be necessary to …\n"],["close","SQLite3::Database","SQLite3/Database.html#method-i-close","()","<p>Closes this database.\n"],["close","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-close","()","<p>Closes the statement that spawned this result set. <em>Use with caution!</em> Closing a result set will automatically …\n"],["close","SQLite3::Statement","SQLite3/Statement.html#method-i-close","()","<p>Closes the statement by finalizing the underlying statement handle. The statement must not be used after …\n"],["closed?","SQLite3::Database","SQLite3/Database.html#method-i-closed-3F","()","<p>Returns <code>true</code> if this database instance has been closed (see #close).\n"],["closed?","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-closed-3F","()","<p>Queries whether the underlying statement has been closed or not.\n"],["closed?","SQLite3::Statement","SQLite3/Statement.html#method-i-closed-3F","()","<p>Returns true if the statement has been closed.\n"],["collation","SQLite3::Database","SQLite3/Database.html#method-i-collation","(p1, p2)","<p>Add a collation with name <code>name</code>, and a <code>comparator</code> object.  The <code>comparator</code> object should implement a method …\n"],["collation_list","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-collation_list","( )",""],["column_count","SQLite3::Statement","SQLite3/Statement.html#method-i-column_count","()","<p>Returns the number of columns to be returned for this statement\n"],["column_decltype","SQLite3::Statement","SQLite3/Statement.html#method-i-column_decltype","(p1)","<p>Get the column type at <code>index</code>.  0 based.\n"],["column_name","SQLite3::Statement","SQLite3/Statement.html#method-i-column_name","(p1)","<p>Get the column name at <code>index</code>.  0 based.\n"],["columns","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-columns","()","<p>Returns the names of the columns returned by this result set.\n"],["columns","SQLite3::Statement","SQLite3/Statement.html#method-i-columns","()","<p>Return an array of the column names for this statement. Note that this may execute the statement in order …\n"],["commit","SQLite3::Database","SQLite3/Database.html#method-i-commit","()","<p>Commits the current transaction. If there is no current transaction, this will cause an error to be raised. …\n"],["compile_options","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-compile_options","( )",""],["complete?","SQLite3::Database","SQLite3/Database.html#method-i-complete-3F","(p1)","<p>Return <code>true</code> if the string is a valid (ie, parsable) SQL statement, and <code>false</code> otherwise.\n"],["const_missing","SQLite3","SQLite3.html#method-c-const_missing","(name)",""],["count","SQLite3::Database::FunctionProxy","SQLite3/Database/FunctionProxy.html#method-i-count","()","<p>(Only available to aggregate functions.) Returns the number of rows that the aggregate has processed …\n"],["count_changes","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-count_changes","()",""],["count_changes=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-count_changes-3D","( mode )",""],["create_aggregate","SQLite3::Database","SQLite3/Database.html#method-i-create_aggregate","( name, arity, step=nil, finalize=nil, text_rep=Constants::TextRep::ANY, &block )","<p>Creates a new aggregate function for use in SQL statements. Aggregate functions are functions that apply …\n"],["create_aggregate_handler","SQLite3::Database","SQLite3/Database.html#method-i-create_aggregate_handler","( handler )","<p>This is another approach to creating an aggregate function (see #create_aggregate). Instead of explicitly …\n"],["create_function","SQLite3::Database","SQLite3/Database.html#method-i-create_function","(name, arity, text_rep=Constants::TextRep::UTF8, &block)","<p>Creates a new function for use in SQL statements. It will be added as <code>name</code>, with the given <code>arity</code>. (For …\n"],["data_version","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-data_version","()",""],["database_list","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-database_list","( )",""],["database_name","SQLite3::Statement","SQLite3/Statement.html#method-i-database_name","(p1)","<p>Return the database name for the column at <code>column_index</code>\n"],["db_filename","SQLite3::Database","SQLite3/Database.html#method-i-db_filename","(p1)","<p>Returns the file associated with <code>database_name</code>.  Can return nil or an empty string if the database is …\n"],["default_cache_size","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-default_cache_size","()",""],["default_cache_size=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-default_cache_size-3D","( size )",""],["default_synchronous","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-default_synchronous","()",""],["default_synchronous=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-default_synchronous-3D","( mode )",""],["default_temp_store","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-default_temp_store","()",""],["default_temp_store=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-default_temp_store-3D","( mode )",""],["defer_foreign_keys","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-defer_foreign_keys","()",""],["defer_foreign_keys=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-defer_foreign_keys-3D","( mode )",""],["define_aggregator","SQLite3::Database","SQLite3/Database.html#method-i-define_aggregator","( name, aggregator )","<p>Define an aggregate function named <code>name</code> using a object template object <code>aggregator</code>. <code>aggregator</code> must respond …\n"],["define_function","SQLite3::Database","SQLite3/Database.html#method-i-define_function","(p1)","<p>Define a function named <code>name</code> with <code>args</code>.  The arity of the block will be used as the arity for the function …\n"],["define_function_with_flags","SQLite3::Database","SQLite3/Database.html#method-i-define_function_with_flags","(p1, p2)","<p>Define a function named <code>name</code> with <code>args</code> using TextRep bitflags <code>flags</code>.  The arity of the block will be …\n"],["done?","SQLite3::Statement","SQLite3/Statement.html#method-i-done-3F","()","<p>returns true if all rows have been returned.\n"],["each","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-each","()","<p>Required by the Enumerable mixin. Provides an internal iterator over the rows of the result set.\n"],["each","SQLite3::Statement","SQLite3/Statement.html#method-i-each","()",""],["each_hash","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-each_hash","()","<p>Provides an internal iterator over the rows of the result set where each row is yielded as a hash.\n"],["enable_load_extension","SQLite3::Database","SQLite3/Database.html#method-i-enable_load_extension","(p1)","<p>Enable or disable extension loading.\n"],["encoding","SQLite3::Database","SQLite3/Database.html#method-i-encoding","()","<p>Fetch the encoding set on this database\n"],["encoding","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-encoding","()",""],["encoding=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-encoding-3D","( mode )",""],["eof?","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-eof-3F","()","<p>Query whether the cursor has reached the end of the result set or not.\n"],["errcode","SQLite3::Database","SQLite3/Database.html#method-i-errcode","()","<p>Return an integer representing the last error to have occurred with this database.\n"],["errmsg","SQLite3::Database","SQLite3/Database.html#method-i-errmsg","()","<p>Return a string describing the last error to have occurred with this database.\n"],["exec_batch","SQLite3::Database","SQLite3/Database.html#method-i-exec_batch","(p1, p2)","<p>Is invoked by calling db.execute_batch2(sql, &amp;block)\n<p>Executes all statments in a given string separated …\n"],["execute","SQLite3::Database","SQLite3/Database.html#method-i-execute","(sql, bind_vars = [], *args, &block)","<p>Executes the given SQL statement. If additional parameters are given, they are treated as bind variables, …\n"],["execute","SQLite3::Statement","SQLite3/Statement.html#method-i-execute","( *bind_vars )","<p>Execute the statement. This creates a new ResultSet object for the statement&#39;s virtual machine.  …\n"],["execute!","SQLite3::Statement","SQLite3/Statement.html#method-i-execute-21","( *bind_vars, &block )","<p>Execute the statement. If no block was given, this returns an array of rows returned by executing the …\n"],["execute2","SQLite3::Database","SQLite3/Database.html#method-i-execute2","( sql, *bind_vars )","<p>Executes the given SQL statement, exactly as with #execute. However, the first row returned (either via …\n"],["execute_batch","SQLite3::Database","SQLite3/Database.html#method-i-execute_batch","( sql, bind_vars = [], *args )","<p>Executes all SQL statements in the given string. By contrast, the other means of executing queries will …\n"],["execute_batch2","SQLite3::Database","SQLite3/Database.html#method-i-execute_batch2","(sql, &block)","<p>Executes all SQL statements in the given string. By contrast, the other means of executing queries will …\n"],["extended_result_codes=","SQLite3::Database","SQLite3/Database.html#method-i-extended_result_codes-3D","(p1)","<p>Enable extended result codes in SQLite.  These result codes allow for more detailed exception reporting, …\n"],["filename","SQLite3::Database","SQLite3/Database.html#method-i-filename","(db_name = 'main')","<p>Returns the filename for the database named <code>db_name</code>.  <code>db_name</code> defaults to “main”.  Main return …\n"],["finalize","SQLite3::Database","SQLite3/Database.html#method-i-finalize","()",""],["finalize","SQLite3::Database","SQLite3/Database.html#method-c-finalize","( &block )",""],["finish","SQLite3::Backup","SQLite3/Backup.html#method-i-finish","()","<p>Destroy the backup object.\n"],["foreign_key_check","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-foreign_key_check","( *table )",""],["foreign_key_list","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-foreign_key_list","( table )",""],["foreign_keys","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-foreign_keys","()",""],["foreign_keys=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-foreign_keys-3D","( mode )",""],["freelist_count","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-freelist_count","()",""],["full_column_names","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-full_column_names","()",""],["full_column_names=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-full_column_names-3D","( mode )",""],["fullfsync","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-fullfsync","()",""],["fullfsync=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-fullfsync-3D","( mode )",""],["get_boolean_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-get_boolean_pragma","( name )","<p>Returns <code>true</code> or <code>false</code> depending on the value of the named pragma.\n"],["get_enum_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-get_enum_pragma","( name )","<p>Return the value of the given pragma.\n"],["get_first_row","SQLite3::Database","SQLite3/Database.html#method-i-get_first_row","( sql, *bind_vars )","<p>A convenience method for obtaining the first row of a result set, and discarding all others. It is otherwise …\n"],["get_first_value","SQLite3::Database","SQLite3/Database.html#method-i-get_first_value","( sql, *bind_vars )","<p>A convenience method for obtaining the first value of the first row of a result set, and discarding all …\n"],["get_int_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-get_int_pragma","( name )","<p>Returns the value of the given pragma as an integer.\n"],["get_metadata","SQLite3::Statement","SQLite3/Statement.html#method-i-get_metadata","()","<p>A convenience method for obtaining the metadata about the query. Note that this will actually execute …\n"],["get_query_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-get_query_pragma","( name, *parms )","<p>Requests the given pragma (and parameters), and if the block is given, each row of the result set will …\n"],["ignore_check_constraints=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-ignore_check_constraints-3D","( mode )",""],["incremental_vacuum","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-incremental_vacuum","( pages )",""],["index_info","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-index_info","( index )",""],["index_list","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-index_list","( table )",""],["index_xinfo","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-index_xinfo","( index )",""],["integrity_check","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-integrity_check","( *num_errors )",""],["interrupt","SQLite3::Database","SQLite3/Database.html#method-i-interrupt","()","<p>Interrupts the currently executing operation, causing it to abort.\n"],["journal_mode","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-journal_mode","()",""],["journal_mode=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-journal_mode-3D","( mode )",""],["journal_size_limit","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-journal_size_limit","()",""],["journal_size_limit=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-journal_size_limit-3D","( size )",""],["last_insert_row_id","SQLite3::Database","SQLite3/Database.html#method-i-last_insert_row_id","()","<p>Obtains the unique row ID of the last row to be inserted by this Database instance.\n"],["legacy_file_format","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-legacy_file_format","()",""],["legacy_file_format=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-legacy_file_format-3D","( mode )",""],["length","SQLite3::Value","SQLite3/Value.html#method-i-length","( utf16=false )",""],["libversion","SQLite3","SQLite3.html#method-c-libversion","()",""],["load_extension","SQLite3::Database","SQLite3/Database.html#method-i-load_extension","(p1)","<p>Loads an SQLite extension library from the named file. Extension loading must be enabled using db.enable_load_extension …\n"],["locking_mode","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-locking_mode","()",""],["locking_mode=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-locking_mode-3D","( mode )",""],["make_type_translator","SQLite3::Database","SQLite3/Database.html#method-i-make_type_translator","(should_translate)",""],["max_page_count","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-max_page_count","()",""],["max_page_count=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-max_page_count-3D","( size )",""],["mmap_size","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-mmap_size","()",""],["mmap_size=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-mmap_size-3D","( size )",""],["name","SQLite3::Database","SQLite3/Database.html#method-c-name","()",""],["new","SQLite3::Backup","SQLite3/Backup.html#method-c-new","(p1, p2, p3, p4)","<p>Initialize backup the backup.\n<p>dstdb:\n\n<pre>the destination SQLite3::Database object.</pre>\n"],["new","SQLite3::Database","SQLite3/Database.html#method-c-new","(file, options = {})","<p>Create a new Database object that opens the given file. If utf16 is <code>true</code>, the filename is interpreted …\n"],["new","SQLite3::Database::FunctionProxy","SQLite3/Database/FunctionProxy.html#method-c-new","()","<p>Create a new FunctionProxy that encapsulates the given <code>func</code> object. If context is non-nil, the functions …\n"],["new","SQLite3::ResultSet","SQLite3/ResultSet.html#method-c-new","(db, stmt)","<p>Create a new ResultSet attached to the given database, using the given sql text.\n"],["new","SQLite3::Statement","SQLite3/Statement.html#method-c-new","(p1, p2)","<p>Create a new statement attached to the given Database instance, and which encapsulates the given SQL …\n"],["new","SQLite3::Translator","SQLite3/Translator.html#method-c-new","()","<p>Create a new Translator instance. It will be preinitialized with default translators for most SQL data …\n"],["new","SQLite3::Value","SQLite3/Value.html#method-c-new","( db, handle )",""],["next","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-next","()","<p>Obtain the next row from the cursor. If there are no more rows to be had, this will return <code>nil</code>. If type …\n"],["next_hash","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-next_hash","()","<p>Return the next row as a hash\n"],["null?","SQLite3::Value","SQLite3/Value.html#method-i-null-3F","()",""],["open16","SQLite3::Database","SQLite3/Database.html#method-i-open16","(p1)",""],["open_v2","SQLite3::Database","SQLite3/Database.html#method-i-open_v2","(p1, p2, p3)",""],["page_count","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-page_count","()",""],["page_size","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-page_size","()",""],["page_size=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-page_size-3D","( size )",""],["pagecount","SQLite3::Backup","SQLite3/Backup.html#method-i-pagecount","()","<p>Returns the total number of pages in the source database file.\n<p>Note that the value is only updated after …\n"],["parser_trace=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-parser_trace-3D","( mode )",""],["prepare","SQLite3::Database","SQLite3/Database.html#method-i-prepare","(sql)","<p>Returns a Statement object representing the given SQL. This does not execute the statement; it merely …\n"],["query","SQLite3::Database","SQLite3/Database.html#method-i-query","( sql, bind_vars = [], *args )","<p>This is a convenience method for creating a statement, binding paramters to it, and calling execute: …\n"],["query_only","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-query_only","()",""],["query_only=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-query_only-3D","( mode )",""],["quick_check","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-quick_check","( *num_errors )",""],["quote","SQLite3::Database","SQLite3/Database.html#method-c-quote","( string )","<p>Quotes the given string, making it safe to use in an SQL statement. It replaces all instances of the …\n"],["read_uncommitted","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-read_uncommitted","()",""],["read_uncommitted=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-read_uncommitted-3D","( mode )",""],["readonly?","SQLite3::Database","SQLite3/Database.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the database has been open in readonly mode A helper to check before performing any operation …\n"],["recursive_triggers","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-recursive_triggers","()",""],["recursive_triggers=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-recursive_triggers-3D","( mode )",""],["register_default_translators","SQLite3::Translator","SQLite3/Translator.html#method-i-register_default_translators","()","<p>Register the default translators for the current Translator instance. This includes translators for most …\n"],["remaining","SQLite3::Backup","SQLite3/Backup.html#method-i-remaining","()","<p>Returns the number of pages still to be backed up.\n<p>Note that the value is only updated after step() is …\n"],["reset","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-reset","( *bind_params )","<p>Reset the cursor, so that a result set which has reached end-of-file can be rewound and reiterated.\n"],["reset!","SQLite3::Statement","SQLite3/Statement.html#method-i-reset-21","()","<p>Resets the statement. This is typically done internally, though it might occassionally be necessary to …\n"],["reverse_unordered_selects","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-reverse_unordered_selects","()",""],["reverse_unordered_selects=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-reverse_unordered_selects-3D","( mode )",""],["rollback","SQLite3::Database","SQLite3/Database.html#method-i-rollback","()","<p>Rolls the current transaction back. If there is no current transaction, this will cause an error to be …\n"],["schema_cookie","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-schema_cookie","()",""],["schema_cookie=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-schema_cookie-3D","( cookie )",""],["schema_version","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-schema_version","()",""],["schema_version=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-schema_version-3D","( version )",""],["secure_delete","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-secure_delete","()",""],["secure_delete=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-secure_delete-3D","( mode )",""],["set_boolean_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-set_boolean_pragma","( name, mode )","<p>Sets the given pragma to the given boolean value. The value itself may be <code>true</code> or <code>false</code>, or any other …\n"],["set_enum_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-set_enum_pragma","( name, mode, enums )","<p>Set the value of the given pragma to <code>mode</code>. The <code>mode</code> parameter must conform to one of the values in the …\n"],["set_error","SQLite3::Database::FunctionProxy","SQLite3/Database/FunctionProxy.html#method-i-set_error","( error )","<p>Set the result of the function to the given error message. The function will then return that error. …\n"],["set_int_pragma","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-set_int_pragma","( name, value )","<p>Set the value of the given pragma to the integer value of the <code>value</code> parameter.\n"],["short_column_names","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-short_column_names","()",""],["short_column_names=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-short_column_names-3D","( mode )",""],["shrink_memory","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-shrink_memory","()",""],["soft_heap_limit","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-soft_heap_limit","()",""],["soft_heap_limit=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-soft_heap_limit-3D","( mode )",""],["sqlcipher?","SQLite3","SQLite3.html#method-c-sqlcipher-3F","()",""],["stats","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-stats","( )",""],["step","SQLite3::Backup","SQLite3/Backup.html#method-i-step","(p1)","<p>Copy database pages up to <code>nPage</code>. If negative, copy all remaining source pages.\n<p>If all pages are copied, …\n"],["step","SQLite3::Database","SQLite3/Database.html#method-i-step","( *args )",""],["step","SQLite3::Database","SQLite3/Database.html#method-c-step","( &block )",""],["step","SQLite3::Statement","SQLite3/Statement.html#method-i-step","()",""],["synchronous","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-synchronous","()",""],["synchronous=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-synchronous-3D","( mode )",""],["table_info","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-table_info","(table)","<p>Returns information about <code>table</code>.  Yields each row of table information if a block is provided.\n"],["temp_store","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-temp_store","()",""],["temp_store=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-temp_store-3D","( mode )",""],["template","SQLite3::Database","SQLite3/Database.html#method-c-template","()",""],["threads","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-threads","()",""],["threads=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-threads-3D","( count )",""],["threadsafe","SQLite3","SQLite3.html#method-c-threadsafe","()","<p>Returns the compile time setting of the SQLITE_THREADSAFE flag. See: www.sqlite.org/c3ref/threadsafe.html …\n"],["threadsafe?","SQLite3","SQLite3.html#method-c-threadsafe-3F","()","<p>Was sqlite3 compiled with thread safety on?\n"],["to_blob","SQLite3::Value","SQLite3/Value.html#method-i-to_blob","()",""],["to_blob","String","String.html#method-i-to_blob","()",""],["to_f","SQLite3::Value","SQLite3/Value.html#method-i-to_f","()",""],["to_i","SQLite3::Value","SQLite3/Value.html#method-i-to_i","()",""],["to_int64","SQLite3::Value","SQLite3/Value.html#method-i-to_int64","()",""],["to_s","SQLite3::Value","SQLite3/Value.html#method-i-to_s","( utf16=false )",""],["total_changes","SQLite3::Database","SQLite3/Database.html#method-i-total_changes","()","<p>Returns the total number of changes made to this database instance since it was opened.\n"],["trace","SQLite3::Database","SQLite3/Database.html#method-i-trace","(p1 = v1)","<p>Installs (or removes) a block that will be invoked for every SQL statement executed. The block receives …\n"],["transaction","SQLite3::Database","SQLite3/Database.html#method-i-transaction","( mode = :deferred )","<p>Begins a new transaction. Note that nested transactions are not allowed by SQLite, so attempting to nest …\n"],["transaction_active?","SQLite3::Database","SQLite3/Database.html#method-i-transaction_active-3F","()","<p>Returns <code>true</code> if there is a transaction active, and <code>false</code> otherwise.\n"],["translate","SQLite3::Translator","SQLite3/Translator.html#method-i-translate","( type, value )","<p>Translate the given string value to a value of the given type. In the absense of an installed translator …\n"],["translate_from_db","SQLite3::Database","SQLite3/Database.html#method-i-translate_from_db","(types, row)","<p>Translates a <code>row</code> of data from the database with the given <code>types</code>\n"],["translator","SQLite3::Database","SQLite3/Database.html#method-i-translator","()","<p>Return the type translator employed by this database instance. Each database instance has its own type …\n"],["tweak_default","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-tweak_default","(hash)","<p>Since SQLite 3.3.8, the table_info pragma has returned the default value of the row as a quoted SQL value. …\n"],["type","SQLite3::Value","SQLite3/Value.html#method-i-type","()",""],["type_name","SQLite3::Translator","SQLite3/Translator.html#method-i-type_name","( type )","<p>A convenience method for working with type names. This returns the “base” type name, without …\n"],["types","SQLite3::ResultSet","SQLite3/ResultSet.html#method-i-types","()","<p>Returns the types of the columns returned by this result set.\n"],["types","SQLite3::Statement","SQLite3/Statement.html#method-i-types","()","<p>Return an array of the data types for each column in this statement. Note that this may execute the statement …\n"],["user_cookie","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-user_cookie","()",""],["user_cookie=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-user_cookie-3D","( cookie )",""],["user_version","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-user_version","()",""],["user_version=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-user_version-3D","( version )",""],["vdbe_addoptrace=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-vdbe_addoptrace-3D","( mode )",""],["vdbe_debug=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-vdbe_debug-3D","( mode )",""],["vdbe_listing=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-vdbe_listing-3D","( mode )",""],["vdbe_trace","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-vdbe_trace","()",""],["vdbe_trace=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-vdbe_trace-3D","( mode )",""],["version_compare","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-version_compare","(v1, v2)","<p>Compares two version strings\n"],["wal_autocheckpoint","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-wal_autocheckpoint","()",""],["wal_autocheckpoint=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-wal_autocheckpoint-3D","( mode )",""],["wal_checkpoint","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-wal_checkpoint","()",""],["wal_checkpoint=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-wal_checkpoint-3D","( mode )",""],["writable_schema=","SQLite3::Pragmas","SQLite3/Pragmas.html#method-i-writable_schema-3D","( mode )",""],["API_CHANGES","","API_CHANGES_rdoc.html","","<p>API Changes\n<p>SQLite3::Database#execute only accepts an array for bind parameters.\n<p>SQLite3::ResultSet used …\n"],["CHANGELOG","","CHANGELOG_rdoc.html","","<p>1.4.2\n<p>Travis: Drop unused setting “sudo: false”\n<p>The taint mechanism will be deprecated in Ruby …\n"],["Manifest","","Manifest_txt.html","","<p>.gemtest .travis.yml API_CHANGES.rdoc CHANGELOG.rdoc ChangeLog.cvs Gemfile LICENSE Manifest.txt README.rdoc …\n"],["README","","README_rdoc.html","","<p>SQLite3/Ruby Interface\n<p>github.com/sparklemotion/sqlite3-ruby\n<p>groups.google.com/group/sqlite3-ruby\n"],["Makefile","","ext/sqlite3/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don&#39;t work. V = 0 Q1 = $(V:1=) Q = $(Q1:0=@) …\n"]]}}