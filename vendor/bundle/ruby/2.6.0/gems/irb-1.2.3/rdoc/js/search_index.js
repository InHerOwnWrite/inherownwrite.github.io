var search_data = {"index":{"searchIndex":["binding","irb","(magicfile","abort","cantchangebinding","cantreturntonormalmode","cantshifttomultiirbmode","canvas","color","symbolstate","context","@io;","@workspace.main;","main;","contextextender","extendcommand","changeworkspace","currentworkingworkspace","foreground","fork","help","irbcommand","jobs","kill","load","nop","popworkspace","pushworkspace","require","source","workspaces","extendcommandbundle","obj;","fileinputmethod","frame","frameoverflow","frameunderflow","history","historysavingability","illegalparameter","illegalrcgenerator","inputcompletor","inputmethod","inspector","irb","irbalreadydead","irbloader","irbswitchedtocurrentthread","jobmanager","loadabort","locale","methodextender","nosuchjob","notimplementederror","notifier","abstractnotifier","compositenotifier","errundefinednotifier","errunrecognizedlevel","levelednotifier","nomsgnotifier","outputmethod","notimplementederror","readlineinputmethod","reidlineinputmethod","rubymodel","stdioinputmethod","stdiooutputmethod","undefinedpromptmode","unrecognizedswitch","vec","workspace","object","rubylex","terminatelineinput","xmp","stringinputmethod","<=>()","currentcontext()","jobmanager()","string()","[]()","__evaluate__()","__exit__()","_set_last_value()","assignment_expression?()","auto_indent()","bottom()","bottom()","change_workspace()","check_termination()","clear()","code_around_binding()","colorable?()","colorize()","colorize_code()","conf()","cross()","def_extend_command()","def_extend_command()","def_inspector()","def_notifier()","def_notifier()","def_notifier()","def_post_proc()","def_pre_proc()","default_src_encoding()","delete()","dispatch_seq()","dot()","draw()","dynamic_prompt()","each_localized_path()","each_sublocale()","easter_egg()","encoding()","encoding()","encoding()","encoding()","encoding()","eof?()","eof?()","eof?()","eof?()","eof?()","eval_history=()","eval_input()","evaluate()","exec_if()","exit()","extend_object()","file_input?()","filter_backtrace()","find()","format()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","handle_exception()","history_file()","history_file=()","home_workspace()","init()","init_ruby_model()","initialize_tracer()","insert()","inspect()","inspect()","inspect?()","inspect_colorable?()","inspect_mode=()","inspect_value()","install_alias_method()","install_extend_commands()","install_extend_commands()","irb()","irb()","irb()","irb_abort()","irb_at_exit()","irb_context()","irb_exit()","irb_exit()","irb_level()","irb_load()","irb_load()","irb_require()","keys_with_inspector()","kill()","level=()","level_notifier=()","line()","line()","line()","line()","line0()","load()","load_file()","local_variable_get()","local_variable_set()","main()","main_irb()","main_thread()","n_jobs()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_alias_name()","normalize()","notify?()","notify?()","notify?()","parse_printf_format()","pop_workspace()","pp()","pp()","ppx()","ppx()","print()","print()","print()","print()","print_usage()","printf()","printf()","printf()","printn()","printn()","prompt_mode=()","prompting?()","push_workspace()","puts()","puts()","puts()","puts()","puts()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readline()","real_load()","render_frame()","require()","run()","save_history()","save_history=()","scan()","scan_token()","search()","search_file()","sender()","set_last_value()","signal_handle()","signal_status()","source_file()","start()","sub()","supported?()","suspend_context()","suspend_input_method()","suspend_name()","suspend_workspace()","switch()","thread()","top()","top()","toplevel_load()","trace_func()","use_loader()","use_loader=()","use_loader?()","use_tracer=()","verbose?()","version()","without_circular_ref()","workspaces()","xmp()","help-message","help-message","ruby_logo.aa"],"longSearchIndex":["binding","irb","irb::(magicfile","irb::abort","irb::cantchangebinding","irb::cantreturntonormalmode","irb::cantshifttomultiirbmode","irb::canvas","irb::color","irb::color::symbolstate","irb::context","irb::context::@io;","irb::context::@workspace.main;","irb::context::main;","irb::contextextender","irb::extendcommand","irb::extendcommand::changeworkspace","irb::extendcommand::currentworkingworkspace","irb::extendcommand::foreground","irb::extendcommand::fork","irb::extendcommand::help","irb::extendcommand::irbcommand","irb::extendcommand::jobs","irb::extendcommand::kill","irb::extendcommand::load","irb::extendcommand::nop","irb::extendcommand::popworkspace","irb::extendcommand::pushworkspace","irb::extendcommand::require","irb::extendcommand::source","irb::extendcommand::workspaces","irb::extendcommandbundle","irb::extendcommandbundle::obj;","irb::fileinputmethod","irb::frame","irb::frame::frameoverflow","irb::frame::frameunderflow","irb::history","irb::historysavingability","irb::illegalparameter","irb::illegalrcgenerator","irb::inputcompletor","irb::inputmethod","irb::inspector","irb::irb","irb::irbalreadydead","irb::irbloader","irb::irbswitchedtocurrentthread","irb::jobmanager","irb::loadabort","irb::locale","irb::methodextender","irb::nosuchjob","irb::notimplementederror","irb::notifier","irb::notifier::abstractnotifier","irb::notifier::compositenotifier","irb::notifier::errundefinednotifier","irb::notifier::errunrecognizedlevel","irb::notifier::levelednotifier","irb::notifier::nomsgnotifier","irb::outputmethod","irb::outputmethod::notimplementederror","irb::readlineinputmethod","irb::reidlineinputmethod","irb::rubymodel","irb::stdioinputmethod","irb::stdiooutputmethod","irb::undefinedpromptmode","irb::unrecognizedswitch","irb::vec","irb::workspace","object","rubylex","rubylex::terminatelineinput","xmp","xmp::stringinputmethod","irb::notifier::levelednotifier#<=>()","irb::currentcontext()","irb::jobmanager()","irb::locale#string()","irb::history#[]()","irb::workspace#__evaluate__()","irb::context#__exit__()","irb::context#_set_last_value()","irb::irb#assignment_expression?()","irb::reidlineinputmethod#auto_indent()","irb::frame#bottom()","irb::frame::bottom()","irb::context#change_workspace()","irb::reidlineinputmethod#check_termination()","irb::color::clear()","irb::workspace#code_around_binding()","irb::color::colorable?()","irb::color::colorize()","irb::color::colorize_code()","irb::conf()","irb::vec#cross()","irb::contextextender::def_extend_command()","irb::extendcommandbundle::def_extend_command()","irb::inspector::def_inspector()","irb::notifier::def_notifier()","irb::notifier#def_notifier()","irb::notifier::compositenotifier#def_notifier()","irb::methodextender#def_post_proc()","irb::methodextender#def_pre_proc()","irb::default_src_encoding()","irb::jobmanager#delete()","irb::color::dispatch_seq()","irb::vec#dot()","irb::canvas#draw()","irb::reidlineinputmethod#dynamic_prompt()","irb::locale#each_localized_path()","irb::locale#each_sublocale()","irb::easter_egg()","irb::fileinputmethod#encoding()","irb::locale#encoding()","irb::readlineinputmethod#encoding()","irb::reidlineinputmethod#encoding()","irb::stdioinputmethod#encoding()","irb::fileinputmethod#eof?()","irb::readlineinputmethod#eof?()","irb::reidlineinputmethod#eof?()","irb::stdioinputmethod#eof?()","xmp::stringinputmethod#eof?()","irb::context#eval_history=()","irb::irb#eval_input()","irb::workspace#evaluate()","irb::notifier::abstractnotifier#exec_if()","irb::context#exit()","irb::extendcommandbundle::extend_object()","irb::context#file_input?()","irb::workspace#filter_backtrace()","irb::locale#find()","irb::locale#format()","irb::fileinputmethod#gets()","irb::inputmethod#gets()","irb::locale#gets()","irb::readlineinputmethod#gets()","irb::reidlineinputmethod#gets()","irb::stdioinputmethod#gets()","xmp::stringinputmethod#gets()","irb::irb#handle_exception()","irb::context#history_file()","irb::context#history_file=()","irb::context#home_workspace()","irb::inspector#init()","irb::rubymodel#init_ruby_model()","irb::initialize_tracer()","irb::jobmanager#insert()","irb::irb#inspect()","irb::jobmanager#inspect()","irb::context#inspect?()","irb::color::inspect_colorable?()","irb::context#inspect_mode=()","irb::inspector#inspect_value()","irb::extendcommandbundle#install_alias_method()","irb::contextextender::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","binding#irb()","irb::irb()","irb::jobmanager#irb()","irb::irb_abort()","irb::irb_at_exit()","irb::extendcommandbundle#irb_context()","irb::irb_exit()","irb::extendcommandbundle#irb_exit()","irb::context#irb_level()","irb::extendcommandbundle#irb_load()","irb::irbloader#irb_load()","irb::extendcommandbundle#irb_require()","irb::inspector::keys_with_inspector()","irb::jobmanager#kill()","irb::notifier::compositenotifier#level=()","irb::notifier::compositenotifier#level_notifier=()","irb::canvas#line()","irb::readlineinputmethod#line()","irb::reidlineinputmethod#line()","irb::stdioinputmethod#line()","irb::canvas#line0()","irb::locale#load()","irb::irbloader#load_file()","irb::workspace#local_variable_get()","irb::workspace#local_variable_set()","irb::context#main()","irb::jobmanager#main_irb()","irb::jobmanager#main_thread()","irb::jobmanager#n_jobs()","irb::canvas::new()","irb::color::symbolstate::new()","irb::context::new()","irb::fileinputmethod::new()","irb::frame::new()","irb::frame::frameoverflow::new()","irb::frame::frameunderflow::new()","irb::inputmethod::new()","irb::inspector::new()","irb::irb::new()","irb::jobmanager::new()","irb::locale::new()","irb::notifier::abstractnotifier::new()","irb::notifier::compositenotifier::new()","irb::notifier::errundefinednotifier::new()","irb::notifier::errunrecognizedlevel::new()","irb::notifier::levelednotifier::new()","irb::notifier::nomsgnotifier::new()","irb::outputmethod::notimplementederror::new()","irb::readlineinputmethod::new()","irb::reidlineinputmethod::new()","irb::rubymodel::new()","irb::stdioinputmethod::new()","irb::vec::new()","irb::workspace::new()","xmp::new()","xmp::stringinputmethod::new()","irb::methodextender#new_alias_name()","irb::vec#normalize()","irb::notifier::abstractnotifier#notify?()","irb::notifier::levelednotifier#notify?()","irb::notifier::nomsgnotifier#notify?()","irb::outputmethod#parse_printf_format()","irb::context#pop_workspace()","irb::notifier::abstractnotifier#pp()","irb::outputmethod#pp()","irb::notifier::abstractnotifier#ppx()","irb::outputmethod#ppx()","irb::locale#print()","irb::notifier::abstractnotifier#print()","irb::outputmethod#print()","irb::stdiooutputmethod#print()","irb::print_usage()","irb::locale#printf()","irb::notifier::abstractnotifier#printf()","irb::outputmethod#printf()","irb::notifier::abstractnotifier#printn()","irb::outputmethod#printn()","irb::context#prompt_mode=()","irb::context#prompting?()","irb::context#push_workspace()","irb::locale#puts()","irb::notifier::abstractnotifier#puts()","irb::outputmethod#puts()","xmp#puts()","xmp::stringinputmethod#puts()","irb::inputmethod#readable_after_eof?()","irb::readlineinputmethod#readable_after_eof?()","irb::reidlineinputmethod#readable_after_eof?()","irb::stdioinputmethod#readable_after_eof?()","irb::locale#readline()","irb::locale#real_load()","irb::rubymodel#render_frame()","irb::locale#require()","irb::irb#run()","irb::context#save_history()","irb::context#save_history=()","irb::color::scan()","irb::color::symbolstate#scan_token()","irb::jobmanager#search()","irb::locale#search_file()","irb::frame::sender()","irb::context#set_last_value()","irb::irb#signal_handle()","irb::irb#signal_status()","irb::irbloader#source_file()","irb::start()","irb::vec#sub()","irb::color::supported?()","irb::irb#suspend_context()","irb::irb#suspend_input_method()","irb::irb#suspend_name()","irb::irb#suspend_workspace()","irb::jobmanager#switch()","irb::jobmanager#thread()","irb::frame#top()","irb::frame::top()","irb::locale#toplevel_load()","irb::frame#trace_func()","irb::context#use_loader()","irb::context#use_loader=()","irb::context#use_loader?()","irb::context#use_tracer=()","irb::context#verbose?()","irb::version()","irb::color::without_circular_ref()","irb::context#workspaces()","object#xmp()","","",""],"info":[["Binding","","Binding.html","",""],["IRB","","IRB.html","","<p>IRB stands for “interactive Ruby” and is a tool to interactively execute Ruby expressions read …\n"],["IRB::(MagicFile","","IRB/(MagicFile.html","",""],["IRB::Abort","","IRB/Abort.html","","<p>An exception raised by IRB.irb_abort\n"],["IRB::CantChangeBinding","","IRB/CantChangeBinding.html","",""],["IRB::CantReturnToNormalMode","","IRB/CantReturnToNormalMode.html","",""],["IRB::CantShiftToMultiIrbMode","","IRB/CantShiftToMultiIrbMode.html","",""],["IRB::Canvas","","IRB/Canvas.html","",""],["IRB::Color","","IRB/Color.html","",""],["IRB::Color::SymbolState","","IRB/Color/SymbolState.html","","<p>A class to manage a state to know whether the current token is for Symbol or not.\n"],["IRB::Context","","IRB/Context.html","","<p>A class that wraps the current state of the irb session, including the configuration of IRB.conf.\n"],["IRB::Context::@io;","","IRB/Context/@io;.html","",""],["IRB::Context::@workspace.main;","","IRB/Context/@workspace.main;.html","",""],["IRB::Context::main;","","IRB/Context/main;.html","",""],["IRB::ContextExtender","","IRB/ContextExtender.html","","<p>Extends methods for the Context module\n"],["IRB::ExtendCommand","","IRB/ExtendCommand.html","",""],["IRB::ExtendCommand::ChangeWorkspace","","IRB/ExtendCommand/ChangeWorkspace.html","",""],["IRB::ExtendCommand::CurrentWorkingWorkspace","","IRB/ExtendCommand/CurrentWorkingWorkspace.html","",""],["IRB::ExtendCommand::Foreground","","IRB/ExtendCommand/Foreground.html","",""],["IRB::ExtendCommand::Fork","","IRB/ExtendCommand/Fork.html","",""],["IRB::ExtendCommand::Help","","IRB/ExtendCommand/Help.html","",""],["IRB::ExtendCommand::IrbCommand","","IRB/ExtendCommand/IrbCommand.html","",""],["IRB::ExtendCommand::Jobs","","IRB/ExtendCommand/Jobs.html","",""],["IRB::ExtendCommand::Kill","","IRB/ExtendCommand/Kill.html","",""],["IRB::ExtendCommand::Load","","IRB/ExtendCommand/Load.html","",""],["IRB::ExtendCommand::Nop","","IRB/ExtendCommand/Nop.html","",""],["IRB::ExtendCommand::PopWorkspace","","IRB/ExtendCommand/PopWorkspace.html","",""],["IRB::ExtendCommand::PushWorkspace","","IRB/ExtendCommand/PushWorkspace.html","",""],["IRB::ExtendCommand::Require","","IRB/ExtendCommand/Require.html","",""],["IRB::ExtendCommand::Source","","IRB/ExtendCommand/Source.html","",""],["IRB::ExtendCommand::Workspaces","","IRB/ExtendCommand/Workspaces.html","",""],["IRB::ExtendCommandBundle","","IRB/ExtendCommandBundle.html","","<p>Installs the default irb extensions command bundle.\n"],["IRB::ExtendCommandBundle::obj;","","IRB/ExtendCommandBundle/obj;.html","",""],["IRB::FileInputMethod","","IRB/FileInputMethod.html","","<p>Use a File for IO with irb, see InputMethod\n"],["IRB::Frame","","IRB/Frame.html","",""],["IRB::Frame::FrameOverflow","","IRB/Frame/FrameOverflow.html","",""],["IRB::Frame::FrameUnderflow","","IRB/Frame/FrameUnderflow.html","",""],["IRB::History","","IRB/History.html","","<p>Represents history of results of previously evaluated commands.\n<p>Available via <code>__</code> variable, only if <code>IRB.conf[:EVAL_HISTORY]</code> …\n"],["IRB::HistorySavingAbility","","IRB/HistorySavingAbility.html","",""],["IRB::IllegalParameter","","IRB/IllegalParameter.html","",""],["IRB::IllegalRCGenerator","","IRB/IllegalRCGenerator.html","",""],["IRB::InputCompletor","","IRB/InputCompletor.html","",""],["IRB::InputMethod","","IRB/InputMethod.html","",""],["IRB::Inspector","","IRB/Inspector.html","","<p>An irb inspector\n<p>In order to create your own custom inspector there are two things you should be aware …\n"],["IRB::Irb","","IRB/Irb.html","",""],["IRB::IrbAlreadyDead","","IRB/IrbAlreadyDead.html","",""],["IRB::IrbLoader","","IRB/IrbLoader.html","","<p>Provides a few commands for loading files within an irb session.\n<p>See ExtendCommandBundle for more information. …\n"],["IRB::IrbSwitchedToCurrentThread","","IRB/IrbSwitchedToCurrentThread.html","",""],["IRB::JobManager","","IRB/JobManager.html","",""],["IRB::LoadAbort","","IRB/LoadAbort.html","","<p>Raised in the event of an exception in a file loaded from an Irb session\n"],["IRB::Locale","","IRB/Locale.html","",""],["IRB::MethodExtender","","IRB/MethodExtender.html","","<p>A convenience module for extending Ruby methods.\n"],["IRB::NoSuchJob","","IRB/NoSuchJob.html","",""],["IRB::NotImplementedError","","IRB/NotImplementedError.html","",""],["IRB::Notifier","","IRB/Notifier.html","","<p>An output formatter used internally by the lexer.\n"],["IRB::Notifier::AbstractNotifier","","IRB/Notifier/AbstractNotifier.html","","<p>An abstract class, or superclass, for CompositeNotifier and LeveledNotifier to inherit. It provides several …\n"],["IRB::Notifier::CompositeNotifier","","IRB/Notifier/CompositeNotifier.html","","<p>A class that can be used to create a group of notifier objects with the intent of representing a leveled …\n"],["IRB::Notifier::ErrUndefinedNotifier","","IRB/Notifier/ErrUndefinedNotifier.html","",""],["IRB::Notifier::ErrUnrecognizedLevel","","IRB/Notifier/ErrUnrecognizedLevel.html","",""],["IRB::Notifier::LeveledNotifier","","IRB/Notifier/LeveledNotifier.html","","<p>A leveled notifier is comparable to the composite group from CompositeNotifier#notifiers.\n"],["IRB::Notifier::NoMsgNotifier","","IRB/Notifier/NoMsgNotifier.html","","<p>NoMsgNotifier is a LeveledNotifier that&#39;s used as the default notifier when creating a new CompositeNotifier …\n"],["IRB::OutputMethod","","IRB/OutputMethod.html","","<p>An abstract output class for IO in irb. This is mainly used internally by IRB::Notifier. You can define …\n"],["IRB::OutputMethod::NotImplementedError","","IRB/OutputMethod/NotImplementedError.html","",""],["IRB::ReadlineInputMethod","","IRB/ReadlineInputMethod.html","",""],["IRB::ReidlineInputMethod","","IRB/ReidlineInputMethod.html","",""],["IRB::RubyModel","","IRB/RubyModel.html","",""],["IRB::StdioInputMethod","","IRB/StdioInputMethod.html","",""],["IRB::StdioOutputMethod","","IRB/StdioOutputMethod.html","","<p>A standard output printer\n"],["IRB::UndefinedPromptMode","","IRB/UndefinedPromptMode.html","",""],["IRB::UnrecognizedSwitch","","IRB/UnrecognizedSwitch.html","",""],["IRB::Vec","","IRB/Vec.html","",""],["IRB::WorkSpace","","IRB/WorkSpace.html","",""],["Object","","Object.html","",""],["RubyLex","","RubyLex.html","",""],["RubyLex::TerminateLineInput","","RubyLex/TerminateLineInput.html","",""],["XMP","","XMP.html","","<p>An example printer for irb.\n<p>It&#39;s much like the standard library PrettyPrint, that shows the value …\n"],["XMP::StringInputMethod","","XMP/StringInputMethod.html","","<p>A custom InputMethod class used by XMP for evaluating string io.\n"],["<=>","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-3C-3D-3E","(other)","<p>Compares the level of this notifier object with the given <code>other</code> notifier.\n<p>See the Comparable module for …\n"],["CurrentContext","IRB","IRB.html#method-c-CurrentContext","()","<p>The current IRB::Context of the session, see IRB.conf\n\n<pre>irb\nirb(main):001:0&gt; IRB.CurrentContext.irb_name ...</pre>\n"],["JobManager","IRB","IRB.html#method-c-JobManager","()","<p>The current JobManager in the session\n"],["String","IRB::Locale","IRB/Locale.html#method-i-String","(mes)",""],["[]","IRB::History","IRB/History.html#method-i-5B-5D","(idx)","<p>Get one item of the content (both positive and negative indexes work).\n"],["__evaluate__","IRB::WorkSpace","IRB/WorkSpace.html#method-i-__evaluate__","(context, statements, file = nil, line = nil)",""],["__exit__","IRB::Context","IRB/Context.html#method-i-__exit__","(ret = 0)",""],["_set_last_value","IRB::Context","IRB/Context.html#method-i-_set_last_value","(value)","<p>See #set_last_value\n"],["assignment_expression?","IRB::Irb","IRB/Irb.html#method-i-assignment_expression-3F","(line)",""],["auto_indent","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-auto_indent","(&block)",""],["bottom","IRB::Frame","IRB/Frame.html#method-i-bottom","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the first frame initialized.\n<p>Raises FrameOverflow …\n"],["bottom","IRB::Frame","IRB/Frame.html#method-c-bottom","(n = 0)","<p>Convenience method for Frame#bottom\n"],["change_workspace","IRB::Context","IRB/Context.html#method-i-change_workspace","(*_main)","<p>Changes the current workspace to given object or binding.\n<p>If the optional argument is omitted, the workspace …\n"],["check_termination","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-check_termination","(&block)",""],["clear","IRB::Color","IRB/Color.html#method-c-clear","()",""],["code_around_binding","IRB::WorkSpace","IRB/WorkSpace.html#method-i-code_around_binding","()",""],["colorable?","IRB::Color","IRB/Color.html#method-c-colorable-3F","()",""],["colorize","IRB::Color","IRB/Color.html#method-c-colorize","(text, seq)",""],["colorize_code","IRB::Color","IRB/Color.html#method-c-colorize_code","(code, complete: true)","<p>If `complete` is false (code is incomplete), this does not warn compile_error. This option is needed …\n"],["conf","IRB","IRB.html#method-c-conf","()","<p>Displays current configuration.\n<p>Modifying the configuration is achieved by sending a message to IRB.conf …\n"],["cross","IRB::Vec","IRB/Vec.html#method-i-cross","(other)",""],["def_extend_command","IRB::ContextExtender","IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)","<p>Evaluate the given <code>command</code> from the given <code>load_file</code> on the Context module.\n<p>Will also define any given …\n"],["def_extend_command","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>Evaluate the given <code>cmd_name</code> on the given <code>cmd_class</code> Class.\n<p>Will also define any given <code>aliases</code> for the method. …\n"],["def_inspector","IRB::Inspector","IRB/Inspector.html#method-c-def_inspector","(key, arg=nil, &block)","<p>Example\n\n<pre>Inspector.def_inspector(key, init_p=nil){|v| v.inspect}\nInspector.def_inspector([key1,..], init_p=nil){|v| ...</pre>\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-c-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with the given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-i-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with the given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-def_notifier","(level, prefix = \"\")","<p>Creates a new LeveledNotifier in the composite #notifiers group.\n<p>The given <code>prefix</code> will be assigned to …\n"],["def_post_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_post_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a postfix call to the given <code>extend_method</code>.\n"],["def_pre_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_pre_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a prefix call to the given <code>extend_method</code>.\n"],["default_src_encoding","IRB","IRB.html#method-c-default_src_encoding","()",""],["delete","IRB::JobManager","IRB/JobManager.html#method-i-delete","(key)","<p>Deletes the job at the given <code>key</code>.\n"],["dispatch_seq","IRB::Color","IRB/Color.html#method-c-dispatch_seq","(token, expr, str, in_symbol:)",""],["dot","IRB::Vec","IRB/Vec.html#method-i-dot","(other)",""],["draw","IRB::Canvas","IRB/Canvas.html#method-i-draw","()",""],["dynamic_prompt","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-dynamic_prompt","(&block)",""],["each_localized_path","IRB::Locale","IRB/Locale.html#method-i-each_localized_path","(dir, file)",""],["each_sublocale","IRB::Locale","IRB/Locale.html#method-i-each_sublocale","()",""],["easter_egg","IRB","IRB.html#method-c-easter_egg","(type = nil)",""],["encoding","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::Locale","IRB/Locale.html#method-i-encoding","()",""],["encoding","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["eof?","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-eof-3F","()","<p>Whether there are any expressions left in this printer.\n"],["eval_history=","IRB::Context","IRB/Context.html#method-i-eval_history-3D","(no)","<p>Sets command result history limit. Default value is set from <code>IRB.conf[:EVAL_HISTORY]</code>.\n<p><code>no</code> is an Integer …\n"],["eval_input","IRB::Irb","IRB/Irb.html#method-i-eval_input","()","<p>Evaluates input for this session.\n"],["evaluate","IRB::WorkSpace","IRB/WorkSpace.html#method-i-evaluate","(context, statements, file = nil, line = nil)","<p>Evaluate the context of this workspace and use the Tracer library to output the exact lines of code are …\n"],["exec_if","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-exec_if","()","<p>Execute the given block if notifications are enabled.\n"],["exit","IRB::Context","IRB/Context.html#method-i-exit","(ret = 0)","<p>Exits the current session, see IRB.irb_exit\n"],["extend_object","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)","<p>Installs alias methods for the default irb commands on the given object using #install_alias_method. …\n"],["file_input?","IRB::Context","IRB/Context.html#method-i-file_input-3F","()","<p>Whether #io uses a File for the <code>input_method</code> passed when creating the current context, see ::new\n"],["filter_backtrace","IRB::WorkSpace","IRB/WorkSpace.html#method-i-filter_backtrace","(bt)","<p>error message manipulator\n"],["find","IRB::Locale","IRB/Locale.html#method-i-find","(file , paths = $:)",""],["format","IRB::Locale","IRB/Locale.html#method-i-format","(*opts)",""],["gets","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::InputMethod","IRB/InputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::Locale","IRB/Locale.html#method-i-gets","(*rs)",""],["gets","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-gets","()","<p>Reads the next expression from this printer.\n<p>See IO#gets for more information.\n"],["handle_exception","IRB::Irb","IRB/Irb.html#method-i-handle_exception","(exc)",""],["history_file","IRB::Context","IRB/Context.html#method-i-history_file","()","<p>A copy of the default <code>IRB.conf[:HISTORY_FILE]</code>\n"],["history_file=","IRB::Context","IRB/Context.html#method-i-history_file-3D","(hist)","<p>Set <code>IRB.conf[:HISTORY_FILE]</code> to the given <code>hist</code>.\n"],["home_workspace","IRB::Context","IRB/Context.html#method-i-home_workspace","()","<p>Inherited from <code>TOPLEVEL_BINDING</code>.\n"],["init","IRB::Inspector","IRB/Inspector.html#method-i-init","()","<p>Proc to call when the inspector is activated, good for requiring dependent libraries.\n"],["init_ruby_model","IRB::RubyModel","IRB/RubyModel.html#method-i-init_ruby_model","()",""],["initialize_tracer","IRB","IRB.html#method-c-initialize_tracer","()","<p>initialize tracing function\n"],["insert","IRB::JobManager","IRB/JobManager.html#method-i-insert","(irb)","<p>Add the given <code>irb</code> session to the jobs Array.\n"],["inspect","IRB::Irb","IRB/Irb.html#method-i-inspect","()","<p>Outputs the local variables to this current session, including #signal_status and #context, using IRB::Locale …\n"],["inspect","IRB::JobManager","IRB/JobManager.html#method-i-inspect","()","<p>Outputs a list of jobs, see the irb command <code>irb_jobs</code>, or <code>jobs</code>.\n"],["inspect?","IRB::Context","IRB/Context.html#method-i-inspect-3F","()","<p>Whether #inspect_mode is set or not, see #inspect_mode= for more detail.\n"],["inspect_colorable?","IRB::Color","IRB/Color.html#method-c-inspect_colorable-3F","(obj, seen: {}.compare_by_identity)",""],["inspect_mode=","IRB::Context","IRB/Context.html#method-i-inspect_mode-3D","(opt)","<p>Specifies the inspect mode with <code>opt</code>:\n<p><code>true</code> &mdash; display <code>inspect</code>\n<p><code>false</code> &mdash; display <code>to_s</code>\n"],["inspect_value","IRB::Inspector","IRB/Inspector.html#method-i-inspect_value","(v)","<p>Proc to call when the input is evaluated and output in irb.\n"],["install_alias_method","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>Installs alias methods for the default irb commands, see ::install_extend_commands.\n"],["install_extend_commands","IRB::ContextExtender","IRB/ContextExtender.html#method-c-install_extend_commands","()","<p>Installs the default context extensions as irb commands:\n<p>Context#eval_history= &mdash; <code>irb/ext/history.rb</code>\n<p>Context#use_tracer= … &mdash; "],["install_extend_commands","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()","<p>Installs the default irb commands:\n<p><code>irb_current_working_workspace</code> &mdash; Context#main\n<p><code>irb_change_workspace</code> &mdash; Context#change_workspace …\n"],["irb","Binding","Binding.html#method-i-irb","()","<p>Opens an IRB session where <code>binding.irb</code> is called which allows for interactive debugging. You can call …\n"],["irb","IRB","IRB.html#method-c-irb","(file = nil, *main)","<p>Creates a new IRB session, see Irb.new.\n<p>The optional <code>file</code> argument is given to Context.new, along with …\n"],["irb","IRB::JobManager","IRB/JobManager.html#method-i-irb","(key)","<p>Returns the irb session for the given <code>key</code> object, see #search for more information.\n"],["irb_abort","IRB","IRB.html#method-c-irb_abort","(irb, exception = Abort)","<p>Aborts then interrupts irb.\n<p>Will raise an Abort exception, or the given <code>exception</code>.\n"],["irb_at_exit","IRB","IRB.html#method-c-irb_at_exit","()","<p>Calls each event hook of IRB.conf when the current session quits.\n"],["irb_context","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_context","()","<p>Displays current configuration.\n<p>Modifying the configuration is achieved by sending a message to IRB.conf …\n"],["irb_exit","IRB","IRB.html#method-c-irb_exit","(irb, ret)","<p>Quits irb\n"],["irb_exit","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)","<p>Quits the current irb context\n<p><code>ret</code> is the optional signal or message to send to Context#exit\n<p>Same as <code>IRB.CurrentContext.exit</code> …\n"],["irb_level","IRB::Context","IRB/Context.html#method-i-irb_level","()","<p>Size of the current WorkSpace stack\n"],["irb_load","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)","<p>Loads the given file similarly to Kernel#load, see IrbLoader#irb_load\n"],["irb_load","IRB::IrbLoader","IRB/IrbLoader.html#method-i-irb_load","(fn, priv = nil)","<p>Loads the given file similarly to Kernel#load\n"],["irb_require","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)","<p>Loads the given file similarly to Kernel#require\n"],["keys_with_inspector","IRB::Inspector","IRB/Inspector.html#method-c-keys_with_inspector","(inspector)","<p>Determines the inspector to use where <code>inspector</code> is one of the keys passed during inspector definition. …\n"],["kill","IRB::JobManager","IRB/JobManager.html#method-i-kill","(*keys)","<p>Terminates the irb sessions specified by the given <code>keys</code>.\n<p>Raises an IrbAlreadyDead exception if one of …\n"],["level=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level-3D","(value)",""],["level_notifier=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level_notifier-3D","(value)","<p>Sets the leveled notifier for this object.\n<p>When the given <code>value</code> is an instance of AbstractNotifier, #level_notifier …\n"],["line","IRB::Canvas","IRB/Canvas.html#method-i-line","((x1, y1), (x2, y2))",""],["line","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line0","IRB::Canvas","IRB/Canvas.html#method-i-line0","(p1, p2)",""],["load","IRB::Locale","IRB/Locale.html#method-i-load","(file, priv=nil)",""],["load_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-load_file","(path, priv = nil)","<p>Loads the given file in the current session&#39;s context and evaluates it.\n<p>See Irb#suspend_input_method …\n"],["local_variable_get","IRB::WorkSpace","IRB/WorkSpace.html#method-i-local_variable_get","(name)",""],["local_variable_set","IRB::WorkSpace","IRB/WorkSpace.html#method-i-local_variable_set","(name, value)",""],["main","IRB::Context","IRB/Context.html#method-i-main","()","<p>The top-level workspace, see WorkSpace#main\n"],["main_irb","IRB::JobManager","IRB/JobManager.html#method-i-main_irb","()","<p>Returns the top level irb session.\n"],["main_thread","IRB::JobManager","IRB/JobManager.html#method-i-main_thread","()","<p>Returns the top level thread.\n"],["n_jobs","IRB::JobManager","IRB/JobManager.html#method-i-n_jobs","()","<p>The total number of irb sessions, used to set <code>irb_name</code> of the current Context.\n"],["new","IRB::Canvas","IRB/Canvas.html#method-c-new","((h, w))",""],["new","IRB::Color::SymbolState","IRB/Color/SymbolState.html#method-c-new","()",""],["new","IRB::Context","IRB/Context.html#method-c-new","(irb, workspace = nil, input_method = nil)","<p>Creates a new IRB context.\n<p>The optional <code>input_method</code> argument:\n<p><code>nil</code> &mdash; uses stdin or Reidline or Readline\n"],["new","IRB::FileInputMethod","IRB/FileInputMethod.html#method-c-new","(file)","<p>Creates a new input method object\n"],["new","IRB::Frame","IRB/Frame.html#method-c-new","()","<p>Creates a new stack frame\n"],["new","IRB::Frame::FrameOverflow","IRB/Frame/FrameOverflow.html#method-c-new","()",""],["new","IRB::Frame::FrameUnderflow","IRB/Frame/FrameUnderflow.html#method-c-new","()",""],["new","IRB::InputMethod","IRB/InputMethod.html#method-c-new","(file = STDIN_FILE_NAME)","<p>Creates a new input method object\n"],["new","IRB::Inspector","IRB/Inspector.html#method-c-new","(inspect_proc, init_proc = nil)","<p>Creates a new inspector object, using the given <code>inspect_proc</code> when output return values in irb.\n"],["new","IRB::Irb","IRB/Irb.html#method-c-new","(workspace = nil, input_method = nil)","<p>Creates a new irb session\n"],["new","IRB::JobManager","IRB/JobManager.html#method-c-new","()","<p>Creates a new JobManager object\n"],["new","IRB::Locale","IRB/Locale.html#method-c-new","(locale = nil)",""],["new","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-c-new","(prefix, base_notifier)","<p>Creates a new Notifier object\n"],["new","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-c-new","(prefix, base_notifier)","<p>Create a new composite notifier object with the given <code>prefix</code>, and <code>base_notifier</code> to use for output.\n"],["new","IRB::Notifier::ErrUndefinedNotifier","IRB/Notifier/ErrUndefinedNotifier.html#method-c-new","(val)",""],["new","IRB::Notifier::ErrUnrecognizedLevel","IRB/Notifier/ErrUnrecognizedLevel.html#method-c-new","(val)",""],["new","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-c-new","(base, level, prefix)","<p>Create a new leveled notifier with the given <code>base</code>, and <code>prefix</code> to send to AbstractNotifier.new\n<p>The given …\n"],["new","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-c-new","()","<p>Creates a new notifier that should not be used to output messages.\n"],["new","IRB::OutputMethod::NotImplementedError","IRB/OutputMethod/NotImplementedError.html#method-c-new","(val)",""],["new","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Readline\n"],["new","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Readline\n"],["new","IRB::RubyModel","IRB/RubyModel.html#method-c-new","()",""],["new","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-c-new","()","<p>Creates a new input method object\n"],["new","IRB::Vec","IRB/Vec.html#method-c-new","(x, y, z)",""],["new","IRB::WorkSpace","IRB/WorkSpace.html#method-c-new","(*main)","<p>Creates a new workspace.\n<p>set self to main if specified, otherwise inherit main from TOPLEVEL_BINDING. …\n"],["new","XMP","XMP.html#method-c-new","(bind = nil)","<p>Creates a new XMP object.\n<p>The top-level binding or, optional <code>bind</code> parameter will be used when creating …\n"],["new","XMP::StringInputMethod","XMP/StringInputMethod.html#method-c-new","()","<p>Creates a new StringInputMethod object\n"],["new_alias_name","IRB::MethodExtender","IRB/MethodExtender.html#method-i-new_alias_name","(name, prefix = \"__alias_of__\", postfix = \"__\")","<p>Returns a unique method name to use as an alias for the given <code>name</code>.\n<p>Usually returns <code>#{prefix}#{name}#{postfix}&lt;num&gt;</code> …\n"],["normalize","IRB::Vec","IRB/Vec.html#method-i-normalize","()",""],["notify?","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-notify-3F","()","<p>A wrapper method used to determine whether notifications are enabled.\n<p>Defaults to <code>true</code>.\n"],["notify?","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-notify-3F","()","<p>Whether to output messages to the output method, depending on the level of this notifier object.\n"],["notify?","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-i-notify-3F","()","<p>Ensures notifications are ignored, see AbstractNotifier#notify? for more information.\n"],["parse_printf_format","IRB::OutputMethod","IRB/OutputMethod.html#method-i-parse_printf_format","(format, opts)","<p>Returns an array of the given <code>format</code> and <code>opts</code> to be used by Kernel#sprintf, if there was a successful …\n"],["pop_workspace","IRB::Context","IRB/Context.html#method-i-pop_workspace","()","<p>Removes the last element from the current #workspaces stack and returns it, or <code>nil</code> if the current workspace …\n"],["pp","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-pp","(*objs)","<p>Same as #ppx, except it uses the #prefix given during object initialization. See OutputMethod#ppx for …\n"],["pp","IRB::OutputMethod","IRB/OutputMethod.html#method-i-pp","(*objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each.\n<p>See #puts for more detail.\n"],["ppx","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-ppx","(prefix, *objs)","<p>Same as #pp, except it concatenates the given <code>prefix</code> with the #prefix given during object initialization. …\n"],["ppx","IRB::OutputMethod","IRB/OutputMethod.html#method-i-ppx","(prefix, *objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each and appending the given <code>prefix</code>.\n<p>See #puts for more …\n"],["print","IRB::Locale","IRB/Locale.html#method-i-print","(*opts)",""],["print","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-print","(*opts)","<p>See OutputMethod#print for more detail.\n"],["print","IRB::OutputMethod","IRB/OutputMethod.html#method-i-print","(*opts)","<p>Open this method to implement your own output method, raises a NotImplementedError if you don&#39;t define …\n"],["print","IRB::StdioOutputMethod","IRB/StdioOutputMethod.html#method-i-print","(*opts)","<p>Prints the given <code>opts</code> to standard output, see IO#print for more information.\n"],["print_usage","IRB","IRB.html#method-c-print_usage","()","<p>Outputs the irb help message, see IRB@Command+line+options.\n"],["printf","IRB::Locale","IRB/Locale.html#method-i-printf","(*opts)",""],["printf","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printf","(format, *opts)","<p>See OutputMethod#printf for more detail.\n"],["printf","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printf","(format, *opts)","<p>Extends IO#printf to format the given <code>opts</code> for Kernel#sprintf using #parse_printf_format\n"],["printn","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printn","(*opts)","<p>See OutputMethod#printn for more detail.\n"],["printn","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printn","(*opts)","<p>Prints the given <code>opts</code>, with a newline delimiter.\n"],["prompt_mode=","IRB::Context","IRB/Context.html#method-i-prompt_mode-3D","(mode)","<p>Sets the <code>mode</code> of the prompt in this context.\n<p>See IRB@Customizing+the+IRB+Prompt for more information. …\n"],["prompting?","IRB::Context","IRB/Context.html#method-i-prompting-3F","()","<p>Whether #verbose? is <code>true</code>, and <code>input_method</code> is either StdioInputMethod or ReidlineInputMethod or ReadlineInputMethod …\n"],["push_workspace","IRB::Context","IRB/Context.html#method-i-push_workspace","(*_main)","<p>Creates a new workspace with the given object or binding, and appends it onto the current #workspaces …\n"],["puts","IRB::Locale","IRB/Locale.html#method-i-puts","(*opts)",""],["puts","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-puts","(*objs)","<p>See OutputMethod#puts for more detail.\n"],["puts","IRB::OutputMethod","IRB/OutputMethod.html#method-i-puts","(*objs)","<p>Calls #print on each element in the given <code>objs</code>, followed by a newline character.\n"],["puts","XMP","XMP.html#method-i-puts","(exps)","<p>Evaluates the given <code>exps</code>, for example:\n\n<pre>require &#39;irb/xmp&#39;\nx = XMP.new\n\nx.puts &#39;{:a =&gt; 1, :b =&gt; 2, :c =&gt; ...</pre>\n"],["puts","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-puts","(exps)","<p>Concatenates all expressions in this printer, separated by newlines.\n<p>An Encoding::CompatibilityError is …\n"],["readable_after_eof?","IRB::InputMethod","IRB/InputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readline","IRB::Locale","IRB/Locale.html#method-i-readline","(*rs)",""],["real_load","IRB::Locale","IRB/Locale.html#method-i-real_load","(path, priv)",""],["render_frame","IRB::RubyModel","IRB/RubyModel.html#method-i-render_frame","(i)",""],["require","IRB::Locale","IRB/Locale.html#method-i-require","(file, priv = nil)",""],["run","IRB::Irb","IRB/Irb.html#method-i-run","(conf = IRB.conf)",""],["save_history","IRB::Context","IRB/Context.html#method-i-save_history","()","<p>A copy of the default <code>IRB.conf[:SAVE_HISTORY]</code>\n"],["save_history=","IRB::Context","IRB/Context.html#method-i-save_history-3D","(val)","<p>Sets <code>IRB.conf[:SAVE_HISTORY]</code> to the given <code>val</code> and calls #init_save_history with this context.\n<p>Will store …\n"],["scan","IRB::Color","IRB/Color.html#method-c-scan","(code, allow_last_error:)",""],["scan_token","IRB::Color::SymbolState","IRB/Color/SymbolState.html#method-i-scan_token","(token)","<p>Return true if the token is a part of Symbol.\n"],["search","IRB::JobManager","IRB/JobManager.html#method-i-search","(key)","<p>Returns the associated job for the given <code>key</code>.\n<p>If given an Integer, it will return the <code>key</code> index for the …\n"],["search_file","IRB::Locale","IRB/Locale.html#method-i-search_file","(lib_paths, dir, file)","<p>@param paths load paths in which IRB find a localized file. @param dir directory @param file basename …\n"],["sender","IRB::Frame","IRB/Frame.html#method-c-sender","()","<p>Returns the binding context of the caller from the last frame initialized\n"],["set_last_value","IRB::Context","IRB/Context.html#method-i-set_last_value","(value)","<p>Sets the return value from the last statement evaluated in this context to #last_value.\n"],["signal_handle","IRB::Irb","IRB/Irb.html#method-i-signal_handle","()","<p>Handler for the signal SIGINT, see Kernel#trap for more information.\n"],["signal_status","IRB::Irb","IRB/Irb.html#method-i-signal_status","(status)","<p>Evaluates the given block using the given <code>status</code>.\n"],["source_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-source_file","(path)","<p>Loads a given file in the current session and displays the source lines\n<p>See Irb#suspend_input_method for …\n"],["start","IRB","IRB.html#method-c-start","(ap_path = nil)","<p>Initializes IRB and creates a new Irb.irb object at the <code>TOPLEVEL_BINDING</code>\n"],["sub","IRB::Vec","IRB/Vec.html#method-i-sub","(other)",""],["supported?","IRB::Color","IRB/Color.html#method-c-supported-3F","()","<p>Ripper::Lexer::Elem#state is supported on Ruby 2.5+\n"],["suspend_context","IRB::Irb","IRB/Irb.html#method-i-suspend_context","(context)","<p>Evaluates the given block using the given <code>context</code> as the Context.\n"],["suspend_input_method","IRB::Irb","IRB/Irb.html#method-i-suspend_input_method","(input_method)","<p>Evaluates the given block using the given <code>input_method</code> as the Context#io.\n<p>Used by the irb commands <code>source</code> …\n"],["suspend_name","IRB::Irb","IRB/Irb.html#method-i-suspend_name","(path = nil, name = nil)","<p>Evaluates the given block using the given <code>path</code> as the Context#irb_path and <code>name</code> as the Context#irb_name …\n"],["suspend_workspace","IRB::Irb","IRB/Irb.html#method-i-suspend_workspace","(workspace)","<p>Evaluates the given block using the given <code>workspace</code> as the Context#workspace.\n<p>Used by the irb command …\n"],["switch","IRB::JobManager","IRB/JobManager.html#method-i-switch","(key)","<p>Changes the current active irb session to the given <code>key</code> in the jobs Array.\n<p>Raises an IrbAlreadyDead exception …\n"],["thread","IRB::JobManager","IRB/JobManager.html#method-i-thread","(key)","<p>Returns the thread for the given <code>key</code> object, see #search for more information.\n"],["top","IRB::Frame","IRB/Frame.html#method-i-top","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the last frame initialized.\n<p>Raises FrameUnderflow …\n"],["top","IRB::Frame","IRB/Frame.html#method-c-top","(n = 0)","<p>Convenience method for Frame#top\n"],["toplevel_load","IRB::Locale","IRB/Locale.html#method-i-toplevel_load","(file, priv=nil)",""],["trace_func","IRB::Frame","IRB/Frame.html#method-i-trace_func","(event, file, line, id, binding)","<p>Used by Kernel#set_trace_func to register each event in the call stack\n"],["use_loader","IRB::Context","IRB/Context.html#method-i-use_loader","()","<p>Returns whether <code>irb</code>&#39;s own file reader method is used by <code>load</code>/<code>require</code> or not.\n<p>This mode is globally …\n"],["use_loader=","IRB::Context","IRB/Context.html#method-i-use_loader-3D","(opt)","<p>Sets IRB.conf\n<p>See #use_loader for more information.\n"],["use_loader?","IRB::Context","IRB/Context.html#method-i-use_loader-3F","()",""],["use_tracer=","IRB::Context","IRB/Context.html#method-i-use_tracer-3D","(opt)",""],["verbose?","IRB::Context","IRB/Context.html#method-i-verbose-3F","()","<p>Returns whether messages are displayed or not.\n"],["version","IRB","IRB.html#method-c-version","()","<p>Returns the current version of IRB, including release version and last updated date.\n"],["without_circular_ref","IRB::Color","IRB/Color.html#method-c-without_circular_ref","(obj, seen:, &block)",""],["workspaces","IRB::Context","IRB/Context.html#method-i-workspaces","()","<p>WorkSpaces in the current stack\n"],["xmp","Object","Object.html#method-i-xmp","(exps, bind = nil)","<p>A convenience method that&#39;s only available when the you require the IRB::XMP standard library.\n<p>Creates …\n"],["help-message","","lib/irb/lc/help-message.html","","<p># #   irb/lc/help-message.rb - #       $Release Version: 0.9.6$ #       $Revision$ #       by Keiju ISHITSUKA(keiju@ruby-lang.org) …\n"],["help-message","","lib/irb/lc/ja/help-message.html","","<p>#   irb/lc/ja/help-message.rb - #       $Release Version: 0.9.6$ #       $Revision$ #       by Keiju …\n"],["ruby_logo.aa","","lib/irb/ruby_logo_aa.html","","\n<pre>                                           -+smJYYN?mm-\n                                 HB&quot;BBYT     ...</pre>\n"]]}}