var search_data = {"index":{"searchIndex":["forwardable","singleforwardable","def_delegator()","def_delegator()","def_delegators()","def_delegators()","def_instance_delegator()","def_instance_delegators()","def_single_delegator()","def_single_delegators()","delegate()","delegate()","instance_delegate()","single_delegate()"],"longSearchIndex":["forwardable","singleforwardable","forwardable#def_delegator()","singleforwardable#def_delegator()","forwardable#def_delegators()","singleforwardable#def_delegators()","forwardable#def_instance_delegator()","forwardable#def_instance_delegators()","singleforwardable#def_single_delegator()","singleforwardable#def_single_delegators()","forwardable#delegate()","singleforwardable#delegate()","forwardable#instance_delegate()","singleforwardable#single_delegate()"],"info":[["Forwardable","","Forwardable.html","","<p>The Forwardable module provides delegation of specified methods to a designated object, using the methods …\n"],["SingleForwardable","","SingleForwardable.html","","<p>SingleForwardable can be used to setup delegation at the object level as well.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">printer</span> = <span class=\"ruby-constant\">String</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">printer</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["def_delegator","Forwardable","Forwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegator","SingleForwardable","SingleForwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegators","Forwardable","Forwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_delegators","SingleForwardable","SingleForwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_instance_delegator","Forwardable","Forwardable.html#method-i-def_instance_delegator","(accessor, method, ali = method)","<p>Define <code>method</code> as delegator instance method with an optional alias name <code>ali</code>. Method calls to <code>ali</code> will …\n"],["def_instance_delegators","Forwardable","Forwardable.html#method-i-def_instance_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for using a different name.  …\n"],["def_single_delegator","SingleForwardable","SingleForwardable.html#method-i-def_single_delegator","(accessor, method, ali = method)","<p>Defines a method <em>method</em> which delegates to <em>accessor</em> (i.e. it calls the method of the same name in <em>accessor</em> …\n"],["def_single_delegators","SingleForwardable","SingleForwardable.html#method-i-def_single_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for using a different name.  …\n"],["delegate","Forwardable","Forwardable.html#method-i-delegate","(hash)",""],["delegate","SingleForwardable","SingleForwardable.html#method-i-delegate","(hash)",""],["instance_delegate","Forwardable","Forwardable.html#method-i-instance_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols.  These symbols correspond …\n"],["single_delegate","SingleForwardable","SingleForwardable.html#method-i-single_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols.  These symbols correspond …\n"]]}}