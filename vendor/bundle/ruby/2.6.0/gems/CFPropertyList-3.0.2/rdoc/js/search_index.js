var search_data = {"index":{"searchIndex":["array","cfformaterror","cfplisterror","cfpropertylist","binary","blob","cfarray","cfboolean","cfdata","cfdate","cfdictionary","cfinteger","cfreal","cfstring","cftype","cfuid","libxmlparser","list","nokogirixmlparser","parserinterface","plainparser","rexmlparser","uidfixnum","xmlparserinterface","cftypeerror","enumerator","hash","append_node()","append_node()","append_node()","append_node()","array_to_binary()","ascii_string?()","bool_to_binary()","bytes_needed()","charset_convert()","charset_strlen()","count_object_refs()","data_to_binary()","date_string()","date_to_binary()","decoded_value()","dict_to_binary()","encoded_value()","escape_char()","get_value()","get_value()","get_value()","get_value()","guess()","guess()","import_plain()","import_xml()","import_xml()","import_xml()","int_to_binary()","load()","load()","load()","load()","load()","load()","load()","load_binary()","load_binary_str()","load_plain()","load_plain_str()","load_str()","load_xml()","load_xml_str()","native_types()","native_types()","new()","new()","new()","new()","new()","new()","new_node()","new_node()","new_node()","new_node()","new_text()","new_text()","new_text()","new_text()","num_to_binary()","object_ref_size()","pack_int_array_with_size()","pack_it_with_size()","parse_date()","parsers()","parsers=()","quoted()","read_array()","read_binary()","read_binary_array()","read_binary_data()","read_binary_date()","read_binary_dict()","read_binary_int()","read_binary_null_type()","read_binary_object()","read_binary_object_at()","read_binary_real()","read_binary_string()","read_binary_unicode_string()","read_dict()","read_fd()","read_quoted()","read_unquoted()","real_to_binary()","save()","set_value()","skip_whitespaces()","string_to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_binary()","to_plain()","to_plain()","to_plain()","to_plain()","to_plain()","to_plain()","to_plain()","to_plain()","to_plain()","to_plain()","to_plist()","to_plist()","to_plist()","to_str()","to_str()","to_str()","to_str()","to_str()","to_str()","to_str()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","type_bytes()","uid_to_binary()","unpack_with_size()","readme"],"longSearchIndex":["array","cfformaterror","cfplisterror","cfpropertylist","cfpropertylist::binary","cfpropertylist::blob","cfpropertylist::cfarray","cfpropertylist::cfboolean","cfpropertylist::cfdata","cfpropertylist::cfdate","cfpropertylist::cfdictionary","cfpropertylist::cfinteger","cfpropertylist::cfreal","cfpropertylist::cfstring","cfpropertylist::cftype","cfpropertylist::cfuid","cfpropertylist::libxmlparser","cfpropertylist::list","cfpropertylist::nokogirixmlparser","cfpropertylist::parserinterface","cfpropertylist::plainparser","cfpropertylist::rexmlparser","cfpropertylist::uidfixnum","cfpropertylist::xmlparserinterface","cftypeerror","enumerator","hash","cfpropertylist::libxmlparser#append_node()","cfpropertylist::nokogirixmlparser#append_node()","cfpropertylist::rexmlparser#append_node()","cfpropertylist::xmlparserinterface#append_node()","cfpropertylist::binary#array_to_binary()","cfpropertylist::binary::ascii_string?()","cfpropertylist::binary#bool_to_binary()","cfpropertylist::binary::bytes_needed()","cfpropertylist::binary::charset_convert()","cfpropertylist::binary::charset_strlen()","cfpropertylist::binary#count_object_refs()","cfpropertylist::binary#data_to_binary()","cfpropertylist::cfdate::date_string()","cfpropertylist::binary#date_to_binary()","cfpropertylist::cfdata#decoded_value()","cfpropertylist::binary#dict_to_binary()","cfpropertylist::cfdata#encoded_value()","cfpropertylist::plainparser#escape_char()","cfpropertylist::cfdate#get_value()","cfpropertylist::libxmlparser#get_value()","cfpropertylist::nokogirixmlparser#get_value()","cfpropertylist::rexmlparser#get_value()","cfpropertylist::guess()","cfpropertylist#guess()","cfpropertylist::plainparser#import_plain()","cfpropertylist::libxmlparser#import_xml()","cfpropertylist::nokogirixmlparser#import_xml()","cfpropertylist::rexmlparser#import_xml()","cfpropertylist::binary#int_to_binary()","cfpropertylist::binary#load()","cfpropertylist::libxmlparser#load()","cfpropertylist::list#load()","cfpropertylist::nokogirixmlparser#load()","cfpropertylist::parserinterface#load()","cfpropertylist::plainparser#load()","cfpropertylist::rexmlparser#load()","cfpropertylist::list#load_binary()","cfpropertylist::list#load_binary_str()","cfpropertylist::list#load_plain()","cfpropertylist::list#load_plain_str()","cfpropertylist::list#load_str()","cfpropertylist::list#load_xml()","cfpropertylist::list#load_xml_str()","cfpropertylist#native_types()","cfpropertylist::native_types()","cfpropertylist::cfarray::new()","cfpropertylist::cfdata::new()","cfpropertylist::cfdate::new()","cfpropertylist::cfdictionary::new()","cfpropertylist::cftype::new()","cfpropertylist::list::new()","cfpropertylist::libxmlparser#new_node()","cfpropertylist::nokogirixmlparser#new_node()","cfpropertylist::rexmlparser#new_node()","cfpropertylist::xmlparserinterface#new_node()","cfpropertylist::libxmlparser#new_text()","cfpropertylist::nokogirixmlparser#new_text()","cfpropertylist::rexmlparser#new_text()","cfpropertylist::xmlparserinterface#new_text()","cfpropertylist::binary#num_to_binary()","cfpropertylist::binary#object_ref_size()","cfpropertylist::binary::pack_int_array_with_size()","cfpropertylist::binary::pack_it_with_size()","cfpropertylist::cfdate::parse_date()","cfpropertylist::list::parsers()","cfpropertylist::list::parsers=()","cfpropertylist::cfstring#quoted()","cfpropertylist::plainparser#read_array()","cfpropertylist::plainparser#read_binary()","cfpropertylist::binary#read_binary_array()","cfpropertylist::binary#read_binary_data()","cfpropertylist::binary#read_binary_date()","cfpropertylist::binary#read_binary_dict()","cfpropertylist::binary#read_binary_int()","cfpropertylist::binary#read_binary_null_type()","cfpropertylist::binary#read_binary_object()","cfpropertylist::binary#read_binary_object_at()","cfpropertylist::binary#read_binary_real()","cfpropertylist::binary#read_binary_string()","cfpropertylist::binary#read_binary_unicode_string()","cfpropertylist::plainparser#read_dict()","cfpropertylist::binary#read_fd()","cfpropertylist::plainparser#read_quoted()","cfpropertylist::plainparser#read_unquoted()","cfpropertylist::binary#real_to_binary()","cfpropertylist::list#save()","cfpropertylist::cfdate#set_value()","cfpropertylist::plainparser#skip_whitespaces()","cfpropertylist::binary#string_to_binary()","cfpropertylist::cfarray#to_binary()","cfpropertylist::cfboolean#to_binary()","cfpropertylist::cfdata#to_binary()","cfpropertylist::cfdate#to_binary()","cfpropertylist::cfdictionary#to_binary()","cfpropertylist::cfinteger#to_binary()","cfpropertylist::cfreal#to_binary()","cfpropertylist::cfstring#to_binary()","cfpropertylist::cftype#to_binary()","cfpropertylist::cfuid#to_binary()","cfpropertylist::cfarray#to_plain()","cfpropertylist::cfboolean#to_plain()","cfpropertylist::cfdata#to_plain()","cfpropertylist::cfdate#to_plain()","cfpropertylist::cfdictionary#to_plain()","cfpropertylist::cfinteger#to_plain()","cfpropertylist::cfreal#to_plain()","cfpropertylist::cfstring#to_plain()","cfpropertylist::cftype#to_plain()","cfpropertylist::cfuid#to_plain()","array#to_plist()","enumerator#to_plist()","hash#to_plist()","cfpropertylist::binary#to_str()","cfpropertylist::libxmlparser#to_str()","cfpropertylist::list#to_str()","cfpropertylist::nokogirixmlparser#to_str()","cfpropertylist::parserinterface#to_str()","cfpropertylist::plainparser#to_str()","cfpropertylist::rexmlparser#to_str()","cfpropertylist::cfarray#to_xml()","cfpropertylist::cfboolean#to_xml()","cfpropertylist::cfdata#to_xml()","cfpropertylist::cfdate#to_xml()","cfpropertylist::cfdictionary#to_xml()","cfpropertylist::cfinteger#to_xml()","cfpropertylist::cfreal#to_xml()","cfpropertylist::cfstring#to_xml()","cfpropertylist::cftype#to_xml()","cfpropertylist::cfuid#to_xml()","cfpropertylist::binary::type_bytes()","cfpropertylist::binary#uid_to_binary()","cfpropertylist::binary#unpack_with_size()",""],"info":[["Array","","Array.html","",""],["CFFormatError","","CFFormatError.html","","<p>Exception thrown when format errors occur\n"],["CFPlistError","","CFPlistError.html","","<p>general plist error. All exceptions thrown are derived from this class.\n"],["CFPropertyList","","CFPropertyList.html","","<p>CFPropertyList implementation\n<p>class to read, manipulate and write both XML and binary property list files …\n"],["CFPropertyList::Binary","","CFPropertyList/Binary.html","","<p>Binary PList parser class\n"],["CFPropertyList::Blob","","CFPropertyList/Blob.html","","<p>Blob is intended to distinguish between a Ruby String instance that should be converted to a CFString …\n"],["CFPropertyList::CFArray","","CFPropertyList/CFArray.html","","<p>This class contains an array of values\n"],["CFPropertyList::CFBoolean","","CFPropertyList/CFBoolean.html","","<p>This class contains a boolean value\n"],["CFPropertyList::CFData","","CFPropertyList/CFData.html","","<p>This class contains binary data values\n"],["CFPropertyList::CFDate","","CFPropertyList/CFDate.html","","<p>This class holds Time values. While Apple uses seconds since 2001, the rest of the world uses seconds …\n"],["CFPropertyList::CFDictionary","","CFPropertyList/CFDictionary.html","","<p>this class contains a hash of values\n"],["CFPropertyList::CFInteger","","CFPropertyList/CFInteger.html","","<p>This class holds integer/fixnum values\n"],["CFPropertyList::CFReal","","CFPropertyList/CFReal.html","","<p>This class holds float values\n"],["CFPropertyList::CFString","","CFPropertyList/CFString.html","","<p>This class holds string values, both, UTF-8 and UTF-16BE It will convert the value to UTF-16BE if necessary …\n"],["CFPropertyList::CFType","","CFPropertyList/CFType.html","","<p>This class defines the base class for all CFType classes\n"],["CFPropertyList::CFUid","","CFPropertyList/CFUid.html","",""],["CFPropertyList::LibXMLParser","","CFPropertyList/LibXMLParser.html","","<p>XML parser\n"],["CFPropertyList::List","","CFPropertyList/List.html","","<p>Class representing a CFPropertyList. Instantiate with #new\n"],["CFPropertyList::NokogiriXMLParser","","CFPropertyList/NokogiriXMLParser.html","","<p>XML parser\n"],["CFPropertyList::ParserInterface","","CFPropertyList/ParserInterface.html","","<p>interface class for PList parsers\n"],["CFPropertyList::PlainParser","","CFPropertyList/PlainParser.html","","<p>XML parser\n"],["CFPropertyList::ReXMLParser","","CFPropertyList/ReXMLParser.html","","<p>XML parser\n"],["CFPropertyList::UidFixnum","","CFPropertyList/UidFixnum.html","","<p>UidFixnum is intended to distinguish between a Ruby Integer instance that should be converted to a CFInteger/CFReal …\n"],["CFPropertyList::XMLParserInterface","","CFPropertyList/XMLParserInterface.html","",""],["CFTypeError","","CFTypeError.html","","<p>Exception thrown when type errors occur\n"],["Enumerator","","Enumerator.html","",""],["Hash","","Hash.html","",""],["append_node","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-append_node","(parent, child)",""],["append_node","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-append_node","(parent, child)",""],["append_node","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-append_node","(parent, child)",""],["append_node","CFPropertyList::XMLParserInterface","CFPropertyList/XMLParserInterface.html#method-i-append_node","(parent, child)",""],["array_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-array_to_binary","(val)","<p>Convert array to binary format and add it to the object table\n"],["ascii_string?","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-ascii_string-3F","(str)",""],["bool_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-bool_to_binary","(val)","<p>Convert a bool value to binary and add it to the object table\n"],["bytes_needed","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-bytes_needed","(count)","<p>calculate how many bytes are needed to save <code>count</code>\n"],["charset_convert","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-charset_convert","(str,from,to=\"UTF-8\")","<p>Convert the given string from one charset to another\n"],["charset_strlen","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-charset_strlen","(str,charset=\"UTF-8\")","<p>Count characters considering character set\n"],["count_object_refs","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-count_object_refs","(object)",""],["data_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-data_to_binary","(val)","<p>Convert data value to binary format and add it to the object table\n"],["date_string","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-c-date_string","(val)","<p>create a XML date strimg from a time object\n"],["date_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-date_to_binary","(val)","<p>Convert date value (apple format) to binary and adds it to the object table\n"],["decoded_value","CFPropertyList::CFData","CFPropertyList/CFData.html#method-i-decoded_value","()","<p>get base64 decoded value\n"],["dict_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-dict_to_binary","(val)","<p>Convert dictionary to binary format and add it to the object table\n"],["encoded_value","CFPropertyList::CFData","CFPropertyList/CFData.html#method-i-encoded_value","()","<p>get base64 encoded value\n"],["escape_char","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-escape_char","()",""],["get_value","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-i-get_value","(format=CFDate::TIMESTAMP_UNIX)","<p>get timestamp, either UNIX or Apple timestamp\n"],["get_value","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-get_value","(n)","<p>get the value of a DOM node\n"],["get_value","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-get_value","(n)","<p>get the value of a DOM node\n"],["get_value","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-get_value","(n)","<p>get the value of a DOM node\n"],["guess","CFPropertyList","CFPropertyList.html#method-c-guess","(object, options = {})","<p>Create CFType hierarchy by guessing the correct CFType, e.g.\n\n<pre>x = {\n  &#39;a&#39; =&gt; [&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]\n}\ncftypes = ...</pre>\n"],["guess","CFPropertyList","CFPropertyList.html#method-i-guess","(object, options = {})","<p>Create CFType hierarchy by guessing the correct CFType, e.g.\n\n<pre>x = {\n  &#39;a&#39; =&gt; [&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]\n}\ncftypes = ...</pre>\n"],["import_plain","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-import_plain","()","<p>import the XML values\n"],["import_xml","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-import_xml","(node)","<p>import the XML values\n"],["import_xml","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-import_xml","(node)","<p>import the XML values\n"],["import_xml","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-import_xml","(node)","<p>import the XML values\n"],["int_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-int_to_binary","(value)","<p>Codes an integer to binary format\n"],["load","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-load","(opts)","<p>Read a binary plist file\n"],["load","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-load","(opts)","<p>read a XML file\n<p>opts &mdash; \n<p>:file - The filename of the file to load\n<p>:data - The data to parse\n"],["load","CFPropertyList::List","CFPropertyList/List.html#method-i-load","(file=nil,format=nil)","<p>Read a plist file\n<p>file = nil &mdash; The filename of the file to read. If nil, use <code>filename</code> instance variable …\n"],["load","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-load","(opts)","<p>read a XML file\n<p>opts &mdash; \n<p>:file - The filename of the file to load\n<p>:data - The data to parse\n"],["load","CFPropertyList::ParserInterface","CFPropertyList/ParserInterface.html#method-i-load","(opts={})","<p>load a plist\n"],["load","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-load","(opts)","<p>read a XML file\n<p>opts &mdash; \n<p>:file - The filename of the file to load\n<p>:data - The data to parse\n"],["load","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-load","(opts)","<p>read a XML file\n<p>opts &mdash; \n<p>:file - The filename of the file to load\n<p>:data - The data to parse\n"],["load_binary","CFPropertyList::List","CFPropertyList/List.html#method-i-load_binary","(filename=nil)","<p>read a binary plist file\n<p>filename = nil &mdash; The filename to read from; if nil, read from the file defined …\n\n"],["load_binary_str","CFPropertyList::List","CFPropertyList/List.html#method-i-load_binary_str","(str=nil)","<p>load a plist from a binary string\n<p>str &mdash; The string containing the plist\n\n"],["load_plain","CFPropertyList::List","CFPropertyList/List.html#method-i-load_plain","(filename=nil)","<p>read a plain plist file\n<p>filename = nil &mdash; The filename to read from; if nil, read from the file defined by …\n\n"],["load_plain_str","CFPropertyList::List","CFPropertyList/List.html#method-i-load_plain_str","(str=nil)","<p>load a plist from a plain string\n<p>str &mdash; The string containing the plist\n\n"],["load_str","CFPropertyList::List","CFPropertyList/List.html#method-i-load_str","(str=nil,format=nil)","<p>load a plist from a string\n<p>str = nil &mdash; The string containing the plist\n<p>format = nil &mdash; The format of the plist …\n"],["load_xml","CFPropertyList::List","CFPropertyList/List.html#method-i-load_xml","(filename=nil)","<p>Load an XML PropertyList\n<p>filename = nil &mdash; The filename to read from; if nil, read from the file defined …\n\n"],["load_xml_str","CFPropertyList::List","CFPropertyList/List.html#method-i-load_xml_str","(str=nil)","<p>load a plist from a XML string\n<p>str &mdash; The string containing the plist\n\n"],["native_types","CFPropertyList","CFPropertyList.html#method-i-native_types","(object,keys_as_symbols=false)","<p>Converts a CFType hiercharchy to native Ruby types\n"],["native_types","CFPropertyList","CFPropertyList.html#method-c-native_types","(object,keys_as_symbols=false)","<p>Converts a CFType hiercharchy to native Ruby types\n"],["new","CFPropertyList::CFArray","CFPropertyList/CFArray.html#method-c-new","(val=[])","<p>create a new array CFType\n"],["new","CFPropertyList::CFData","CFPropertyList/CFData.html#method-c-new","(value=nil,format=DATA_BASE64)","<p>set value to defined state, either base64 encoded or raw\n"],["new","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-c-new","(value = nil,format=CFDate::TIMESTAMP_UNIX)","<p>set value to defined state\n"],["new","CFPropertyList::CFDictionary","CFPropertyList/CFDictionary.html#method-c-new","(value={})","<p>Create new CFDictonary type.\n"],["new","CFPropertyList::CFType","CFPropertyList/CFType.html#method-c-new","(value=nil)",""],["new","CFPropertyList::List","CFPropertyList/List.html#method-c-new","(opts={})","<p>initialize a new CFPropertyList, arguments are:\n<p>:file &mdash; Parse a file\n<p>:format &mdash; Format is one of FORMAT_BINARY …\n"],["new_node","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-new_node","(name)",""],["new_node","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-new_node","(name)",""],["new_node","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-new_node","(name)",""],["new_node","CFPropertyList::XMLParserInterface","CFPropertyList/XMLParserInterface.html#method-i-new_node","(name)",""],["new_text","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-new_text","(val)",""],["new_text","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-new_text","(val)",""],["new_text","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-new_text","(val)",""],["new_text","CFPropertyList::XMLParserInterface","CFPropertyList/XMLParserInterface.html#method-i-new_text","(val)",""],["num_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-num_to_binary","(value)","<p>Converts a numeric value to binary and adds it to the object table\n"],["object_ref_size","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-object_ref_size","(object_refs)",""],["pack_int_array_with_size","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-pack_int_array_with_size","(nbytes, array)",""],["pack_it_with_size","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-pack_it_with_size","(nbytes,int)","<p>pack an <code>int</code> of <code>nbytes</code> with size\n"],["parse_date","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-c-parse_date","(val)","<p>parse a XML date string\n"],["parsers","CFPropertyList::List","CFPropertyList/List.html#method-c-parsers","()","<p>returns a list of registered parsers\n"],["parsers=","CFPropertyList::List","CFPropertyList/List.html#method-c-parsers-3D","(val)","<p>set a list of parsers\n"],["quoted","CFPropertyList::CFString","CFPropertyList/CFString.html#method-i-quoted","()",""],["read_array","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-read_array","()",""],["read_binary","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-read_binary","()",""],["read_binary_array","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_array","(fname,fd,length)","<p>Read an binary array value, including contained objects\n"],["read_binary_data","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_data","(fname,fd,length)","<p>Read a binary data value\n"],["read_binary_date","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_date","(fname,fd,length)","<p>read a binary date value\n"],["read_binary_dict","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_dict","(fname,fd,length)","<p>Read a dictionary value, including contained objects\n"],["read_binary_int","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_int","(fname,fd,length)","<p>read a binary int value\n"],["read_binary_null_type","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_null_type","(length)","<p>read a „null” type (i.e. null byte, marker byte, bool value)\n"],["read_binary_object","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_object","(fname,fd)","<p>Read an object type byte, decode it and delegate to the correct reader function\n"],["read_binary_object_at","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_object_at","(fname,fd,pos)","<p>Read an object type byte at position $pos, decode it and delegate to the correct reader function\n"],["read_binary_real","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_real","(fname,fd,length)","<p>read a binary real value\n"],["read_binary_string","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_string","(fname,fd,length)","<p>Read a binary string value\n"],["read_binary_unicode_string","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_binary_unicode_string","(fname,fd,length)","<p>Read a unicode string value, coded as UTF-16BE\n"],["read_dict","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-read_dict","()",""],["read_fd","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-read_fd","(fd, length)",""],["read_quoted","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-read_quoted","()",""],["read_unquoted","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-read_unquoted","()",""],["real_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-real_to_binary","(val)","<p>Codes a real value to binary format\n"],["save","CFPropertyList::List","CFPropertyList/List.html#method-i-save","(file=nil,format=nil,opts={})","<p>Serialize CFPropertyList object to specified format and write it to file\n<p>file = nil &mdash; The filename of the …\n"],["set_value","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-i-set_value","(value,format=CFDate::TIMESTAMP_UNIX)","<p>set value with timestamp, either Apple or UNIX\n"],["skip_whitespaces","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-skip_whitespaces","()",""],["string_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-string_to_binary","(val)","<p>Uniques and transforms a string value to binary format and adds it to the object table\n"],["to_binary","CFPropertyList::CFArray","CFPropertyList/CFArray.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFBoolean","CFPropertyList/CFBoolean.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFData","CFPropertyList/CFData.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFDictionary","CFPropertyList/CFDictionary.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFInteger","CFPropertyList/CFInteger.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFReal","CFPropertyList/CFReal.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFString","CFPropertyList/CFString.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_binary","CFPropertyList::CFType","CFPropertyList/CFType.html#method-i-to_binary","(bplist)",""],["to_binary","CFPropertyList::CFUid","CFPropertyList/CFUid.html#method-i-to_binary","(bplist)","<p>convert to binary\n"],["to_plain","CFPropertyList::CFArray","CFPropertyList/CFArray.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFBoolean","CFPropertyList/CFBoolean.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFData","CFPropertyList/CFData.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFDictionary","CFPropertyList/CFDictionary.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFInteger","CFPropertyList/CFInteger.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFReal","CFPropertyList/CFReal.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFString","CFPropertyList/CFString.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFType","CFPropertyList/CFType.html#method-i-to_plain","(plist)",""],["to_plain","CFPropertyList::CFUid","CFPropertyList/CFUid.html#method-i-to_plain","(plist)",""],["to_plist","Array","Array.html#method-i-to_plist","(options={})","<p>convert an array to plist format\n"],["to_plist","Enumerator","Enumerator.html#method-i-to_plist","(options={})","<p>convert an array to plist format\n"],["to_plist","Hash","Hash.html#method-i-to_plist","(options={})","<p>convert a hash to plist format\n"],["to_str","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-to_str","(opts={})","<p>Convert CFPropertyList to binary format; since we have to count our objects we simply unique CFDictionary …\n"],["to_str","CFPropertyList::LibXMLParser","CFPropertyList/LibXMLParser.html#method-i-to_str","(opts={})","<p>serialize CFPropertyList object to XML\n<p>opts = {} &mdash; Specify options: :formatted - Use indention and line …\n\n"],["to_str","CFPropertyList::List","CFPropertyList/List.html#method-i-to_str","(format=List::FORMAT_BINARY,opts={})","<p>convert plist to string\n<p>format = List::FORMAT_BINARY &mdash; The format to save the plist\n<p>opts={} &mdash; Pass parser options …\n"],["to_str","CFPropertyList::NokogiriXMLParser","CFPropertyList/NokogiriXMLParser.html#method-i-to_str","(opts={})","<p>serialize CFPropertyList object to XML\n<p>opts = {} &mdash; Specify options: :formatted - Use indention and line …\n\n"],["to_str","CFPropertyList::ParserInterface","CFPropertyList/ParserInterface.html#method-i-to_str","(opts={})","<p>convert a plist to string\n"],["to_str","CFPropertyList::PlainParser","CFPropertyList/PlainParser.html#method-i-to_str","(opts={})","<p>serialize CFPropertyList object to XML\n<p>opts = {} &mdash; Specify options: :formatted - Use indention and line …\n\n"],["to_str","CFPropertyList::ReXMLParser","CFPropertyList/ReXMLParser.html#method-i-to_str","(opts={})","<p>serialize CFPropertyList object to XML\n<p>opts = {} &mdash; Specify options: :formatted - Use indention and line …\n\n"],["to_xml","CFPropertyList::CFArray","CFPropertyList/CFArray.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFBoolean","CFPropertyList/CFBoolean.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFData","CFPropertyList/CFData.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFDate","CFPropertyList/CFDate.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFDictionary","CFPropertyList/CFDictionary.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFInteger","CFPropertyList/CFInteger.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFReal","CFPropertyList/CFReal.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFString","CFPropertyList/CFString.html#method-i-to_xml","(parser)","<p>convert to XML\n"],["to_xml","CFPropertyList::CFType","CFPropertyList/CFType.html#method-i-to_xml","(parser)",""],["to_xml","CFPropertyList::CFUid","CFPropertyList/CFUid.html#method-i-to_xml","(parser)",""],["type_bytes","CFPropertyList::Binary","CFPropertyList/Binary.html#method-c-type_bytes","(type, length)","<p>Create a type byte for binary format as defined by apple\n"],["uid_to_binary","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-uid_to_binary","(value)",""],["unpack_with_size","CFPropertyList::Binary","CFPropertyList/Binary.html#method-i-unpack_with_size","(nbytes, buff)",""],["README","","README_rdoc.html","","<p>CFPropertyList implementation class to read, manipulate and write both XML and binary property list files …\n"]]}}