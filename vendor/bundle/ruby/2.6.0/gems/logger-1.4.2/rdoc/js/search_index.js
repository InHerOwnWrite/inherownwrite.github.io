var search_data = {"index":{"searchIndex":["logger","error","formatter","logdevice","period","severity","shiftingerror","<<()","add()","add_log_header()","call()","check_shift_log()","close()","close()","create_logfile()","datetime_format()","datetime_format=()","debug()","debug!()","debug?()","error()","error!()","error?()","fatal()","fatal!()","fatal?()","format_datetime()","format_message()","format_severity()","info()","info!()","info?()","level=()","lock_shift_log()","log()","msg2str()","new()","new()","new()","next_rotate_time()","open_logfile()","previous_period_end()","reopen()","reopen()","set_dev()","sev_threshold=()","shift_log_age()","shift_log_period()","unknown()","warn()","warn!()","warn?()","write()"],"longSearchIndex":["logger","logger::error","logger::formatter","logger::logdevice","logger::period","logger::severity","logger::shiftingerror","logger#<<()","logger#add()","logger::logdevice#add_log_header()","logger::formatter#call()","logger::logdevice#check_shift_log()","logger#close()","logger::logdevice#close()","logger::logdevice#create_logfile()","logger#datetime_format()","logger#datetime_format=()","logger#debug()","logger#debug!()","logger#debug?()","logger#error()","logger#error!()","logger#error?()","logger#fatal()","logger#fatal!()","logger#fatal?()","logger::formatter#format_datetime()","logger#format_message()","logger#format_severity()","logger#info()","logger#info!()","logger#info?()","logger#level=()","logger::logdevice#lock_shift_log()","logger#log()","logger::formatter#msg2str()","logger::new()","logger::formatter::new()","logger::logdevice::new()","logger::period#next_rotate_time()","logger::logdevice#open_logfile()","logger::period#previous_period_end()","logger#reopen()","logger::logdevice#reopen()","logger::logdevice#set_dev()","logger#sev_threshold=()","logger::logdevice#shift_log_age()","logger::logdevice#shift_log_period()","logger#unknown()","logger#warn()","logger#warn!()","logger#warn?()","logger::logdevice#write()"],"info":[["Logger","","Logger.html","","<p>Description\n<p>The Logger class provides a simple but sophisticated logging utility that you can use to output …\n"],["Logger::Error","","Logger/Error.html","",""],["Logger::Formatter","","Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Logger::LogDevice","","Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::Period","","Logger/Period.html","",""],["Logger::Severity","","Logger/Severity.html","","<p>Logging severity.\n"],["Logger::ShiftingError","","Logger/ShiftingError.html","",""],["<<","Logger","Logger.html#method-i-3C-3C","(msg)","<p>Dump given message to the log device without any formatting.  If no log device exists, return <code>nil</code>.\n"],["add","Logger","Logger.html#method-i-add","(severity, message = nil, progname = nil)","<p>Args\n<p><code>severity</code> &mdash; Severity.  Constants are defined in Logger namespace: <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>, or …\n"],["add_log_header","Logger::LogDevice","Logger/LogDevice.html#method-i-add_log_header","(file)",""],["call","Logger::Formatter","Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["check_shift_log","Logger::LogDevice","Logger/LogDevice.html#method-i-check_shift_log","()",""],["close","Logger","Logger.html#method-i-close","()","<p>Close the logging device.\n"],["close","Logger::LogDevice","Logger/LogDevice.html#method-i-close","()",""],["create_logfile","Logger::LogDevice","Logger/LogDevice.html#method-i-create_logfile","(filename)",""],["datetime_format","Logger","Logger.html#method-i-datetime_format","()","<p>Returns the date format being used.  See #datetime_format=\n"],["datetime_format=","Logger","Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Set date-time format.\n<p><code>datetime_format</code> &mdash; A string suitable for passing to <code>strftime</code>.\n\n"],["debug","Logger","Logger.html#method-i-debug","(progname = nil, &block)","<p>Log a <code>DEBUG</code> message.\n<p>See #info for more information.\n"],["debug!","Logger","Logger.html#method-i-debug-21","()","<p>Sets the severity to DEBUG.\n"],["debug?","Logger","Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the printing of <code>DEBUG</code> messages.\n"],["error","Logger","Logger.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message.\n<p>See #info for more information.\n"],["error!","Logger","Logger.html#method-i-error-21","()","<p>Sets the severity to ERROR.\n"],["error?","Logger","Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the printing of <code>ERROR</code> messages.\n"],["fatal","Logger","Logger.html#method-i-fatal","(progname = nil, &block)","<p>Log a <code>FATAL</code> message.\n<p>See #info for more information.\n"],["fatal!","Logger","Logger.html#method-i-fatal-21","()","<p>Sets the severity to FATAL.\n"],["fatal?","Logger","Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the printing of <code>FATAL</code> messages.\n"],["format_datetime","Logger::Formatter","Logger/Formatter.html#method-i-format_datetime","(time)",""],["format_message","Logger","Logger.html#method-i-format_message","(severity, datetime, progname, msg)",""],["format_severity","Logger","Logger.html#method-i-format_severity","(severity)",""],["info","Logger","Logger.html#method-i-info","(progname = nil, &block)","<p>Log an <code>INFO</code> message.\n<p><code>message</code> &mdash; The message to log; does not need to be a String.\n<p><code>progname</code> &mdash; In the block form, …\n"],["info!","Logger","Logger.html#method-i-info-21","()","<p>Sets the severity to INFO.\n"],["info?","Logger","Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the printing of <code>INFO</code> messages.\n"],["level=","Logger","Logger.html#method-i-level-3D","(severity)","<p>Set logging severity threshold.\n<p><code>severity</code> &mdash; The Severity of the log message.\n\n"],["lock_shift_log","Logger::LogDevice","Logger/LogDevice.html#method-i-lock_shift_log","()",""],["log","Logger","Logger.html#method-i-log","(severity, message = nil, progname = nil)",""],["msg2str","Logger::Formatter","Logger/Formatter.html#method-i-msg2str","(msg)",""],["new","Logger","Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576, level: DEBUG, progname: nil, formatter: nil, datetime_format: nil, binmode: false, shift_period_suffix: '%Y%m%d')","<p>Args\n<p><code>logdev</code> &mdash; The log device.  This is a filename (String) or IO object (typically <code>STDOUT</code>, <code>STDERR</code>, or an …\n"],["new","Logger::Formatter","Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","Logger/LogDevice.html#method-c-new","(log = nil, shift_age: nil, shift_size: nil, shift_period_suffix: nil, binmode: false)",""],["next_rotate_time","Logger::Period","Logger/Period.html#method-i-next_rotate_time","(now, shift_age)",""],["open_logfile","Logger::LogDevice","Logger/LogDevice.html#method-i-open_logfile","(filename)",""],["previous_period_end","Logger::Period","Logger/Period.html#method-i-previous_period_end","(now, shift_age)",""],["reopen","Logger","Logger.html#method-i-reopen","(logdev = nil)","<p>Args\n<p><code>logdev</code> &mdash; The log device.  This is a filename (String) or IO object (typically <code>STDOUT</code>, <code>STDERR</code>, or an …\n\n"],["reopen","Logger::LogDevice","Logger/LogDevice.html#method-i-reopen","(log = nil)",""],["set_dev","Logger::LogDevice","Logger/LogDevice.html#method-i-set_dev","(log)",""],["sev_threshold=","Logger","Logger.html#method-i-sev_threshold-3D","(severity)",""],["shift_log_age","Logger::LogDevice","Logger/LogDevice.html#method-i-shift_log_age","()",""],["shift_log_period","Logger::LogDevice","Logger/LogDevice.html#method-i-shift_log_period","(period_end)",""],["unknown","Logger","Logger.html#method-i-unknown","(progname = nil, &block)","<p>Log an <code>UNKNOWN</code> message.  This will be printed no matter what the logger&#39;s level is.\n<p>See #info for …\n"],["warn","Logger","Logger.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message.\n<p>See #info for more information.\n"],["warn!","Logger","Logger.html#method-i-warn-21","()","<p>Sets the severity to WARN.\n"],["warn?","Logger","Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the printing of <code>WARN</code> messages.\n"],["write","Logger::LogDevice","Logger/LogDevice.html#method-i-write","(message)",""]]}}