var search_data = {"index":{"searchIndex":["shell","appendfile","appendio","builtincommand","cat","commandprocessor","concat","echo","error","filter","glob","processcontroller","systemcommand","tee","void","+()","<()",">()",">>()","[]()","activate()","active?()","active?()","active_job?()","active_jobs()","active_jobs_exist?()","active_process_controllers()","add_schedule()","alias_command()","alias_command()","alias_map()","append()","block_output_synchronize()","cat()","cd()","cd()","chdir()","concat()","debug=()","debug=()","def_system_command()","def_system_command()","default_record_separator()","default_record_separator=()","default_system_path()","default_system_path=()","each()","each()","each()","each()","each()","each()","each()","each()","each_active_object()","echo()","expand_path()","expand_path()","find_system_command()","flush()","foreach()","glob()","inactivate()","initialize()","input=()","input=()","input=()","input=()","inspect()","inspect()","install_system_commands()","jobs()","jobs()","jobs_exist?()","kill()","kill()","kill_job()","method_added()","mkdir()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notify()","notify()","notify()","open()","out()","popd()","popdir()","pushd()","pushdir()","rehash()","rmdir()","run_config()","sfork()","start()","start_export()","start_import()","start_job()","super_each()","system()","system_path=()","tee()","terminate()","terminate_job()","test()","to_a()","to_s()","top_level_test()","transact()","unalias_command()","unalias_command()","undef_system_command()","undef_system_command()","unlink()","wait?()","wait?()","wait_all_jobs_execution()","wait_to_finish_all_process_controllers()","waiting_job?()","waiting_jobs()","waiting_jobs_exist?()","|()"],"longSearchIndex":["shell","shell::appendfile","shell::appendio","shell::builtincommand","shell::cat","shell::commandprocessor","shell::concat","shell::echo","shell::error","shell::filter","shell::glob","shell::processcontroller","shell::systemcommand","shell::tee","shell::void","shell::filter#+()","shell::filter#<()","shell::filter#>()","shell::filter#>>()","shell::commandprocessor#[]()","shell::processcontroller::activate()","shell::builtincommand#active?()","shell::systemcommand#active?()","shell::processcontroller#active_job?()","shell::processcontroller#active_jobs()","shell::processcontroller#active_jobs_exist?()","shell::processcontroller::active_process_controllers()","shell::processcontroller#add_schedule()","shell::alias_command()","shell::commandprocessor::alias_command()","shell::commandprocessor::alias_map()","shell::commandprocessor#append()","shell::processcontroller::block_output_synchronize()","shell::commandprocessor#cat()","shell::cd()","shell#cd()","shell#chdir()","shell::commandprocessor#concat()","shell#debug=()","shell::debug=()","shell::def_system_command()","shell::commandprocessor::def_system_command()","shell::default_record_separator()","shell::default_record_separator=()","shell::default_system_path()","shell::default_system_path=()","shell::cat#each()","shell::concat#each()","shell::echo#each()","shell::filter#each()","shell::glob#each()","shell::systemcommand#each()","shell::tee#each()","shell::void#each()","shell::processcontroller::each_active_object()","shell::commandprocessor#echo()","shell#expand_path()","shell::commandprocessor#expand_path()","shell::commandprocessor#find_system_command()","shell::systemcommand#flush()","shell::commandprocessor#foreach()","shell::commandprocessor#glob()","shell::processcontroller::inactivate()","shell::commandprocessor::initialize()","shell::appendfile#input=()","shell::appendio#input=()","shell::filter#input=()","shell::systemcommand#input=()","shell#inspect()","shell::filter#inspect()","shell::install_system_commands()","shell#jobs()","shell::processcontroller#jobs()","shell::processcontroller#jobs_exist?()","shell#kill()","shell::systemcommand#kill()","shell::processcontroller#kill_job()","shell::commandprocessor::method_added()","shell::commandprocessor#mkdir()","shell::new()","shell::appendfile::new()","shell::appendio::new()","shell::cat::new()","shell::commandprocessor::new()","shell::concat::new()","shell::echo::new()","shell::filter::new()","shell::glob::new()","shell::processcontroller::new()","shell::systemcommand::new()","shell::tee::new()","shell::void::new()","shell::notify()","shell::commandprocessor#notify()","shell::systemcommand#notify()","shell::commandprocessor#open()","shell::commandprocessor#out()","shell#popd()","shell#popdir()","shell#pushd()","shell#pushdir()","shell::commandprocessor#rehash()","shell::commandprocessor#rmdir()","shell::commandprocessor::run_config()","shell::processcontroller#sfork()","shell::systemcommand#start()","shell::systemcommand#start_export()","shell::systemcommand#start_import()","shell::processcontroller#start_job()","shell::systemcommand#super_each()","shell::commandprocessor#system()","shell#system_path=()","shell::commandprocessor#tee()","shell::systemcommand#terminate()","shell::processcontroller#terminate_job()","shell::commandprocessor#test()","shell::filter#to_a()","shell::filter#to_s()","shell::commandprocessor#top_level_test()","shell::commandprocessor#transact()","shell::unalias_command()","shell::commandprocessor::unalias_command()","shell::undef_system_command()","shell::commandprocessor::undef_system_command()","shell::commandprocessor#unlink()","shell::builtincommand#wait?()","shell::systemcommand#wait?()","shell::processcontroller#wait_all_jobs_execution()","shell::processcontroller::wait_to_finish_all_process_controllers()","shell::processcontroller#waiting_job?()","shell::processcontroller#waiting_jobs()","shell::processcontroller#waiting_jobs_exist?()","shell::filter#|()"],"info":[["Shell","","Shell.html","","<p>Shell implements an idiomatic Ruby interface for common UNIX shell commands.\n<p>It provides users the ability …\n"],["Shell::AppendFile","","Shell/AppendFile.html","",""],["Shell::AppendIO","","Shell/AppendIO.html","",""],["Shell::BuiltInCommand","","Shell/BuiltInCommand.html","",""],["Shell::Cat","","Shell/Cat.html","",""],["Shell::CommandProcessor","","Shell/CommandProcessor.html","","<p>In order to execute a command on your OS, you need to define it as a Shell method.\n<p>Alternatively, you …\n"],["Shell::Concat","","Shell/Concat.html","",""],["Shell::Echo","","Shell/Echo.html","",""],["Shell::Error","","Shell/Error.html","",""],["Shell::Filter","","Shell/Filter.html","","<p>Any result of command execution is a Filter.\n<p>This class includes Enumerable, therefore a Filter object …\n"],["Shell::Glob","","Shell/Glob.html","",""],["Shell::ProcessController","","Shell/ProcessController.html","",""],["Shell::SystemCommand","","Shell/SystemCommand.html","",""],["Shell::Tee","","Shell/Tee.html","",""],["Shell::Void","","Shell/Void.html","",""],["+","Shell::Filter","Shell/Filter.html#method-i-2B","(filter)","<p>Outputs <code>filter1</code>, and then <code>filter2</code> using Join.new\n"],["<","Shell::Filter","Shell/Filter.html#method-i-3C","(src)","<p>Inputs from <code>source</code>, which is either a string of a file name or an IO object.\n"],[">","Shell::Filter","Shell/Filter.html#method-i-3E","(to)","<p>Outputs from <code>source</code>, which is either a string of a file name or an IO object.\n"],[">>","Shell::Filter","Shell/Filter.html#method-i-3E-3E","(to)","<p>Appends the output to <code>source</code>, which is either a string of a file name or an IO object.\n"],["[]","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-5B-5D","(command, file1, file2=nil)","<p>See Shell::CommandProcessor#test\n"],["activate","Shell::ProcessController","Shell/ProcessController.html#method-c-activate","(pc)",""],["active?","Shell::BuiltInCommand","Shell/BuiltInCommand.html#method-i-active-3F","()",""],["active?","Shell::SystemCommand","Shell/SystemCommand.html#method-i-active-3F","()",""],["active_job?","Shell::ProcessController","Shell/ProcessController.html#method-i-active_job-3F","(job)",""],["active_jobs","Shell::ProcessController","Shell/ProcessController.html#method-i-active_jobs","()",""],["active_jobs_exist?","Shell::ProcessController","Shell/ProcessController.html#method-i-active_jobs_exist-3F","()",""],["active_process_controllers","Shell::ProcessController","Shell/ProcessController.html#method-c-active_process_controllers","()",""],["add_schedule","Shell::ProcessController","Shell/ProcessController.html#method-i-add_schedule","(command)","<p>schedule a command\n"],["alias_command","Shell","Shell.html#method-c-alias_command","(ali, command, *opts, &block)","<p>Convenience method for Shell::CommandProcessor.alias_command. Defines an instance method which will execute …\n"],["alias_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-alias_command","(ali, command, *opts)","<p>Creates a command alias at the given <code>alias</code> for the given <code>command</code>, passing any <code>options</code> along with it. …\n"],["alias_map","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-alias_map","()","<p>Returns a list of aliased commands\n"],["append","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-append","(to, filter)",""],["block_output_synchronize","Shell::ProcessController","Shell/ProcessController.html#method-c-block_output_synchronize","(&b)",""],["cat","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-cat","(*filenames)","<p>Returns a Cat object, for the given <code>filenames</code>\n"],["cd","Shell","Shell.html#method-c-cd","(path)","<p>Creates a new Shell instance with the current working directory set to <code>path</code>.\n"],["cd","Shell","Shell.html#method-i-cd","(path = nil, verbose = @verbose)",""],["chdir","Shell","Shell.html#method-i-chdir","(path = nil, verbose = @verbose)","<p>Creates a Shell object which current directory is set to <code>path</code>.\n<p>If a block is given, it restores the current …\n"],["concat","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-concat","(*jobs)","<p>Returns a Concat object, for the given <code>jobs</code>\n"],["debug=","Shell","Shell.html#method-i-debug-3D","(val)",""],["debug=","Shell","Shell.html#method-c-debug-3D","(val)",""],["def_system_command","Shell","Shell.html#method-c-def_system_command","(command, path = command)","<p>Convenience method for Shell::CommandProcessor.def_system_command. Defines an instance method which will …\n"],["def_system_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-def_system_command","(command, path = command)","<p>Defines a command, registering <code>path</code> as a Shell method for the given <code>command</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Shell</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CommandProcessor</span>.<span class=\"ruby-identifier\">def_system_command</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_record_separator","Shell","Shell.html#method-c-default_record_separator","()",""],["default_record_separator=","Shell","Shell.html#method-c-default_record_separator-3D","(rs)",""],["default_system_path","Shell","Shell.html#method-c-default_system_path","()","<p>Returns the directories in the current shell&#39;s PATH environment variable as an array of directory …\n"],["default_system_path=","Shell","Shell.html#method-c-default_system_path-3D","(path)","<p>Sets the system_path that new instances of Shell should have as their initial system_path.\n<p><code>path</code> should …\n"],["each","Shell::Cat","Shell/Cat.html#method-i-each","(rs = nil)",""],["each","Shell::Concat","Shell/Concat.html#method-i-each","(rs = nil)",""],["each","Shell::Echo","Shell/Echo.html#method-i-each","(rs = nil)",""],["each","Shell::Filter","Shell/Filter.html#method-i-each","(rs = nil)","<p>Iterates a block for each line.\n"],["each","Shell::Glob","Shell/Glob.html#method-i-each","(rs = nil)",""],["each","Shell::SystemCommand","Shell/SystemCommand.html#method-i-each","(rs = nil)",""],["each","Shell::Tee","Shell/Tee.html#method-i-each","(rs = nil)",""],["each","Shell::Void","Shell/Void.html#method-i-each","(rs = nil)",""],["each_active_object","Shell::ProcessController","Shell/ProcessController.html#method-c-each_active_object","()",""],["echo","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-echo","(*strings)","<p>Returns a Echo object, for the given <code>strings</code>\n"],["expand_path","Shell","Shell.html#method-i-expand_path","(path)",""],["expand_path","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-expand_path","(path)","<p>CommandProcessor#expand_path(path)\n\n<pre>  path:   String\n  return: String\nreturns the absolute path for &lt;path&gt;</pre>\n"],["find_system_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-find_system_command","(command)","<p>private functions\n"],["flush","Shell::SystemCommand","Shell/SystemCommand.html#method-i-flush","()",""],["foreach","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-foreach","(path = nil, *rs)","<p>See IO.foreach when <code>path</code> is a file.\n<p>See Dir.foreach when <code>path</code> is a directory.\n"],["glob","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-glob","(pattern)","\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">sort</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">filenames</span>)\n  <span class=\"ruby-constant\">Sort</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-keyword\">self</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">filenames</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>Returns a Glob filter object, with the given <code>pattern</code> …\n"],["inactivate","Shell::ProcessController","Shell/ProcessController.html#method-c-inactivate","(pc)",""],["initialize","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-initialize","()",""],["input=","Shell::AppendFile","Shell/AppendFile.html#method-i-input-3D","(filter)",""],["input=","Shell::AppendIO","Shell/AppendIO.html#method-i-input-3D","(filter)",""],["input=","Shell::Filter","Shell/Filter.html#method-i-input-3D","(filter)",""],["input=","Shell::SystemCommand","Shell/SystemCommand.html#method-i-input-3D","(inp)",""],["inspect","Shell","Shell.html#method-i-inspect","()",""],["inspect","Shell::Filter","Shell/Filter.html#method-i-inspect","()",""],["install_system_commands","Shell","Shell.html#method-c-install_system_commands","(pre = \"sys_\")","<p>Convenience method for Shell::CommandProcessor.install_system_commands. Defines instance methods representing …\n"],["jobs","Shell","Shell.html#method-i-jobs","()","<p>Returns a list of scheduled jobs.\n"],["jobs","Shell::ProcessController","Shell/ProcessController.html#method-i-jobs","()",""],["jobs_exist?","Shell::ProcessController","Shell/ProcessController.html#method-i-jobs_exist-3F","()",""],["kill","Shell","Shell.html#method-i-kill","(sig, command)","<p>Sends the given <code>signal</code> to the given <code>job</code>\n"],["kill","Shell::SystemCommand","Shell/SystemCommand.html#method-i-kill","(sig)",""],["kill_job","Shell::ProcessController","Shell/ProcessController.html#method-i-kill_job","(sig, command)","<p>kill a job\n"],["method_added","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-method_added","(id)",""],["mkdir","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-mkdir","(*path)","<p>Same as Dir.mkdir, except multiple directories are allowed.\n"],["new","Shell","Shell.html#method-c-new","(pwd = Dir.pwd, umask = nil)","<p>Creates a Shell object which current directory is set to the process current directory, unless otherwise …\n"],["new","Shell::AppendFile","Shell/AppendFile.html#method-c-new","(sh, to_filename, filter)",""],["new","Shell::AppendIO","Shell/AppendIO.html#method-c-new","(sh, io, filter)",""],["new","Shell::Cat","Shell/Cat.html#method-c-new","(sh, *filenames)",""],["new","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-new","(shell)",""],["new","Shell::Concat","Shell/Concat.html#method-c-new","(sh, *jobs)",""],["new","Shell::Echo","Shell/Echo.html#method-c-new","(sh, *strings)",""],["new","Shell::Filter","Shell/Filter.html#method-c-new","(sh)",""],["new","Shell::Glob","Shell/Glob.html#method-c-new","(sh, pattern)",""],["new","Shell::ProcessController","Shell/ProcessController.html#method-c-new","(shell)",""],["new","Shell::SystemCommand","Shell/SystemCommand.html#method-c-new","(sh, command, *opts)",""],["new","Shell::Tee","Shell/Tee.html#method-c-new","(sh, filename)",""],["new","Shell::Void","Shell/Void.html#method-c-new","(sh, *opts)",""],["notify","Shell","Shell.html#method-c-notify","(*opts)",""],["notify","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-notify","(*opts)","<p>%pwd, %cwd -&gt; @pwd\n"],["notify","Shell::SystemCommand","Shell/SystemCommand.html#method-i-notify","(*opts)","<p>ex)\n\n<pre>if you wish to output:\n   &quot;shell: job(#{@command}:#{@pid}) close pipe-out.&quot;\nthen\n   mes: &quot;job(%id) ...</pre>\n"],["open","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-open","(path, mode = nil, perm = 0666, &b)","<p>See IO.open when <code>path</code> is a file.\n<p>See Dir.open when <code>path</code> is a directory.\n"],["out","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-out","(dev = STDOUT, &block)","<p>Calls <code>device.print</code> on the result passing the <em>block</em> to #transact\n"],["popd","Shell","Shell.html#method-i-popd","()",""],["popdir","Shell","Shell.html#method-i-popdir","()","<p>Pops a directory from the directory stack, and sets the current directory to it.\n"],["pushd","Shell","Shell.html#method-i-pushd","(path = nil, verbose = @verbose)",""],["pushdir","Shell","Shell.html#method-i-pushdir","(path = nil, verbose = @verbose)","<p>Pushes the current directory to the directory stack, changing the current directory to <code>path</code>.\n<p>If <code>path</code> is …\n"],["rehash","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-rehash","()","<p>Clears the command hash table.\n"],["rmdir","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-rmdir","(*path)","<p>Same as Dir.rmdir, except multiple directories are allowed.\n"],["run_config","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-run_config","()","<p>include run file.\n"],["sfork","Shell::ProcessController","Shell/ProcessController.html#method-i-sfork","(command)","<p>simple fork\n"],["start","Shell::SystemCommand","Shell/SystemCommand.html#method-i-start","()",""],["start_export","Shell::SystemCommand","Shell/SystemCommand.html#method-i-start_export","()",""],["start_import","Shell::SystemCommand","Shell/SystemCommand.html#method-i-start_import","()",""],["start_job","Shell::ProcessController","Shell/ProcessController.html#method-i-start_job","(command = nil)","<p>start a job\n"],["super_each","Shell::SystemCommand","Shell/SystemCommand.html#method-i-super_each","(rs = nil)",""],["system","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-system","(command, *opts)","<p>Executes the given <code>command</code> with the <code>options</code> parameter.\n<p>Example:\n\n<pre>print sh.system(&quot;ls&quot;, &quot;-l&quot;)\nsh.system(&quot;ls&quot;, ...</pre>\n"],["system_path=","Shell","Shell.html#method-i-system_path-3D","(path)","<p>Sets the system path (the Shell instance&#39;s PATH environment variable).\n<p><code>path</code> should be an array of …\n"],["tee","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-tee","(file)","<p>Returns a Tee filter object, with the given <code>file</code> command\n"],["terminate","Shell::SystemCommand","Shell/SystemCommand.html#method-i-terminate","()",""],["terminate_job","Shell::ProcessController","Shell/ProcessController.html#method-i-terminate_job","(command)","<p>terminate a job\n"],["test","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-test","(command, file1, file2=nil)","<p>Tests if the given <code>command</code> exists in <code>file1</code>, or optionally <code>file2</code>.\n<p>Example:\n\n<pre>sh[?e, &quot;foo&quot;]\nsh[:e, &quot;foo&quot;]\nsh[&quot;e&quot;, ...</pre>\n"],["to_a","Shell::Filter","Shell/Filter.html#method-i-to_a","()",""],["to_s","Shell::Filter","Shell/Filter.html#method-i-to_s","()",""],["top_level_test","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-top_level_test","(command, file1, file2=nil)","<p>See Shell::CommandProcessor#test\n"],["transact","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-transact","(&block)","<p>Executes a block as self\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sh</span>.<span class=\"ruby-identifier\">transact</span> { <span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;ls&quot;</span>, <span class=\"ruby-string\">&quot;-l&quot;</span>) <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">head</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">STDOUT</span> }\n</pre>\n"],["unalias_command","Shell","Shell.html#method-c-unalias_command","(ali)","<p>Convenience method for Shell::CommandProcessor.unalias_command\n"],["unalias_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-unalias_command","(ali)","<p>Unaliases the given <code>alias</code> command.\n"],["undef_system_command","Shell","Shell.html#method-c-undef_system_command","(command)","<p>Convenience method for Shell::CommandProcessor.undef_system_command\n"],["undef_system_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-undef_system_command","(command)","<p>Undefines a command\n"],["unlink","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-unlink","(path)","<p>See IO.unlink when <code>path</code> is a file.\n<p>See Dir.unlink when <code>path</code> is a directory.\n"],["wait?","Shell::BuiltInCommand","Shell/BuiltInCommand.html#method-i-wait-3F","()",""],["wait?","Shell::SystemCommand","Shell/SystemCommand.html#method-i-wait-3F","()",""],["wait_all_jobs_execution","Shell::ProcessController","Shell/ProcessController.html#method-i-wait_all_jobs_execution","()","<p>wait for all jobs to terminate\n"],["wait_to_finish_all_process_controllers","Shell::ProcessController","Shell/ProcessController.html#method-c-wait_to_finish_all_process_controllers","()",""],["waiting_job?","Shell::ProcessController","Shell/ProcessController.html#method-i-waiting_job-3F","(job)",""],["waiting_jobs","Shell::ProcessController","Shell/ProcessController.html#method-i-waiting_jobs","()",""],["waiting_jobs_exist?","Shell::ProcessController","Shell/ProcessController.html#method-i-waiting_jobs_exist-3F","()",""],["|","Shell::Filter","Shell/Filter.html#method-i-7C","(filter)","<p>Processes a pipeline.\n"]]}}